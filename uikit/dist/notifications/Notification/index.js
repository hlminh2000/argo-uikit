'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports['default'] =
  exports.NOTIFICATION_VARIANTS =
  exports.NOTIFICATION_SIZES =
  exports.NOTIFICATION_INTERACTION_EVENTS =
  exports.NOTIFICATION_INTERACTION =
    void 0;

var _core = require('@emotion/core');

var _extends2 = _interopRequireDefault(require('@babel/runtime/helpers/extends'));

var _defineProperty2 = _interopRequireDefault(require('@babel/runtime/helpers/defineProperty'));

var _react = _interopRequireDefault(require('react'));

var _propTypes = _interopRequireDefault(require('prop-types'));

var _Typography = _interopRequireDefault(require('../../Typography'));

var _Icon = _interopRequireDefault(require('../../Icon'));

var _FocusWrapper = _interopRequireDefault(require('../../FocusWrapper'));

var _useTheme = _interopRequireDefault(require('../../utils/useTheme'));

var _styledComponents = require('./styledComponents');

var __jsx = _react['default'].createElement;

function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}

/*
 * Copyright (c) 2020 The Ontario Institute for Cancer Research. All rights reserved
 *
 * This program and the accompanying materials are made available under the terms of
 * the GNU Affero General Public License v3.0. You should have received a copy of the
 * GNU Affero General Public License along with this program.
 *  If not, see <http://www.gnu.org/licenses/>.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

var getDefaultInteractionType = function getDefaultInteractionType(variant) {
  var _NOTIFICATION_VARIANT;

  return ((_NOTIFICATION_VARIANT = {}),
  (0, _defineProperty2['default'])(
    _NOTIFICATION_VARIANT,
    NOTIFICATION_VARIANTS.INFO,
    NOTIFICATION_INTERACTION.CLOSE,
  ),
  (0, _defineProperty2['default'])(
    _NOTIFICATION_VARIANT,
    NOTIFICATION_VARIANTS.SUCCESS,
    NOTIFICATION_INTERACTION.ACTION_DISMISS,
  ),
  (0, _defineProperty2['default'])(
    _NOTIFICATION_VARIANT,
    NOTIFICATION_VARIANTS.WARNING,
    NOTIFICATION_INTERACTION.CLOSE,
  ),
  (0, _defineProperty2['default'])(
    _NOTIFICATION_VARIANT,
    NOTIFICATION_VARIANTS.ERROR,
    NOTIFICATION_INTERACTION.CLOSE,
  ),
  _NOTIFICATION_VARIANT)[variant];
};

var DefaultIcon = function DefaultIcon(_ref4) {
  var _NOTIFICATION_VARIANT2, _NOTIFICATION_VARIANT3, _NOTIFICATION_SIZES$M;

  var variant = _ref4.variant,
    size = _ref4.size;
  var fill = ((_NOTIFICATION_VARIANT2 = {}),
  (0, _defineProperty2['default'])(_NOTIFICATION_VARIANT2, NOTIFICATION_VARIANTS.INFO, 'secondary'),
  (0, _defineProperty2['default'])(
    _NOTIFICATION_VARIANT2,
    NOTIFICATION_VARIANTS.SUCCESS,
    'success',
  ),
  (0, _defineProperty2['default'])(
    _NOTIFICATION_VARIANT2,
    NOTIFICATION_VARIANTS.WARNING,
    'warning',
  ),
  (0, _defineProperty2['default'])(_NOTIFICATION_VARIANT2, NOTIFICATION_VARIANTS.ERROR, 'error'),
  _NOTIFICATION_VARIANT2)[variant];
  var name = ((_NOTIFICATION_VARIANT3 = {}),
  (0, _defineProperty2['default'])(_NOTIFICATION_VARIANT3, NOTIFICATION_VARIANTS.INFO, 'info'),
  (0, _defineProperty2['default'])(
    _NOTIFICATION_VARIANT3,
    NOTIFICATION_VARIANTS.SUCCESS,
    'success',
  ),
  (0, _defineProperty2['default'])(
    _NOTIFICATION_VARIANT3,
    NOTIFICATION_VARIANTS.WARNING,
    'warning',
  ),
  (0, _defineProperty2['default'])(_NOTIFICATION_VARIANT3, NOTIFICATION_VARIANTS.ERROR, 'warning'),
  _NOTIFICATION_VARIANT3)[variant];
  var width = ((_NOTIFICATION_SIZES$M = {}),
  (0, _defineProperty2['default'])(_NOTIFICATION_SIZES$M, NOTIFICATION_SIZES.MD, '25px'),
  (0, _defineProperty2['default'])(_NOTIFICATION_SIZES$M, NOTIFICATION_SIZES.SM, '20px'),
  _NOTIFICATION_SIZES$M)[size];
  var height = width;
  return (0, _core.jsx)(_Icon['default'], {
    name: name,
    fill: fill,
    width: width,
    height: height,
  });
};

var _ref =
  process.env.NODE_ENV === 'production'
    ? {
        name: 'lfyos2-Uikit-Notification',
        styles: 'font-size:16px;;label:Uikit-Notification;',
      }
    : {
        name: 'lfyos2-Uikit-Notification',
        styles: 'font-size:16px;;label:Uikit-Notification;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref2 =
  process.env.NODE_ENV === 'production'
    ? {
        name: 'l4mh7u-Uikit-Notification',
        styles: 'margin:0px;;label:Uikit-Notification;',
      }
    : {
        name: 'l4mh7u-Uikit-Notification',
        styles: 'margin:0px;;label:Uikit-Notification;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref3 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '5bsi2w-Uikit-Notification',
        styles: 'margin:8px;height:15px;line-height:0px;;label:Uikit-Notification;',
      }
    : {
        name: '5bsi2w-Uikit-Notification',
        styles: 'margin:8px;height:15px;line-height:0px;;label:Uikit-Notification;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvR3FGIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi8uLi9UeXBvZ3JhcGh5JztcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL0ljb24nO1xuaW1wb3J0IEZvY3VzV3JhcHBlciBmcm9tICcuLi8uLi9Gb2N1c1dyYXBwZXInO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uLy4uL3V0aWxzL3VzZVRoZW1lJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvbkJvZHlDb250YWluZXIsIEljb25Db250YWluZXIsIE5vdGlmaWNhdGlvbkNvbnRhaW5lciwgQWN0aW9uQnV0dG9uc0NvbnRhaW5lciwgQWN0aW9uQnV0dG9uLCBnZXRCb3JkZXJDb2xvciwgfSBmcm9tICcuL3N0eWxlZENvbXBvbmVudHMnO1xuY29uc3QgZ2V0RGVmYXVsdEludGVyYWN0aW9uVHlwZSA9ICh2YXJpYW50KSA9PiAoe1xuICAgIFtOT1RJRklDQVRJT05fVkFSSUFOVFMuSU5GT106IE5PVElGSUNBVElPTl9JTlRFUkFDVElPTi5DTE9TRSxcbiAgICBbTk9USUZJQ0FUSU9OX1ZBUklBTlRTLlNVQ0NFU1NdOiBOT1RJRklDQVRJT05fSU5URVJBQ1RJT04uQUNUSU9OX0RJU01JU1MsXG4gICAgW05PVElGSUNBVElPTl9WQVJJQU5UUy5XQVJOSU5HXTogTk9USUZJQ0FUSU9OX0lOVEVSQUNUSU9OLkNMT1NFLFxuICAgIFtOT1RJRklDQVRJT05fVkFSSUFOVFMuRVJST1JdOiBOT1RJRklDQVRJT05fSU5URVJBQ1RJT04uQ0xPU0UsXG59W3ZhcmlhbnRdKTtcbmNvbnN0IERlZmF1bHRJY29uID0gKHsgdmFyaWFudCwgc2l6ZSB9KSA9PiB7XG4gICAgY29uc3QgZmlsbCA9IHtcbiAgICAgICAgW05PVElGSUNBVElPTl9WQVJJQU5UUy5JTkZPXTogJ3NlY29uZGFyeScsXG4gICAgICAgIFtOT1RJRklDQVRJT05fVkFSSUFOVFMuU1VDQ0VTU106ICdzdWNjZXNzJyxcbiAgICAgICAgW05PVElGSUNBVElPTl9WQVJJQU5UUy5XQVJOSU5HXTogJ3dhcm5pbmcnLFxuICAgICAgICBbTk9USUZJQ0FUSU9OX1ZBUklBTlRTLkVSUk9SXTogJ2Vycm9yJyxcbiAgICB9W3ZhcmlhbnRdO1xuICAgIGNvbnN0IG5hbWUgPSB7XG4gICAgICAgIFtOT1RJRklDQVRJT05fVkFSSUFOVFMuSU5GT106ICdpbmZvJyxcbiAgICAgICAgW05PVElGSUNBVElPTl9WQVJJQU5UUy5TVUNDRVNTXTogJ3N1Y2Nlc3MnLFxuICAgICAgICBbTk9USUZJQ0FUSU9OX1ZBUklBTlRTLldBUk5JTkddOiAnd2FybmluZycsXG4gICAgICAgIFtOT1RJRklDQVRJT05fVkFSSUFOVFMuRVJST1JdOiAnd2FybmluZycsXG4gICAgfVt2YXJpYW50XTtcbiAgICBjb25zdCB3aWR0aCA9IHtcbiAgICAgICAgW05PVElGSUNBVElPTl9TSVpFUy5NRF06ICcyNXB4JyxcbiAgICAgICAgW05PVElGSUNBVElPTl9TSVpFUy5TTV06ICcyMHB4JyxcbiAgICB9W3NpemVdO1xuICAgIGNvbnN0IGhlaWdodCA9IHdpZHRoO1xuICAgIHJldHVybiA8SWNvbiBuYW1lPXtuYW1lfSBmaWxsPXtmaWxsfSB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fS8+O1xufTtcbmNvbnN0IE5vdGlmaWNhdGlvbiA9IChfYSkgPT4ge1xuICAgIHZhciB7IHZhcmlhbnQgPSBOT1RJRklDQVRJT05fVkFSSUFOVFMuSU5GTywgc2l6ZSA9IE5PVElGSUNBVElPTl9TSVpFUy5NRCwgaW50ZXJhY3Rpb25UeXBlID0gZ2V0RGVmYXVsdEludGVyYWN0aW9uVHlwZSh2YXJpYW50KSwgdGl0bGUsIGNvbnRlbnQsIGFjdGlvblRleHQgPSAnVklFVycsIGRpc21pc3NUZXh0ID0gJ0RJU01JU1MnLCBpY29uID0gPERlZmF1bHRJY29uIHZhcmlhbnQ9e3ZhcmlhbnR9IHNpemU9e3NpemV9Lz4sIG9uSW50ZXJhY3Rpb24gPSAoeyB0eXBlLCBldmVudCwgfSkgPT4geyB9LCBub1NoYWRvdyA9IGZhbHNlLCBjb250ZW50UHJvcHMgPSB7fSB9ID0gX2EsIG90aGVyUHJvcHMgPSBfX3Jlc3QoX2EsIFtcInZhcmlhbnRcIiwgXCJzaXplXCIsIFwiaW50ZXJhY3Rpb25UeXBlXCIsIFwidGl0bGVcIiwgXCJjb250ZW50XCIsIFwiYWN0aW9uVGV4dFwiLCBcImRpc21pc3NUZXh0XCIsIFwiaWNvblwiLCBcIm9uSW50ZXJhY3Rpb25cIiwgXCJub1NoYWRvd1wiLCBcImNvbnRlbnRQcm9wc1wiXSk7XG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICAgIGNvbnN0IGRpc3BhdGNoRXZlbnQgPSAoZXZlbnRUeXBlKSA9PiAoZSkgPT4gb25JbnRlcmFjdGlvbih7IHR5cGU6IGV2ZW50VHlwZSwgZXZlbnQ6IGUgfSk7XG4gICAgY29uc3QgdGl0bGVUeXBvZ3JhcGh5VmFyaWFudCA9IHtcbiAgICAgICAgW05PVElGSUNBVElPTl9TSVpFUy5NRF06ICdzdWJ0aXRsZTInLFxuICAgICAgICBbTk9USUZJQ0FUSU9OX1NJWkVTLlNNXTogJ3BhcmFncmFwaCcsXG4gICAgfVtzaXplXTtcbiAgICBjb25zdCBib2R5VHlwb2dyYXBoeVZhcmlhbnQgPSB7XG4gICAgICAgIFtOT1RJRklDQVRJT05fU0laRVMuTURdOiAncGFyYWdyYXBoJyxcbiAgICAgICAgW05PVElGSUNBVElPTl9TSVpFUy5TTV06ICdkYXRhJyxcbiAgICB9W3NpemVdO1xuICAgIGNvbnN0IGhlYWRlclZlcnRpY2FsTWFyZ2luID0ge1xuICAgICAgICBbTk9USUZJQ0FUSU9OX1NJWkVTLk1EXTogJzRweCcsXG4gICAgICAgIFtOT1RJRklDQVRJT05fU0laRVMuU01dOiAnMHB4JyxcbiAgICB9W3NpemVdO1xuICAgIHJldHVybiAoPE5vdGlmaWNhdGlvbkNvbnRhaW5lciB2YXJpYW50PXt2YXJpYW50fSBub1NoYWRvdz17bm9TaGFkb3d9IHsuLi5vdGhlclByb3BzfT5cbiAgICAgIHtpY29uICYmIDxJY29uQ29udGFpbmVyPntpY29ufTwvSWNvbkNvbnRhaW5lcj59XG4gICAgICA8Tm90aWZpY2F0aW9uQm9keUNvbnRhaW5lciB7Li4uY29udGVudFByb3BzfT5cbiAgICAgICAge3RpdGxlICYmICg8VHlwb2dyYXBoeSB2YXJpYW50PXt0aXRsZVR5cG9ncmFwaHlWYXJpYW50fSBib2xkIGNzcz17Y3NzIGBcbiAgICAgICAgICAgICAgJHtzaXplID09PSBOT1RJRklDQVRJT05fU0laRVMuTURcbiAgICAgICAgPyBjc3MgYFxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICAgICAgICBgXG4gICAgICAgIDogJyd9XG4gICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAke2hlYWRlclZlcnRpY2FsTWFyZ2lufTtcbiAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogJHtoZWFkZXJWZXJ0aWNhbE1hcmdpbn07XG4gICAgICAgICAgICBgfT5cbiAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICA8L1R5cG9ncmFwaHk+KX1cbiAgICAgICAge2NvbnRlbnQgJiYgKDxUeXBvZ3JhcGh5IHZhcmlhbnQ9e2JvZHlUeXBvZ3JhcGh5VmFyaWFudH0gY3NzPXtjc3MgYFxuICAgICAgICAgICAgICBtYXJnaW46IDBweDtcbiAgICAgICAgICAgIGB9PlxuICAgICAgICAgICAge2NvbnRlbnR9XG4gICAgICAgICAgPC9UeXBvZ3JhcGh5Pil9XG4gICAgICA8L05vdGlmaWNhdGlvbkJvZHlDb250YWluZXI+XG4gICAgICB7aW50ZXJhY3Rpb25UeXBlID09PSBOT1RJRklDQVRJT05fSU5URVJBQ1RJT04uQ0xPU0UgJiYgKDxGb2N1c1dyYXBwZXIgY3NzPXtjc3MgYFxuICAgICAgICAgICAgbWFyZ2luOiA4cHg7XG4gICAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMHB4O1xuICAgICAgICAgIGB9IG9uQ2xpY2s9e2Rpc3BhdGNoRXZlbnQoTk9USUZJQ0FUSU9OX0lOVEVSQUNUSU9OX0VWRU5UUy5DTE9TRSl9PlxuICAgICAgICAgIDxJY29uIG5hbWU9XCJ0aW1lc1wiIHdpZHRoPVwiMTJweFwiIGhlaWdodD1cIjEycHhcIiBmaWxsPVwicHJpbWFyeV8xXCIvPlxuICAgICAgICA8L0ZvY3VzV3JhcHBlcj4pfVxuICAgICAge2ludGVyYWN0aW9uVHlwZSA9PT0gTk9USUZJQ0FUSU9OX0lOVEVSQUNUSU9OLkFDVElPTl9ESVNNSVNTICYmICg8QWN0aW9uQnV0dG9uc0NvbnRhaW5lciB2YXJpYW50PXt2YXJpYW50fT5cbiAgICAgICAgICA8QWN0aW9uQnV0dG9uIGNzcz17Y3NzIGBcbiAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogc29saWQgMXB4ICR7Z2V0Qm9yZGVyQ29sb3IoeyB0aGVtZSwgdmFyaWFudCB9KX07XG4gICAgICAgICAgICBgfSBvbkNsaWNrPXtkaXNwYXRjaEV2ZW50KE5PVElGSUNBVElPTl9JTlRFUkFDVElPTl9FVkVOVFMuQUNUSU9OKX0+XG4gICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiZGF0YVwiIGNvbXBvbmVudD1cImRpdlwiIGJvbGQ+XG4gICAgICAgICAgICAgIHthY3Rpb25UZXh0fVxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgIDwvQWN0aW9uQnV0dG9uPlxuICAgICAgICAgIDxBY3Rpb25CdXR0b24gdmFyaWFudD17dmFyaWFudH0gb25DbGljaz17ZGlzcGF0Y2hFdmVudChOT1RJRklDQVRJT05fSU5URVJBQ1RJT05fRVZFTlRTLkRJU01JU1MpfT5cbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJkYXRhXCIgY29tcG9uZW50PVwiZGl2XCIgYm9sZD5cbiAgICAgICAgICAgICAge2Rpc21pc3NUZXh0fVxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgIDwvQWN0aW9uQnV0dG9uPlxuICAgICAgICA8L0FjdGlvbkJ1dHRvbnNDb250YWluZXI+KX1cbiAgICA8L05vdGlmaWNhdGlvbkNvbnRhaW5lcj4pO1xufTtcbmV4cG9ydCBjb25zdCBOT1RJRklDQVRJT05fVkFSSUFOVFMgPSBPYmplY3QuZnJlZXplKHtcbiAgICBJTkZPOiAnSU5GTycsXG4gICAgU1VDQ0VTUzogJ1NVQ0NFU1MnLFxuICAgIFdBUk5JTkc6ICdXQVJOSU5HJyxcbiAgICBFUlJPUjogJ0VSUk9SJyxcbn0pO1xuZXhwb3J0IGNvbnN0IE5PVElGSUNBVElPTl9JTlRFUkFDVElPTl9FVkVOVFMgPSBPYmplY3QuZnJlZXplKHtcbiAgICBDTE9TRTogJ0NMT1NFJyxcbiAgICBBQ1RJT046ICdBQ1RJT04nLFxuICAgIERJU01JU1M6ICdESVNNSVNTJyxcbn0pO1xuZXhwb3J0IGNvbnN0IE5PVElGSUNBVElPTl9JTlRFUkFDVElPTiA9IE9iamVjdC5mcmVlemUoe1xuICAgIENMT1NFOiAnQ0xPU0UnLFxuICAgIEFDVElPTl9ESVNNSVNTOiAnQUNUSU9OX0RJU01JU1MnLFxuICAgIE5PTkU6ICdOT05FJyxcbn0pO1xuZXhwb3J0IGNvbnN0IE5PVElGSUNBVElPTl9TSVpFUyA9IE9iamVjdC5mcmVlemUoe1xuICAgIE1EOiAnTUQnLFxuICAgIFNNOiAnU00nLFxufSk7XG5Ob3RpZmljYXRpb24ucHJvcFR5cGVzID0ge1xuICAgIHRpdGxlOiBQcm9wVHlwZXMubm9kZSxcbiAgICBjb250ZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgICBpY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgICBvbkludGVyYWN0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgICBOT1RJRklDQVRJT05fVkFSSUFOVFMuSU5GTyxcbiAgICAgICAgTk9USUZJQ0FUSU9OX1ZBUklBTlRTLlNVQ0NFU1MsXG4gICAgICAgIE5PVElGSUNBVElPTl9WQVJJQU5UUy5XQVJOSU5HLFxuICAgICAgICBOT1RJRklDQVRJT05fVkFSSUFOVFMuRVJST1IsXG4gICAgXSksXG4gICAgaW50ZXJhY3Rpb25UeXBlOiBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgICBOT1RJRklDQVRJT05fSU5URVJBQ1RJT04uTk9ORSxcbiAgICAgICAgTk9USUZJQ0FUSU9OX0lOVEVSQUNUSU9OLkNMT1NFLFxuICAgICAgICBOT1RJRklDQVRJT05fSU5URVJBQ1RJT04uQUNUSU9OX0RJU01JU1MsXG4gICAgXSksXG4gICAgYWN0aW9uVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkaXNtaXNzVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzaXplOiBQcm9wVHlwZXMub25lT2YoW05PVElGSUNBVElPTl9TSVpFUy5NRCwgTk9USUZJQ0FUSU9OX1NJWkVTLlNNXSksXG4gICAgbm9TaGFkb3c6IFByb3BUeXBlcy5ib29sLFxufTtcbmV4cG9ydCBkZWZhdWx0IE5vdGlmaWNhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzeC5tYXAiXX0= */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var Notification = function Notification(_a) {
  var _NOTIFICATION_SIZES$M2, _NOTIFICATION_SIZES$M3, _NOTIFICATION_SIZES$M4;

  var _a$variant = _a.variant,
    variant = _a$variant === void 0 ? NOTIFICATION_VARIANTS.INFO : _a$variant,
    _a$size = _a.size,
    size = _a$size === void 0 ? NOTIFICATION_SIZES.MD : _a$size,
    _a$interactionType = _a.interactionType,
    interactionType =
      _a$interactionType === void 0 ? getDefaultInteractionType(variant) : _a$interactionType,
    title = _a.title,
    content = _a.content,
    _a$actionText = _a.actionText,
    actionText = _a$actionText === void 0 ? 'VIEW' : _a$actionText,
    _a$dismissText = _a.dismissText,
    dismissText = _a$dismissText === void 0 ? 'DISMISS' : _a$dismissText,
    _a$icon = _a.icon,
    icon =
      _a$icon === void 0
        ? (0, _core.jsx)(DefaultIcon, {
            variant: variant,
            size: size,
          })
        : _a$icon,
    _a$onInteraction = _a.onInteraction,
    onInteraction =
      _a$onInteraction === void 0
        ? function (_ref5) {
            var type = _ref5.type,
              event = _ref5.event;
          }
        : _a$onInteraction,
    _a$noShadow = _a.noShadow,
    noShadow = _a$noShadow === void 0 ? false : _a$noShadow,
    _a$contentProps = _a.contentProps,
    contentProps = _a$contentProps === void 0 ? {} : _a$contentProps,
    otherProps = __rest(_a, [
      'variant',
      'size',
      'interactionType',
      'title',
      'content',
      'actionText',
      'dismissText',
      'icon',
      'onInteraction',
      'noShadow',
      'contentProps',
    ]);

  var theme = (0, _useTheme['default'])();

  var dispatchEvent = function dispatchEvent(eventType) {
    return function (e) {
      return onInteraction({
        type: eventType,
        event: e,
      });
    };
  };

  var titleTypographyVariant = ((_NOTIFICATION_SIZES$M2 = {}),
  (0, _defineProperty2['default'])(_NOTIFICATION_SIZES$M2, NOTIFICATION_SIZES.MD, 'subtitle2'),
  (0, _defineProperty2['default'])(_NOTIFICATION_SIZES$M2, NOTIFICATION_SIZES.SM, 'paragraph'),
  _NOTIFICATION_SIZES$M2)[size];
  var bodyTypographyVariant = ((_NOTIFICATION_SIZES$M3 = {}),
  (0, _defineProperty2['default'])(_NOTIFICATION_SIZES$M3, NOTIFICATION_SIZES.MD, 'paragraph'),
  (0, _defineProperty2['default'])(_NOTIFICATION_SIZES$M3, NOTIFICATION_SIZES.SM, 'data'),
  _NOTIFICATION_SIZES$M3)[size];
  var headerVerticalMargin = ((_NOTIFICATION_SIZES$M4 = {}),
  (0, _defineProperty2['default'])(_NOTIFICATION_SIZES$M4, NOTIFICATION_SIZES.MD, '4px'),
  (0, _defineProperty2['default'])(_NOTIFICATION_SIZES$M4, NOTIFICATION_SIZES.SM, '0px'),
  _NOTIFICATION_SIZES$M4)[size];
  return (0, _core.jsx)(
    _styledComponents.NotificationContainer,
    (0, _extends2['default'])(
      {
        variant: variant,
        noShadow: noShadow,
      },
      otherProps,
    ),
    icon && (0, _core.jsx)(_styledComponents.IconContainer, null, icon),
    (0, _core.jsx)(
      _styledComponents.NotificationBodyContainer,
      contentProps,
      title &&
        (0, _core.jsx)(
          _Typography['default'],
          {
            variant: titleTypographyVariant,
            bold: true,
            css: /*#__PURE__*/ (0, _core.css)(
              size === NOTIFICATION_SIZES.MD ? _ref : '',
              ' margin:0px;margin-top:',
              headerVerticalMargin,
              ';margin-bottom:',
              headerVerticalMargin,
              ';;label:Uikit-Notification;' +
                (process.env.NODE_ENV === 'production'
                  ? ''
                  : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
            ),
          },
          title,
        ),
      content &&
        (0, _core.jsx)(
          _Typography['default'],
          {
            variant: bodyTypographyVariant,
            css: _ref2,
          },
          content,
        ),
    ),
    interactionType === NOTIFICATION_INTERACTION.CLOSE &&
      (0, _core.jsx)(
        _FocusWrapper['default'],
        {
          css: _ref3,
          onClick: dispatchEvent(NOTIFICATION_INTERACTION_EVENTS.CLOSE),
        },
        (0, _core.jsx)(_Icon['default'], {
          name: 'times',
          width: '12px',
          height: '12px',
          fill: 'primary_1',
        }),
      ),
    interactionType === NOTIFICATION_INTERACTION.ACTION_DISMISS &&
      (0, _core.jsx)(
        _styledComponents.ActionButtonsContainer,
        {
          variant: variant,
        },
        (0, _core.jsx)(
          _styledComponents.ActionButton,
          {
            css: /*#__PURE__*/ (0, _core.css)(
              'border-bottom:solid 1px ',
              (0, _styledComponents.getBorderColor)({
                theme: theme,
                variant: variant,
              }),
              ';;label:Uikit-Notification;' +
                (process.env.NODE_ENV === 'production'
                  ? ''
                  : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
            ),
            onClick: dispatchEvent(NOTIFICATION_INTERACTION_EVENTS.ACTION),
          },
          (0, _core.jsx)(
            _Typography['default'],
            {
              variant: 'data',
              component: 'div',
              bold: true,
            },
            actionText,
          ),
        ),
        (0, _core.jsx)(
          _styledComponents.ActionButton,
          {
            variant: variant,
            onClick: dispatchEvent(NOTIFICATION_INTERACTION_EVENTS.DISMISS),
          },
          (0, _core.jsx)(
            _Typography['default'],
            {
              variant: 'data',
              component: 'div',
              bold: true,
            },
            dismissText,
          ),
        ),
      ),
  );
};

var NOTIFICATION_VARIANTS = Object.freeze({
  INFO: 'INFO',
  SUCCESS: 'SUCCESS',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
});
exports.NOTIFICATION_VARIANTS = NOTIFICATION_VARIANTS;
var NOTIFICATION_INTERACTION_EVENTS = Object.freeze({
  CLOSE: 'CLOSE',
  ACTION: 'ACTION',
  DISMISS: 'DISMISS',
});
exports.NOTIFICATION_INTERACTION_EVENTS = NOTIFICATION_INTERACTION_EVENTS;
var NOTIFICATION_INTERACTION = Object.freeze({
  CLOSE: 'CLOSE',
  ACTION_DISMISS: 'ACTION_DISMISS',
  NONE: 'NONE',
});
exports.NOTIFICATION_INTERACTION = NOTIFICATION_INTERACTION;
var NOTIFICATION_SIZES = Object.freeze({
  MD: 'MD',
  SM: 'SM',
});
exports.NOTIFICATION_SIZES = NOTIFICATION_SIZES;
Notification.propTypes = {
  title: _propTypes['default'].node,
  content: _propTypes['default'].node,
  icon: _propTypes['default'].node,
  onInteraction: _propTypes['default'].func,
  variant: _propTypes['default'].oneOf([
    NOTIFICATION_VARIANTS.INFO,
    NOTIFICATION_VARIANTS.SUCCESS,
    NOTIFICATION_VARIANTS.WARNING,
    NOTIFICATION_VARIANTS.ERROR,
  ]),
  interactionType: _propTypes['default'].oneOf([
    NOTIFICATION_INTERACTION.NONE,
    NOTIFICATION_INTERACTION.CLOSE,
    NOTIFICATION_INTERACTION.ACTION_DISMISS,
  ]),
  actionText: _propTypes['default'].string,
  dismissText: _propTypes['default'].string,
  size: _propTypes['default'].oneOf([NOTIFICATION_SIZES.MD, NOTIFICATION_SIZES.SM]),
  noShadow: _propTypes['default'].bool,
};
var _default = Notification;
exports['default'] = _default;
