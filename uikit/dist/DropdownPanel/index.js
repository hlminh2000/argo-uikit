'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports['default'] =
  exports.TextInputFilter =
  exports.ListFilter =
  exports.ForwardedDropdownWrapper =
  exports.ForwardedDropdownInput =
  exports.FilterWrapper =
  exports.FilterClearButton =
  exports.DropdownPanelWrapper =
  exports.DropdownPanelTextButton =
  exports.DropdownPanelListItemLabel =
  exports.DropdownPanelListInputSection =
  exports.DropdownPanelList =
  exports.DropdownPanelLegend =
  exports.DropdownPanelInputSection =
  exports.DropdownPanelInput =
  exports.DropdownPanelFieldset =
  exports.DropdownPanelButtonSection =
    void 0;

var _core = require('@emotion/core');

var _slicedToArray2 = _interopRequireDefault(require('@babel/runtime/helpers/slicedToArray'));

var _toConsumableArray2 = _interopRequireDefault(
  require('@babel/runtime/helpers/toConsumableArray'),
);

var _extends2 = _interopRequireDefault(require('@babel/runtime/helpers/extends'));

var _styledBase = _interopRequireDefault(require('@emotion/styled-base'));

var _react = _interopRequireWildcard(require('react'));

var _debounce = _interopRequireDefault(require('lodash/debounce'));

var _Button = _interopRequireDefault(require('../Button'));

var _Icon = _interopRequireDefault(require('../Icon'));

var _form = require('../form');

var _Tag = _interopRequireDefault(require('../Tag'));

var _Tooltip = _interopRequireDefault(require('../Tooltip'));

var _useTheme = _interopRequireDefault(require('../utils/useTheme'));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return { default: obj };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj['default'] = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}

var __jsx = _react['default'].createElement;

function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}

var FILL_COLOUR = '#0774D3';
var DropdownPanelWrapper = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'ereb5si0',
  label: 'Uikit-DropdownPanelWrapper',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: '1tohwzc',
        styles:
          'position:absolute;border-radius:8px;box-shadow:0 3px 8px 0 rgb(0 0 0 / 10%),0 3px 8px 0 rgb(0 0 0 / 10%);background:white;overflow:hidden;width:216px;z-index:100;top:30px;left:0;cursor:default;legend{cursor:text;}',
      }
    : {
        name: '1tohwzc',
        styles:
          'position:absolute;border-radius:8px;box-shadow:0 3px 8px 0 rgb(0 0 0 / 10%),0 3px 8px 0 rgb(0 0 0 / 10%);background:white;overflow:hidden;width:216px;z-index:100;top:30px;left:0;cursor:default;legend{cursor:text;}',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);
exports.DropdownPanelWrapper = DropdownPanelWrapper;

var ForwardedDropdownWrapper = /*#__PURE__*/ _react['default'].forwardRef(function (props, ref) {
  return (0, _core.jsx)(
    DropdownPanelWrapper,
    (0, _extends2['default'])(
      {
        ref: ref,
      },
      props,
    ),
  );
});

exports.ForwardedDropdownWrapper = ForwardedDropdownWrapper;
var DropdownPanelFieldset = /*#__PURE__*/ (0, _styledBase['default'])('fieldset', {
  target: 'ereb5si1',
  label: 'Uikit-DropdownPanelFieldset',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: '1ydy6dc',
        styles: 'border:none;margin:0;padding:0;',
      }
    : {
        name: '1ydy6dc',
        styles: 'border:none;margin:0;padding:0;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);
exports.DropdownPanelFieldset = DropdownPanelFieldset;
var DropdownPanelLegend = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'ereb5si2',
  label: 'Uikit-DropdownPanelLegend',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: '16geqbp',
        styles:
          "font-family:'Work Sans',sans-serif;font-size:14px;font-weight:normal;font-stretch:normal;font-style:normal;line-height:1.71;padding:2px 8px;",
      }
    : {
        name: '16geqbp',
        styles:
          "font-family:'Work Sans',sans-serif;font-size:14px;font-weight:normal;font-stretch:normal;font-style:normal;line-height:1.71;padding:2px 8px;",
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);
exports.DropdownPanelLegend = DropdownPanelLegend;
var DropdownPanelInputSection = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'ereb5si3',
  label: 'Uikit-DropdownPanelInputSection',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: '1dqnnyz',
        styles: 'padding:16px 6px;border-top:1px solid #dcdde1;border-bottom:1px solid #dcdde1;',
      }
    : {
        name: '1dqnnyz',
        styles: 'padding:16px 6px;border-top:1px solid #dcdde1;border-bottom:1px solid #dcdde1;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);
exports.DropdownPanelInputSection = DropdownPanelInputSection;
var DropdownPanelListInputSection = /*#__PURE__*/ (0, _styledBase['default'])(
  DropdownPanelInputSection,
  {
    target: 'ereb5si4',
    label: 'Uikit-DropdownPanelListInputSection',
  },
)(
  process.env.NODE_ENV === 'production'
    ? {
        name: '7tr83q',
        styles: 'padding:4px 8px;',
      }
    : {
        name: '7tr83q',
        styles: 'padding:4px 8px;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);
exports.DropdownPanelListInputSection = DropdownPanelListInputSection;
var DropdownPanelInput = /*#__PURE__*/ (0, _styledBase['default'])(_form.Input, {
  target: 'ereb5si5',
  label: 'Uikit-DropdownPanelInput',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: 'qqv389',
        styles: 'border-radius:10px;',
      }
    : {
        name: 'qqv389',
        styles: 'border-radius:10px;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvRWdEIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjEgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICdsb2Rhc2gvZGVib3VuY2UnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICd1aWtpdC9CdXR0b24nO1xuaW1wb3J0IEljb24gZnJvbSAndWlraXQvSWNvbic7XG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJ3Vpa2l0L2Zvcm0nO1xuaW1wb3J0IFRhZyBmcm9tICd1aWtpdC9UYWcnO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAndWlraXQvVG9vbHRpcCc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAndWlraXQvdXRpbHMvdXNlVGhlbWUnO1xuY29uc3QgRklMTF9DT0xPVVIgPSAnIzA3NzREMyc7XG5leHBvcnQgY29uc3QgRHJvcGRvd25QYW5lbFdyYXBwZXIgPSBzdHlsZWQoJ2RpdicpIGBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gIGJveC1zaGFkb3c6IDAgM3B4IDhweCAwIHJnYigwIDAgMCAvIDEwJSksIDAgM3B4IDhweCAwIHJnYigwIDAgMCAvIDEwJSk7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB3aWR0aDogMjE2cHg7XG4gIHotaW5kZXg6IDEwMDtcbiAgdG9wOiAzMHB4O1xuICBsZWZ0OiAwO1xuICBjdXJzb3I6IGRlZmF1bHQ7XG5cbiAgbGVnZW5kIHtcbiAgICBjdXJzb3I6IHRleHQ7XG4gIH1cbmA7XG5leHBvcnQgY29uc3QgRm9yd2FyZGVkRHJvcGRvd25XcmFwcGVyID0gUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4gKDxEcm9wZG93blBhbmVsV3JhcHBlciByZWY9e3JlZn0gey4uLnByb3BzfS8+KSk7XG5leHBvcnQgY29uc3QgRHJvcGRvd25QYW5lbEZpZWxkc2V0ID0gc3R5bGVkKCdmaWVsZHNldCcpIGBcbiAgYm9yZGVyOiBub25lO1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG5gO1xuZXhwb3J0IGNvbnN0IERyb3Bkb3duUGFuZWxMZWdlbmQgPSBzdHlsZWQoJ2RpdicpIGBcbiAgZm9udC1mYW1pbHk6ICdXb3JrIFNhbnMnLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3RyZXRjaDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGxpbmUtaGVpZ2h0OiAxLjcxO1xuICBwYWRkaW5nOiAycHggOHB4O1xuYDtcbmV4cG9ydCBjb25zdCBEcm9wZG93blBhbmVsSW5wdXRTZWN0aW9uID0gc3R5bGVkKCdkaXYnKSBgXG4gIHBhZGRpbmc6IDE2cHggNnB4O1xuICBib3JkZXItdG9wOiAxcHggc29saWQgI2RjZGRlMTtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkY2RkZTE7XG5gO1xuZXhwb3J0IGNvbnN0IERyb3Bkb3duUGFuZWxMaXN0SW5wdXRTZWN0aW9uID0gc3R5bGVkKERyb3Bkb3duUGFuZWxJbnB1dFNlY3Rpb24pIGBcbiAgcGFkZGluZzogNHB4IDhweDtcbmA7XG5leHBvcnQgY29uc3QgRHJvcGRvd25QYW5lbElucHV0ID0gc3R5bGVkKElucHV0KSBgXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG5gO1xuZXhwb3J0IGNvbnN0IERyb3Bkb3duUGFuZWxUZXh0QnV0dG9uID0gc3R5bGVkKEJ1dHRvbikgYFxuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDA7XG4gIGZvbnQtc2l6ZTogMTBweDtcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICBsaW5lLWhlaWdodDogMS42O1xuICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4gIGJvcmRlci1yYWRpdXM6IHVuc2V0O1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICB9XG5gO1xuZXhwb3J0IGNvbnN0IERyb3Bkb3duUGFuZWxMaXN0ID0gc3R5bGVkKCd1bCcpIGBcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBtYXgtaGVpZ2h0OiAxMDBweDtcbiAgb3ZlcmZsb3c6IGF1dG87XG5gO1xuZXhwb3J0IGNvbnN0IERyb3Bkb3duUGFuZWxMaXN0SXRlbUxhYmVsID0gc3R5bGVkKCdsYWJlbCcpIGBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogMnB4IDA7XG5gO1xuZXhwb3J0IGNvbnN0IEZvcndhcmRlZERyb3Bkb3duSW5wdXQgPSBSZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiAoPERyb3Bkb3duUGFuZWxJbnB1dCByZWY9e3JlZn0gey4uLnByb3BzfS8+KSk7XG5leHBvcnQgY29uc3QgRHJvcGRvd25QYW5lbEJ1dHRvblNlY3Rpb24gPSBzdHlsZWQoJ2RpdicpIGBcbiAgZGlzcGxheTogZmxleDtcbiAgcGFkZGluZzogNHB4IDhweDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuYDtcbmV4cG9ydCBjb25zdCBGaWx0ZXJDbGVhckJ1dHRvbiA9IHN0eWxlZChEcm9wZG93blBhbmVsVGV4dEJ1dHRvbikgYFxuICBmb250LXNpemU6IDExcHg7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBsaW5lLWhlaWdodDogMS40NTtcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG5gO1xuZXhwb3J0IGNvbnN0IEZpbHRlcldyYXBwZXIgPSAoeyBwYW5lbExlZ2VuZCA9ICdGaWx0ZXInLCBjYW5jZWxMYWJlbCA9ICdDYW5jZWwnLCBjb25maXJtTGFiZWwgPSAnQXBwbHknLCBvbkNhbmNlbENsaWNrID0gKCkgPT4geyB9LCBvbkNvbmZpcm1DbGljayA9ICgpID0+IHsgfSwgY29uZmlybURpc2FibGVkID0gZmFsc2UsIGhhbmRsZUJsdXIsIGNoaWxkcmVuLCB9KSA9PiB7XG4gICAgcmV0dXJuICg8Zm9ybT5cbiAgICAgIDxEcm9wZG93blBhbmVsRmllbGRzZXQ+XG4gICAgICAgIDxEcm9wZG93blBhbmVsTGVnZW5kPlxuICAgICAgICAgIDxsZWdlbmQ+e3BhbmVsTGVnZW5kfTwvbGVnZW5kPlxuICAgICAgICA8L0Ryb3Bkb3duUGFuZWxMZWdlbmQ+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPERyb3Bkb3duUGFuZWxCdXR0b25TZWN0aW9uPlxuICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cInRleHRcIiBzaXplPVwic21cIiBvbkNsaWNrPXtvbkNhbmNlbENsaWNrfSBvbkJsdXI9e2hhbmRsZUJsdXJ9IHR5cGU9XCJidXR0b25cIj5cbiAgICAgICAgICAgIHtjYW5jZWxMYWJlbH1cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJwcmltYXJ5XCIgc2l6ZT1cInNtXCIgZGlzYWJsZWQ9e2NvbmZpcm1EaXNhYmxlZH0gb25DbGljaz17b25Db25maXJtQ2xpY2t9IG9uQmx1cj17aGFuZGxlQmx1cn0gdHlwZT1cInN1Ym1pdFwiPlxuICAgICAgICAgICAge2NvbmZpcm1MYWJlbH1cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9Ecm9wZG93blBhbmVsQnV0dG9uU2VjdGlvbj5cbiAgICAgIDwvRHJvcGRvd25QYW5lbEZpZWxkc2V0PlxuICAgIDwvZm9ybT4pO1xufTtcbmV4cG9ydCBjb25zdCBUZXh0SW5wdXRGaWx0ZXIgPSAoeyBjYW5jZWxMYWJlbCA9ICdDYW5jZWwnLCBjb25maXJtTGFiZWwgPSAnQXBwbHknLCBpbnB1dExhYmVsID0gJ0ZpbHRlcicsIGlucHV0UGxhY2Vob2xkZXIgPSAnRmlsdGVyLi4uJywgb25DYW5jZWxDbGljayA9ICgpID0+IHsgfSwgb25Db25maXJtQ2xpY2sgPSAoKSA9PiB7IH0sIG9uSW5wdXRDaGFuZ2UgPSAoKSA9PiB7IH0sIHBhbmVsTGVnZW5kID0gJ0ZpbHRlcicsIGlucHV0UmVmLCBzZXRPcGVuLCBoYW5kbGVCbHVyLCBpbml0aWFsVmFsdWUsIH0pID0+IHtcbiAgICBjb25zdCBbdGV4dCwgc2V0VGV4dF0gPSB1c2VTdGF0ZShpbml0aWFsVmFsdWUpO1xuICAgIGNvbnN0IF9pbnB1dFJlZiA9IGlucHV0UmVmIHx8IHVzZVJlZihudWxsKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICB0ZXh0ID09PSBpbml0aWFsVmFsdWUgfHwgc2V0VGV4dChpbml0aWFsVmFsdWUpO1xuICAgIH0sIFtpbml0aWFsVmFsdWVdKTtcbiAgICByZXR1cm4gKDxGaWx0ZXJXcmFwcGVyIHBhbmVsTGVnZW5kPXtwYW5lbExlZ2VuZH0gY2FuY2VsTGFiZWw9e2NhbmNlbExhYmVsfSBjb25maXJtTGFiZWw9e2NvbmZpcm1MYWJlbH0gb25DYW5jZWxDbGljaz17KGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzZXRPcGVuKGZhbHNlKTtcbiAgICAgICAgb25DYW5jZWxDbGljaygpO1xuICAgIH19IG9uQ29uZmlybUNsaWNrPXsoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG9uQ29uZmlybUNsaWNrKHRleHQgPT09IG51bGwgfHwgdGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGV4dC50cmltKCkpO1xuICAgIH19IGNvbmZpcm1EaXNhYmxlZD17IXRleHQubGVuZ3RoICYmICEoaW5pdGlhbFZhbHVlID09PSBudWxsIHx8IGluaXRpYWxWYWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdGlhbFZhbHVlLmxlbmd0aCl9IGhhbmRsZUJsdXI9e2hhbmRsZUJsdXJ9PlxuICAgICAgPERyb3Bkb3duUGFuZWxJbnB1dFNlY3Rpb24+XG4gICAgICAgIDxGb3J3YXJkZWREcm9wZG93bklucHV0IGFyaWEtbGFiZWw9e2lucHV0TGFiZWx9IGljb249ezxJY29uIG5hbWU9XCJzZWFyY2hcIi8+fSBwbGFjZWhvbGRlcj17aW5wdXRQbGFjZWhvbGRlcn0gc2l6ZT1cInNtXCIgdmFsdWU9e3RleHR9IG9uQ2hhbmdlPXsoZSkgPT4ge1xuICAgICAgICBzZXRUZXh0KGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgb25JbnB1dENoYW5nZShlLnRhcmdldC52YWx1ZSk7XG4gICAgfX0gcmVmPXtfaW5wdXRSZWZ9IHNob3dDbGVhcj17dHJ1ZX0vPlxuICAgICAgPC9Ecm9wZG93blBhbmVsSW5wdXRTZWN0aW9uPlxuICAgIDwvRmlsdGVyV3JhcHBlcj4pO1xufTtcbmxldCBsaXN0RmlsdGVySW5zdGFuY2VzID0gMDtcbmV4cG9ydCBjb25zdCBMaXN0RmlsdGVyID0gKHsgY2FuY2VsTGFiZWwgPSAnQ2FuY2VsJywgY29uZmlybUxhYmVsID0gJ0FwcGx5Jywgb25DYW5jZWxDbGljayA9ICgpID0+IHsgfSwgb25Db25maXJtQ2xpY2sgPSAoKSA9PiB7IH0sIHBhbmVsTGVnZW5kID0gJ0ZpbHRlcicsIG9wZW4sIHNldE9wZW4sIGhhbmRsZUJsdXIsIGZpbHRlck9wdGlvbnMgPSBbXSwgb25PcHRpb25Ub2dnbGUgPSAoKSA9PiB7IH0sIG9uU2VsZWN0QWxsT3B0aW9ucyA9ICgpID0+IHsgfSwgb25DbGVhciA9ICgpID0+IHsgfSwgfSkgPT4ge1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgICBjb25zdCBbb3B0aW9ucywgc2V0T3B0aW9uc10gPSB1c2VTdGF0ZShmaWx0ZXJPcHRpb25zKTtcbiAgICBjb25zdCBbaW5zdGFuY2VOdW0sIHNldEluc3RhbmNlTnVtXSA9IHVzZVN0YXRlKDApO1xuICAgIGNvbnN0IHJlbmRlclJlZiA9IHVzZVJlZihudWxsKTtcbiAgICBjb25zdCByZWZzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxlbmd0aCB9KS5tYXAoKCkgPT4gdXNlUmVmKG51bGwpKTtcbiAgICBjb25zdCB0b2dnbGUgPSAoaW5kZXgpID0+IHtcbiAgICAgICAgc2V0T3B0aW9ucyhbXG4gICAgICAgICAgICAuLi5vcHRpb25zLnNsaWNlKDAsIGluZGV4KSxcbiAgICAgICAgICAgIC4uLltPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnNbaW5kZXhdKSwgeyBpc0NoZWNrZWQ6ICFvcHRpb25zW2luZGV4XS5pc0NoZWNrZWQgfSldLFxuICAgICAgICAgICAgLi4ub3B0aW9ucy5zbGljZShpbmRleCArIDEpLFxuICAgICAgICBdKTtcbiAgICAgICAgb25PcHRpb25Ub2dnbGUoaW5kZXgpO1xuICAgIH07XG4gICAgY29uc3Qgc2VsZWN0QWxsID0gKCkgPT4ge1xuICAgICAgICBzZXRPcHRpb25zKG9wdGlvbnMubWFwKChvcHRpb24pID0+IChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbiksIHsgaXNDaGVja2VkOiB0cnVlIH0pKSkpO1xuICAgICAgICBvblNlbGVjdEFsbE9wdGlvbnMoKTtcbiAgICB9O1xuICAgIGNvbnN0IGNsZWFyID0gKCkgPT4ge1xuICAgICAgICBzZXRPcHRpb25zKG9wdGlvbnMubWFwKChvcHRpb24pID0+IChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbiksIHsgaXNDaGVja2VkOiBmYWxzZSB9KSkpKTtcbiAgICAgICAgb25DbGVhcigpO1xuICAgIH07XG4gICAgY29uc3QgZm9jdXNOZXh0ID0gKGkpID0+IHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gcmVmc1soaSArIDEpICUgb3B0aW9ucy5sZW5ndGhdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY3VycmVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmZvY3VzKCk7XG4gICAgfTtcbiAgICBjb25zdCBmb2N1c1ByZXYgPSAoaSkgPT4ge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSByZWZzWyhpIC0gMSArIG9wdGlvbnMubGVuZ3RoKSAlIG9wdGlvbnMubGVuZ3RoXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmN1cnJlbnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5mb2N1cygpO1xuICAgIH07XG4gICAgY29uc3QgZm9jdXNGaXJzdCA9ICgpID0+IHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gcmVmc1swXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmN1cnJlbnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5mb2N1cygpO1xuICAgIH07XG4gICAgY29uc3QgZm9jdXNMYXN0ID0gKCkgPT4ge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSByZWZzW29wdGlvbnMubGVuZ3RoIC0gMV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZm9jdXMoKTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZUtleVByZXNzID0gKGUsIGkpID0+IHtcbiAgICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZm9jdXNOZXh0KGkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGZvY3VzUHJldihpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0hvbWUnOlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBmb2N1c0ZpcnN0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdFbmQnOlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBmb2N1c0xhc3QoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFVzZSBpbnN0YW5jZSBudW1iZXIgdG8gZW5zdXJlIElEcyBzdGF5IHVuaXF1ZSBmb3IgbXVsdGlwbGUgZHJvcGRvd25zIG9uIGEgcGFnZVxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGxpc3RGaWx0ZXJJbnN0YW5jZXMgKz0gMTtcbiAgICAgICAgc2V0SW5zdGFuY2VOdW0obGlzdEZpbHRlckluc3RhbmNlcyk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBsaXN0RmlsdGVySW5zdGFuY2VzIC09IDE7XG4gICAgICAgIH07XG4gICAgfSwgW10pO1xuICAgIC8vIEZvY3VzIG9uIHRoZSBmaXJzdCBjaGVja2JveCB3aGVuIG9wZW5pbmcgdGhlIHBhbmVsXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAocmVuZGVyUmVmICYmICFyZW5kZXJSZWYuY3VycmVudCAmJiBvcGVuICYmICgoX2EgPSByZWZzWzBdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY3VycmVudCkpIHtcbiAgICAgICAgICAgIGZvY3VzRmlyc3QoKTtcbiAgICAgICAgICAgIHJlbmRlclJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0sIFtyZW5kZXJSZWYsIG9wZW4sIHJlZnNdKTtcbiAgICByZXR1cm4gKDxGaWx0ZXJXcmFwcGVyIHBhbmVsTGVnZW5kPXtwYW5lbExlZ2VuZH0gY2FuY2VsTGFiZWw9e2NhbmNlbExhYmVsfSBjb25maXJtTGFiZWw9e2NvbmZpcm1MYWJlbH0gb25DYW5jZWxDbGljaz17KGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzZXRPcGVuKGZhbHNlKTtcbiAgICAgICAgb25DYW5jZWxDbGljaygpO1xuICAgIH19IG9uQ29uZmlybUNsaWNrPXsoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG9uQ29uZmlybUNsaWNrKG9wdGlvbnMuZmlsdGVyKChvcHRpb24pID0+IG9wdGlvbi5pc0NoZWNrZWQgPT09IHRydWUpKTtcbiAgICB9fSBoYW5kbGVCbHVyPXtoYW5kbGVCbHVyfT5cbiAgICAgIDxEcm9wZG93blBhbmVsTGlzdElucHV0U2VjdGlvbj5cbiAgICAgICAgPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGB9PlxuICAgICAgICAgIDxEcm9wZG93blBhbmVsVGV4dEJ1dHRvbiBzaXplPVwic21cIiB2YXJpYW50PVwidGV4dFwiIG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc2VsZWN0QWxsKCk7XG4gICAgfX0gdHlwZT1cImJ1dHRvblwiPlxuICAgICAgICAgICAgU2VsZWN0IEFsbFxuICAgICAgICAgIDwvRHJvcGRvd25QYW5lbFRleHRCdXR0b24+XG4gICAgICAgICAgPERyb3Bkb3duUGFuZWxUZXh0QnV0dG9uIHNpemU9XCJzbVwiIHZhcmlhbnQ9XCJ0ZXh0XCIgb25DbGljaz17KGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjbGVhcigpO1xuICAgIH19IHR5cGU9XCJidXR0b25cIj5cbiAgICAgICAgICAgIENsZWFyXG4gICAgICAgICAgPC9Ecm9wZG93blBhbmVsVGV4dEJ1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHtvcHRpb25zLmxlbmd0aCAmJiAoPERyb3Bkb3duUGFuZWxMaXN0PlxuICAgICAgICAgICAge29wdGlvbnMubWFwKChvcHRpb24sIGluZGV4KSA9PiAoPGxpIGtleT17YGZpbHRlci1kcm9wZG93bi0ke2luc3RhbmNlTnVtfS1vcHRpb24tJHtpbmRleH1gfT5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgPERyb3Bkb3duUGFuZWxMaXN0SXRlbUxhYmVsIGh0bWxGb3I9e2BmaWx0ZXItZHJvcGRvd24tJHtpbnN0YW5jZU51bX0tb3B0aW9uLSR7aW5kZXh9YH0gY3NzPXtjc3MgYFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7dGhlbWUuY29sb3JzLmdyZXlfM307XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBgfT5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHJlZj17cmVmc1tpbmRleF19IGNoZWNrZWQ9e29wdGlvbi5pc0NoZWNrZWR9IG9uQ2hhbmdlPXsoKSA9PiB0b2dnbGUoaW5kZXgpfSB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPXtgZmlsdGVyLWRyb3Bkb3duLSR7aW5zdGFuY2VOdW19LW9wdGlvbi0ke2luZGV4fWB9IGlkPXtgZmlsdGVyLWRyb3Bkb3duLSR7aW5zdGFuY2VOdW19LW9wdGlvbi0ke2luZGV4fWB9IG9uS2V5RG93bj17KGUpID0+IGhhbmRsZUtleVByZXNzKGUsIGluZGV4KX0gb25CbHVyPXtpbmRleCA9PT0gb3B0aW9ucy5sZW5ndGggLSAxID8gaGFuZGxlQmx1ciA6IHVuZGVmaW5lZH0gY3NzPXtjc3MgYFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgYH0vPlxuICAgICAgICAgICAgICAgICAgICB7b3B0aW9uLnZhbHVlfVxuICAgICAgICAgICAgICAgICAgICB7dHlwZW9mIChvcHRpb24gPT09IG51bGwgfHwgb3B0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb24uZG9jX2NvdW50KSA9PT0gJ251bWJlcicgJiYgKDxUYWcgdmFyaWFudD17b3B0aW9uLmlzQ2hlY2tlZCA/ICdISUdITElHSFQnIDogJ05FVVRSQUwnfSBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMThweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGB9PlxuICAgICAgICAgICAgICAgICAgICAgICAge29wdGlvbi5kb2NfY291bnR9XG4gICAgICAgICAgICAgICAgICAgICAgPC9UYWc+KX1cbiAgICAgICAgICAgICAgICAgIDwvRHJvcGRvd25QYW5lbExpc3RJdGVtTGFiZWw+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvbGk+KSl9XG4gICAgICAgICAgPC9Ecm9wZG93blBhbmVsTGlzdD4pfVxuICAgICAgPC9Ecm9wZG93blBhbmVsTGlzdElucHV0U2VjdGlvbj5cbiAgICA8L0ZpbHRlcldyYXBwZXI+KTtcbn07XG5jb25zdCBEcm9wZG93blBhbmVsID0gKHsgY3VzdG9tVHJpZ2dlciA9IHVuZGVmaW5lZCwgaW5wdXRMYWJlbCA9ICdGaWx0ZXInLCB0cmlnZ2VySWNvbiA9ICdmaWx0ZXInLCB0cmlnZ2VyVG9vbHRpcCA9ICdGaWx0ZXInLCBvcGVuLCBzZXRPcGVuLCBmb2N1c0ZpcnN0LCBidXR0b25SZWYsIHBhbmVsUmVmLCBoYW5kbGVFc2MsIGhhbmRsZUJsdXIsIGhhbmRsZUNsaWNrT3V0c2lkZSwgY2hpbGRyZW4sIGFjdGl2ZSwgfSkgPT4ge1xuICAgIGNvbnN0IFtfb3BlbiwgX3NldE9wZW5dID0gdHlwZW9mIG9wZW4gPT09ICdib29sZWFuJyAmJiBzZXRPcGVuID8gW29wZW4sIHNldE9wZW5dIDogdXNlU3RhdGUoZmFsc2UpO1xuICAgIC8vIERlYm91bmNpbmcgc2V0T3BlbiB0byBwcmV2ZW50IGRvdWJsZS10cmlnZ2VyaW5nIHdoZW4gY2xvc2luZyB0aGUgcGFuZWxcbiAgICBjb25zdCBkZWJvdW5jZWRTZXRPcGVuID0gZGVib3VuY2UoX3NldE9wZW4sIDEwMCk7XG4gICAgY29uc3QgW3RyaWdnZXJIb3ZlcmVkLCBzZXRUcmlnZ2VySG92ZXJlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgX2J1dHRvblJlZiA9IChidXR0b25SZWYgfHwgdXNlUmVmKG51bGwpKTtcbiAgICBjb25zdCBfcGFuZWxSZWYgPSAocGFuZWxSZWYgfHwgdXNlUmVmKG51bGwpKTtcbiAgICAvLyBDbG9zZSBkcm9wZG93biBwYW5lbCB3aGVuIHRoZSAnZXNjYXBlJyBrZXkgaXMgcHJlc3NlZFxuICAgIGNvbnN0IF9oYW5kbGVFc2MgPSBoYW5kbGVFc2MgfHxcbiAgICAgICAgKChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoX29wZW4gJiYgZS5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgICAgICAgZGVib3VuY2VkU2V0T3BlbihmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKF9idXR0b25SZWYgJiYgX2J1dHRvblJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIF9idXR0b25SZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgLy8gQ2xvc2UgZHJvcGRvd24gcGFuZWwgd2hlbiB0YWJiaW5nIG91dHNpZGUgb2YgaXRcbiAgICBjb25zdCBfaGFuZGxlQmx1ciA9IGhhbmRsZUJsdXIgfHxcbiAgICAgICAgKChlKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCBuZXh0VGFyZ2V0ID0gZS5yZWxhdGVkVGFyZ2V0O1xuICAgICAgICAgICAgaWYgKF9vcGVuICYmICEoKF9hID0gX3BhbmVsUmVmID09PSBudWxsIHx8IF9wYW5lbFJlZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3BhbmVsUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb250YWlucyhuZXh0VGFyZ2V0KSkpIHtcbiAgICAgICAgICAgICAgICBkZWJvdW5jZWRTZXRPcGVuKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgLy8gQ2xvc2UgZHJvcGRvd24gcGFuZWwgd2hlbiBjbGlja2luZyBvdXRzaWRlIG9mIGl0XG4gICAgLy8gKGRvbid0IGNsb3NlIGhlcmUgaWYgY2xpY2tpbmcgb24gdGhlIGJ1dHRvbiwgbGV0IHRoZSBidXR0b24ncyBvbkNsaWNrIGhhbmRsZSB0aGF0KVxuICAgIGNvbnN0IF9oYW5kbGVDbGlja091dHNpZGUgPSBoYW5kbGVDbGlja091dHNpZGUgfHxcbiAgICAgICAgKChlKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCBjbGlja1RhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgaWYgKF9vcGVuICYmXG4gICAgICAgICAgICAgICAgISgoX2EgPSBfcGFuZWxSZWYgPT09IG51bGwgfHwgX3BhbmVsUmVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcGFuZWxSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbnRhaW5zKGNsaWNrVGFyZ2V0KSkgJiZcbiAgICAgICAgICAgICAgICBjbGlja1RhcmdldCAhPT0gX2J1dHRvblJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBkZWJvdW5jZWRTZXRPcGVuKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKF9vcGVuKSB7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgX2hhbmRsZUNsaWNrT3V0c2lkZSk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIF9oYW5kbGVFc2MpO1xuICAgICAgICAgICAgaWYgKGZvY3VzRmlyc3QgJiYgdHlwZW9mIGZvY3VzRmlyc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBmb2N1c0ZpcnN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBfaGFuZGxlQ2xpY2tPdXRzaWRlKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgX2hhbmRsZUVzYyk7XG4gICAgICAgIH07XG4gICAgfSwgW19vcGVuXSk7XG4gICAgcmV0dXJuICg8PlxuICAgICAgPGJ1dHRvbiBjc3M9e2NzcyBgXG4gICAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICBwYWRkaW5nOiAycHg7XG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgIHotaW5kZXg6IDEwO1xuICAgICAgICBgfSBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGRlYm91bmNlZFNldE9wZW4oIV9vcGVuKTtcbiAgICB9fSByZWY9e19idXR0b25SZWZ9IG9uRm9jdXM9eygpID0+IHNldFRyaWdnZXJIb3ZlcmVkKHRydWUpfSBvbkJsdXI9eyhlKSA9PiB7XG4gICAgICAgIHNldFRyaWdnZXJIb3ZlcmVkKGZhbHNlKTtcbiAgICAgICAgX2hhbmRsZUJsdXIoZSk7XG4gICAgfX0gYXJpYS1sYWJlbD17X29wZW4gPyBgQ2xvc2UgJHtpbnB1dExhYmVsfSBwYW5lbGAgOiBgT3BlbiAke2lucHV0TGFiZWx9IHBhbmVsYH0gYXJpYS1oYXNwb3B1cD1cInRydWVcIiBhcmlhLWV4cGFuZGVkPXtfb3Blbn0gb25Nb3VzZU92ZXI9eygpID0+IHNldFRyaWdnZXJIb3ZlcmVkKHRydWUpfSBvbk1vdXNlT3V0PXsoKSA9PiBzZXRUcmlnZ2VySG92ZXJlZChmYWxzZSl9PlxuICAgICAgICB7IWN1c3RvbVRyaWdnZXIgPyAoPFRvb2x0aXAgb3Blbj17dHJpZ2dlckhvdmVyZWR9IGhpZGVPbkNsaWNrPXtmYWxzZX0gaHRtbD17PHNwYW4+e3RyaWdnZXJUb29sdGlwfTwvc3Bhbj59IGFycm93PXtmYWxzZX0+XG4gICAgICAgICAgICA8SWNvbiBuYW1lPXt0cmlnZ2VySWNvbn0gZmlsbD17X29wZW4gfHwgYWN0aXZlID8gRklMTF9DT0xPVVIgOiB0cmlnZ2VySG92ZXJlZCA/IEZJTExfQ09MT1VSIDogJ2dyZXlfMSd9Lz5cbiAgICAgICAgICA8L1Rvb2x0aXA+KSA6IChjdXN0b21UcmlnZ2VyKX1cbiAgICAgIDwvYnV0dG9uPlxuICAgICAge19vcGVuICYmICg8Rm9yd2FyZGVkRHJvcGRvd25XcmFwcGVyIG9uQ2xpY2s9eyhlKSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpfSByZWY9e19wYW5lbFJlZn0+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L0ZvcndhcmRlZERyb3Bkb3duV3JhcHBlcj4pfVxuICAgIDwvPik7XG59O1xuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd25QYW5lbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzeC5tYXAiXX0= */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);
exports.DropdownPanelInput = DropdownPanelInput;
var DropdownPanelTextButton = /*#__PURE__*/ (0, _styledBase['default'])(_Button['default'], {
  target: 'ereb5si6',
  label: 'Uikit-DropdownPanelTextButton',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: '18fk1dd',
        styles:
          'padding:0;margin:0;font-size:10px;text-transform:none;font-weight:normal;text-decoration:underline;line-height:1.6;margin-right:12px;border-radius:unset;&:hover{background:transparent;border:1px solid transparent;}',
      }
    : {
        name: '18fk1dd',
        styles:
          'padding:0;margin:0;font-size:10px;text-transform:none;font-weight:normal;text-decoration:underline;line-height:1.6;margin-right:12px;border-radius:unset;&:hover{background:transparent;border:1px solid transparent;}',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);
exports.DropdownPanelTextButton = DropdownPanelTextButton;
var DropdownPanelList = /*#__PURE__*/ (0, _styledBase['default'])('ul', {
  target: 'ereb5si7',
  label: 'Uikit-DropdownPanelList',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: '1hucbtv',
        styles:
          'list-style:none;margin:0;padding:0;font-weight:normal;max-height:100px;overflow:auto;',
      }
    : {
        name: '1hucbtv',
        styles:
          'list-style:none;margin:0;padding:0;font-weight:normal;max-height:100px;overflow:auto;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);
exports.DropdownPanelList = DropdownPanelList;
var DropdownPanelListItemLabel = /*#__PURE__*/ (0, _styledBase['default'])('label', {
  target: 'ereb5si8',
  label: 'Uikit-DropdownPanelListItemLabel',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: 'o2pwtl',
        styles: 'display:flex;align-items:center;padding:2px 0;',
      }
    : {
        name: 'o2pwtl',
        styles: 'display:flex;align-items:center;padding:2px 0;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);
exports.DropdownPanelListItemLabel = DropdownPanelListItemLabel;

var ForwardedDropdownInput = /*#__PURE__*/ _react['default'].forwardRef(function (props, ref) {
  return (0, _core.jsx)(
    DropdownPanelInput,
    (0, _extends2['default'])(
      {
        ref: ref,
      },
      props,
    ),
  );
});

exports.ForwardedDropdownInput = ForwardedDropdownInput;
var DropdownPanelButtonSection = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'ereb5si9',
  label: 'Uikit-DropdownPanelButtonSection',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: '4xp664',
        styles: 'display:flex;padding:4px 8px;justify-content:space-between;',
      }
    : {
        name: '4xp664',
        styles: 'display:flex;padding:4px 8px;justify-content:space-between;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);
exports.DropdownPanelButtonSection = DropdownPanelButtonSection;
var FilterClearButton = /*#__PURE__*/ (0, _styledBase['default'])(DropdownPanelTextButton, {
  target: 'ereb5si10',
  label: 'Uikit-FilterClearButton',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: '27a16a',
        styles: 'font-size:11px;font-weight:bold;line-height:1.45;margin-left:auto;',
      }
    : {
        name: '27a16a',
        styles: 'font-size:11px;font-weight:bold;line-height:1.45;margin-left:auto;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);
exports.FilterClearButton = FilterClearButton;

var FilterWrapper = function FilterWrapper(_ref5) {
  var _ref5$panelLegend = _ref5.panelLegend,
    panelLegend = _ref5$panelLegend === void 0 ? 'Filter' : _ref5$panelLegend,
    _ref5$cancelLabel = _ref5.cancelLabel,
    cancelLabel = _ref5$cancelLabel === void 0 ? 'Cancel' : _ref5$cancelLabel,
    _ref5$confirmLabel = _ref5.confirmLabel,
    confirmLabel = _ref5$confirmLabel === void 0 ? 'Apply' : _ref5$confirmLabel,
    _ref5$onCancelClick = _ref5.onCancelClick,
    onCancelClick = _ref5$onCancelClick === void 0 ? function () {} : _ref5$onCancelClick,
    _ref5$onConfirmClick = _ref5.onConfirmClick,
    onConfirmClick = _ref5$onConfirmClick === void 0 ? function () {} : _ref5$onConfirmClick,
    _ref5$confirmDisabled = _ref5.confirmDisabled,
    confirmDisabled = _ref5$confirmDisabled === void 0 ? false : _ref5$confirmDisabled,
    handleBlur = _ref5.handleBlur,
    children = _ref5.children;
  return (0, _core.jsx)(
    'form',
    null,
    (0, _core.jsx)(
      DropdownPanelFieldset,
      null,
      (0, _core.jsx)(DropdownPanelLegend, null, (0, _core.jsx)('legend', null, panelLegend)),
      children,
      (0, _core.jsx)(
        DropdownPanelButtonSection,
        null,
        (0, _core.jsx)(
          _Button['default'],
          {
            variant: 'text',
            size: 'sm',
            onClick: onCancelClick,
            onBlur: handleBlur,
            type: 'button',
          },
          cancelLabel,
        ),
        (0, _core.jsx)(
          _Button['default'],
          {
            variant: 'primary',
            size: 'sm',
            disabled: confirmDisabled,
            onClick: onConfirmClick,
            onBlur: handleBlur,
            type: 'submit',
          },
          confirmLabel,
        ),
      ),
    ),
  );
};

exports.FilterWrapper = FilterWrapper;

var TextInputFilter = function TextInputFilter(_ref6) {
  var _ref6$cancelLabel = _ref6.cancelLabel,
    cancelLabel = _ref6$cancelLabel === void 0 ? 'Cancel' : _ref6$cancelLabel,
    _ref6$confirmLabel = _ref6.confirmLabel,
    confirmLabel = _ref6$confirmLabel === void 0 ? 'Apply' : _ref6$confirmLabel,
    _ref6$inputLabel = _ref6.inputLabel,
    inputLabel = _ref6$inputLabel === void 0 ? 'Filter' : _ref6$inputLabel,
    _ref6$inputPlaceholde = _ref6.inputPlaceholder,
    inputPlaceholder = _ref6$inputPlaceholde === void 0 ? 'Filter...' : _ref6$inputPlaceholde,
    _ref6$onCancelClick = _ref6.onCancelClick,
    _onCancelClick = _ref6$onCancelClick === void 0 ? function () {} : _ref6$onCancelClick,
    _ref6$onConfirmClick = _ref6.onConfirmClick,
    _onConfirmClick = _ref6$onConfirmClick === void 0 ? function () {} : _ref6$onConfirmClick,
    _ref6$onInputChange = _ref6.onInputChange,
    onInputChange = _ref6$onInputChange === void 0 ? function () {} : _ref6$onInputChange,
    _ref6$panelLegend = _ref6.panelLegend,
    panelLegend = _ref6$panelLegend === void 0 ? 'Filter' : _ref6$panelLegend,
    inputRef = _ref6.inputRef,
    setOpen = _ref6.setOpen,
    handleBlur = _ref6.handleBlur,
    initialValue = _ref6.initialValue;

  var _useState = (0, _react.useState)(initialValue),
    text = _useState[0],
    setText = _useState[1];

  var _inputRef = inputRef || (0, _react.useRef)(null);

  (0, _react.useEffect)(
    function () {
      text === initialValue || setText(initialValue);
    },
    [initialValue],
  );
  return (0, _core.jsx)(
    FilterWrapper,
    {
      panelLegend: panelLegend,
      cancelLabel: cancelLabel,
      confirmLabel: confirmLabel,
      onCancelClick: function onCancelClick(e) {
        e.preventDefault();
        setOpen(false);

        _onCancelClick();
      },
      onConfirmClick: function onConfirmClick(e) {
        e.preventDefault();

        _onConfirmClick(text === null || text === void 0 ? void 0 : text.trim());
      },
      confirmDisabled:
        !text.length &&
        !(initialValue === null || initialValue === void 0 ? void 0 : initialValue.length),
      handleBlur: handleBlur,
    },
    (0, _core.jsx)(
      DropdownPanelInputSection,
      null,
      (0, _core.jsx)(ForwardedDropdownInput, {
        'aria-label': inputLabel,
        icon: (0, _core.jsx)(_Icon['default'], {
          name: 'search',
        }),
        placeholder: inputPlaceholder,
        size: 'sm',
        value: text,
        onChange: function onChange(e) {
          setText(e.target.value);
          onInputChange(e.target.value);
        },
        ref: _inputRef,
        showClear: true,
      }),
    ),
  );
};

exports.TextInputFilter = TextInputFilter;
var listFilterInstances = 0;

var _ref =
  process.env.NODE_ENV === 'production'
    ? {
        name: '13p7y6r-Uikit-ListFilter',
        styles: 'display:flex;;label:Uikit-ListFilter;',
      }
    : {
        name: '13p7y6r-Uikit-ListFilter',
        styles: 'display:flex;;label:Uikit-ListFilter;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref2 =
  process.env.NODE_ENV === 'production'
    ? {
        name: 'lc383s-Uikit-ListFilter',
        styles: 'margin-right:5px;cursor:pointer;;label:Uikit-ListFilter;',
      }
    : {
        name: 'lc383s-Uikit-ListFilter',
        styles: 'margin-right:5px;cursor:pointer;;label:Uikit-ListFilter;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref3 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '1d6hgzb-Uikit-ListFilter',
        styles:
          'height:18px;font-size:10px;align-self:center;white-space:nowrap;margin-left:auto;margin-right:4px;;label:Uikit-ListFilter;',
      }
    : {
        name: '1d6hgzb-Uikit-ListFilter',
        styles:
          'height:18px;font-size:10px;align-self:center;white-space:nowrap;margin-left:auto;margin-right:4px;;label:Uikit-ListFilter;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var ListFilter = function ListFilter(_ref7) {
  var _ref7$cancelLabel = _ref7.cancelLabel,
    cancelLabel = _ref7$cancelLabel === void 0 ? 'Cancel' : _ref7$cancelLabel,
    _ref7$confirmLabel = _ref7.confirmLabel,
    confirmLabel = _ref7$confirmLabel === void 0 ? 'Apply' : _ref7$confirmLabel,
    _ref7$onCancelClick = _ref7.onCancelClick,
    _onCancelClick2 = _ref7$onCancelClick === void 0 ? function () {} : _ref7$onCancelClick,
    _ref7$onConfirmClick = _ref7.onConfirmClick,
    _onConfirmClick2 = _ref7$onConfirmClick === void 0 ? function () {} : _ref7$onConfirmClick,
    _ref7$panelLegend = _ref7.panelLegend,
    panelLegend = _ref7$panelLegend === void 0 ? 'Filter' : _ref7$panelLegend,
    open = _ref7.open,
    setOpen = _ref7.setOpen,
    handleBlur = _ref7.handleBlur,
    _ref7$filterOptions = _ref7.filterOptions,
    filterOptions = _ref7$filterOptions === void 0 ? [] : _ref7$filterOptions,
    _ref7$onOptionToggle = _ref7.onOptionToggle,
    onOptionToggle = _ref7$onOptionToggle === void 0 ? function () {} : _ref7$onOptionToggle,
    _ref7$onSelectAllOpti = _ref7.onSelectAllOptions,
    onSelectAllOptions = _ref7$onSelectAllOpti === void 0 ? function () {} : _ref7$onSelectAllOpti,
    _ref7$onClear = _ref7.onClear,
    onClear = _ref7$onClear === void 0 ? function () {} : _ref7$onClear;

  var theme = (0, _useTheme['default'])();

  var _useState2 = (0, _react.useState)(filterOptions),
    options = _useState2[0],
    setOptions = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
    instanceNum = _useState3[0],
    setInstanceNum = _useState3[1];

  var renderRef = (0, _react.useRef)(null);
  var refs = Array.from({
    length: options === null || options === void 0 ? void 0 : options.length,
  }).map(function () {
    return (0, _react.useRef)(null);
  });

  var toggle = function toggle(index) {
    setOptions(
      [].concat(
        (0, _toConsumableArray2['default'])(options.slice(0, index)),
        [
          Object.assign(Object.assign({}, options[index]), {
            isChecked: !options[index].isChecked,
          }),
        ],
        (0, _toConsumableArray2['default'])(options.slice(index + 1)),
      ),
    );
    onOptionToggle(index);
  };

  var selectAll = function selectAll() {
    setOptions(
      options.map(function (option) {
        return Object.assign(Object.assign({}, option), {
          isChecked: true,
        });
      }),
    );
    onSelectAllOptions();
  };

  var clear = function clear() {
    setOptions(
      options.map(function (option) {
        return Object.assign(Object.assign({}, option), {
          isChecked: false,
        });
      }),
    );
    onClear();
  };

  var focusNext = function focusNext(i) {
    var _a, _b;

    (_b = (_a = refs[(i + 1) % options.length]) === null || _a === void 0 ? void 0 : _a.current) ===
      null || _b === void 0
      ? void 0
      : _b.focus();
  };

  var focusPrev = function focusPrev(i) {
    var _a, _b;

    (_b =
      (_a = refs[(i - 1 + options.length) % options.length]) === null || _a === void 0
        ? void 0
        : _a.current) === null || _b === void 0
      ? void 0
      : _b.focus();
  };

  var focusFirst = function focusFirst() {
    var _a, _b;

    (_b = (_a = refs[0]) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0
      ? void 0
      : _b.focus();
  };

  var focusLast = function focusLast() {
    var _a, _b;

    (_b = (_a = refs[options.length - 1]) === null || _a === void 0 ? void 0 : _a.current) ===
      null || _b === void 0
      ? void 0
      : _b.focus();
  };

  var handleKeyPress = function handleKeyPress(e, i) {
    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        focusNext(i);
        break;

      case 'ArrowUp':
        e.preventDefault();
        focusPrev(i);
        break;

      case 'Home':
        e.preventDefault();
        focusFirst();
        break;

      case 'End':
        e.preventDefault();
        focusLast();
        break;

      default:
        break;
    }
  }; // Use instance number to ensure IDs stay unique for multiple dropdowns on a page

  (0, _react.useEffect)(function () {
    listFilterInstances += 1;
    setInstanceNum(listFilterInstances);
    return function () {
      listFilterInstances -= 1;
    };
  }, []); // Focus on the first checkbox when opening the panel

  (0, _react.useEffect)(
    function () {
      var _a;

      if (
        renderRef &&
        !renderRef.current &&
        open &&
        ((_a = refs[0]) === null || _a === void 0 ? void 0 : _a.current)
      ) {
        focusFirst();
        renderRef.current = true;
      }
    },
    [renderRef, open, refs],
  );
  return (0, _core.jsx)(
    FilterWrapper,
    {
      panelLegend: panelLegend,
      cancelLabel: cancelLabel,
      confirmLabel: confirmLabel,
      onCancelClick: function onCancelClick(e) {
        e.preventDefault();
        setOpen(false);

        _onCancelClick2();
      },
      onConfirmClick: function onConfirmClick(e) {
        e.preventDefault();

        _onConfirmClick2(
          options.filter(function (option) {
            return option.isChecked === true;
          }),
        );
      },
      handleBlur: handleBlur,
    },
    (0, _core.jsx)(
      DropdownPanelListInputSection,
      null,
      (0, _core.jsx)(
        'div',
        {
          css: _ref,
        },
        (0, _core.jsx)(
          DropdownPanelTextButton,
          {
            size: 'sm',
            variant: 'text',
            onClick: function onClick(e) {
              e.preventDefault();
              selectAll();
            },
            type: 'button',
          },
          'Select All',
        ),
        (0, _core.jsx)(
          DropdownPanelTextButton,
          {
            size: 'sm',
            variant: 'text',
            onClick: function onClick(e) {
              e.preventDefault();
              clear();
            },
            type: 'button',
          },
          'Clear',
        ),
      ),
      options.length &&
        (0, _core.jsx)(
          DropdownPanelList,
          null,
          options.map(function (option, index) {
            return (0, _core.jsx)(
              'li',
              {
                key: 'filter-dropdown-'.concat(instanceNum, '-option-').concat(index),
              },
              (0, _core.jsx)(
                'div',
                null,
                (0, _core.jsx)(
                  DropdownPanelListItemLabel,
                  {
                    htmlFor: 'filter-dropdown-'.concat(instanceNum, '-option-').concat(index),
                    css: /*#__PURE__*/ (0, _core.css)(
                      'cursor:pointer;&:hover{background:',
                      theme.colors.grey_3,
                      ';};label:Uikit-ListFilter;' +
                        (process.env.NODE_ENV === 'production'
                          ? ''
                          : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
                    ),
                  },
                  (0, _core.jsx)('input', {
                    ref: refs[index],
                    checked: option.isChecked,
                    onChange: function onChange() {
                      return toggle(index);
                    },
                    type: 'checkbox',
                    name: 'filter-dropdown-'.concat(instanceNum, '-option-').concat(index),
                    id: 'filter-dropdown-'.concat(instanceNum, '-option-').concat(index),
                    onKeyDown: function onKeyDown(e) {
                      return handleKeyPress(e, index);
                    },
                    onBlur: index === options.length - 1 ? handleBlur : undefined,
                    css: _ref2,
                  }),
                  option.value,
                  typeof (option === null || option === void 0 ? void 0 : option.doc_count) ===
                    'number' &&
                    (0, _core.jsx)(
                      _Tag['default'],
                      {
                        variant: option.isChecked ? 'HIGHLIGHT' : 'NEUTRAL',
                        css: _ref3,
                      },
                      option.doc_count,
                    ),
                ),
              ),
            );
          }),
        ),
    ),
  );
};

exports.ListFilter = ListFilter;

var _ref4 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '11o2ufz-Uikit-DropdownPanel',
        styles:
          'border:none;background:transparent;margin:0;padding:2px;cursor:pointer;z-index:10;;label:Uikit-DropdownPanel;',
      }
    : {
        name: '11o2ufz-Uikit-DropdownPanel',
        styles:
          'border:none;background:transparent;margin:0;padding:2px;cursor:pointer;z-index:10;;label:Uikit-DropdownPanel;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var DropdownPanel = function DropdownPanel(_ref8) {
  var _ref8$customTrigger = _ref8.customTrigger,
    customTrigger = _ref8$customTrigger === void 0 ? undefined : _ref8$customTrigger,
    _ref8$inputLabel = _ref8.inputLabel,
    inputLabel = _ref8$inputLabel === void 0 ? 'Filter' : _ref8$inputLabel,
    _ref8$triggerIcon = _ref8.triggerIcon,
    triggerIcon = _ref8$triggerIcon === void 0 ? 'filter' : _ref8$triggerIcon,
    _ref8$triggerTooltip = _ref8.triggerTooltip,
    triggerTooltip = _ref8$triggerTooltip === void 0 ? 'Filter' : _ref8$triggerTooltip,
    open = _ref8.open,
    setOpen = _ref8.setOpen,
    focusFirst = _ref8.focusFirst,
    buttonRef = _ref8.buttonRef,
    panelRef = _ref8.panelRef,
    handleEsc = _ref8.handleEsc,
    handleBlur = _ref8.handleBlur,
    handleClickOutside = _ref8.handleClickOutside,
    children = _ref8.children,
    active = _ref8.active;

  var _ref9 = typeof open === 'boolean' && setOpen ? [open, setOpen] : (0, _react.useState)(false),
    _ref10 = (0, _slicedToArray2['default'])(_ref9, 2),
    _open = _ref10[0],
    _setOpen = _ref10[1]; // Debouncing setOpen to prevent double-triggering when closing the panel

  var debouncedSetOpen = (0, _debounce['default'])(_setOpen, 100);

  var _useState4 = (0, _react.useState)(false),
    triggerHovered = _useState4[0],
    setTriggerHovered = _useState4[1];

  var _buttonRef = buttonRef || (0, _react.useRef)(null);

  var _panelRef = panelRef || (0, _react.useRef)(null); // Close dropdown panel when the 'escape' key is pressed

  var _handleEsc =
    handleEsc ||
    function (e) {
      if (_open && e.key === 'Escape') {
        debouncedSetOpen(false);

        if (_buttonRef && _buttonRef.current) {
          _buttonRef.current.focus();
        }
      }
    }; // Close dropdown panel when tabbing outside of it

  var _handleBlur =
    handleBlur ||
    function (e) {
      var _a;

      var nextTarget = e.relatedTarget;

      if (
        _open &&
        !((_a = _panelRef === null || _panelRef === void 0 ? void 0 : _panelRef.current) === null ||
        _a === void 0
          ? void 0
          : _a.contains(nextTarget))
      ) {
        debouncedSetOpen(false);
      }
    }; // Close dropdown panel when clicking outside of it
  // (don't close here if clicking on the button, let the button's onClick handle that)

  var _handleClickOutside =
    handleClickOutside ||
    function (e) {
      var _a;

      var clickTarget = e.target;

      if (
        _open &&
        !((_a = _panelRef === null || _panelRef === void 0 ? void 0 : _panelRef.current) === null ||
        _a === void 0
          ? void 0
          : _a.contains(clickTarget)) &&
        clickTarget !== _buttonRef.current
      ) {
        e.stopPropagation();
        debouncedSetOpen(false);
      }
    };

  (0, _react.useEffect)(
    function () {
      if (_open) {
        window.addEventListener('mousedown', _handleClickOutside);
        window.addEventListener('keydown', _handleEsc);

        if (focusFirst && typeof focusFirst === 'function') {
          focusFirst();
        }
      }

      return function () {
        window.removeEventListener('mousedown', _handleClickOutside);
        window.removeEventListener('keydown', _handleEsc);
      };
    },
    [_open],
  );
  return (0, _core.jsx)(
    _react['default'].Fragment,
    null,
    (0, _core.jsx)(
      'button',
      {
        css: _ref4,
        onClick: function onClick(e) {
          e.preventDefault();
          e.stopPropagation();
          debouncedSetOpen(!_open);
        },
        ref: _buttonRef,
        onFocus: function onFocus() {
          return setTriggerHovered(true);
        },
        onBlur: function onBlur(e) {
          setTriggerHovered(false);

          _handleBlur(e);
        },
        'aria-label': _open
          ? 'Close '.concat(inputLabel, ' panel')
          : 'Open '.concat(inputLabel, ' panel'),
        'aria-haspopup': 'true',
        'aria-expanded': _open,
        onMouseOver: function onMouseOver() {
          return setTriggerHovered(true);
        },
        onMouseOut: function onMouseOut() {
          return setTriggerHovered(false);
        },
      },
      !customTrigger
        ? (0, _core.jsx)(
            _Tooltip['default'],
            {
              open: triggerHovered,
              hideOnClick: false,
              html: (0, _core.jsx)('span', null, triggerTooltip),
              arrow: false,
            },
            (0, _core.jsx)(_Icon['default'], {
              name: triggerIcon,
              fill: _open || active ? FILL_COLOUR : triggerHovered ? FILL_COLOUR : 'grey_1',
            }),
          )
        : customTrigger,
    ),
    _open &&
      (0, _core.jsx)(
        ForwardedDropdownWrapper,
        {
          onClick: function onClick(e) {
            return e.stopPropagation();
          },
          ref: _panelRef,
        },
        children,
      ),
  );
};

var _default = DropdownPanel;
exports['default'] = _default;
