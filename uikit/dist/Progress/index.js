'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports['default'] = exports.ProgressItem = exports.PROGRESS_STATUS = void 0;

var _core = require('@emotion/core');

var _extends2 = _interopRequireDefault(require('@babel/runtime/helpers/extends'));

var _defineProperty2 = _interopRequireDefault(require('@babel/runtime/helpers/defineProperty'));

var _styledBase = _interopRequireDefault(require('@emotion/styled-base'));

var _react = _interopRequireDefault(require('react'));

var _Icon = _interopRequireDefault(require('../Icon'));

var __jsx = _react['default'].createElement;

function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}

/*
 * Copyright (c) 2020 The Ontario Institute for Cancer Research. All rights reserved
 *
 * This program and the accompanying materials are made available under the terms of
 * the GNU Affero General Public License v3.0. You should have received a copy of the
 * GNU Affero General Public License along with this program.
 *  If not, see <http://www.gnu.org/licenses/>.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

var PROGRESS_STATUS = {
  SUCCESS: 'success',
  ERROR: 'error',
  PENDING: 'pending',
  DISABLED: 'disabled',
  LOCKED: 'locked',
  CLOSED: 'closed',
};
exports.PROGRESS_STATUS = PROGRESS_STATUS;

var _ref =
  process.env.NODE_ENV === 'production'
    ? {
        name: 'xnn08w-Uikit-Triangle',
        styles:
          "content:' ';display:block;position:relative;border-top:7px solid transparent;border-bottom:7px solid transparent;border-left-style:solid;border-left-width:7px;;label:Uikit-Triangle;",
      }
    : {
        name: 'xnn08w-Uikit-Triangle',
        styles:
          "content:' ';display:block;position:relative;border-top:7px solid transparent;border-bottom:7px solid transparent;border-left-style:solid;border-left-width:7px;;label:Uikit-Triangle;",
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5Q2dDIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24nO1xuZXhwb3J0IGNvbnN0IFBST0dSRVNTX1NUQVRVUyA9IHtcbiAgICBTVUNDRVNTOiAnc3VjY2VzcycsXG4gICAgRVJST1I6ICdlcnJvcicsXG4gICAgUEVORElORzogJ3BlbmRpbmcnLFxuICAgIERJU0FCTEVEOiAnZGlzYWJsZWQnLFxuICAgIExPQ0tFRDogJ2xvY2tlZCcsXG4gICAgQ0xPU0VEOiAnY2xvc2VkJyxcbn07XG5jb25zdCBUcmlhbmdsZSA9IChwcm9wcykgPT4gY3NzIGBcbiAgY29udGVudDogJyAnO1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3JkZXItdG9wOiA3cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1ib3R0b206IDdweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLWxlZnQtc3R5bGU6IHNvbGlkO1xuICBib3JkZXItbGVmdC13aWR0aDogN3B4O1xuYDtcbmNvbnN0IFByb2dyZXNzTWFya2VyID0gc3R5bGVkKCdkaXYnKSBgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDE0cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUsIHN0YXRlIH0pID0+IHRoZW1lLnByb2dyZXNzLmNvbG9yW3N0YXRlXX07XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgNTAwbXMgbGluZWFyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG5jb25zdCBQcm9ncmVzc1NlY3Rpb24gPSBzdHlsZWQoJ2RpdicpIGBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuXG4gIC8qIHRoaXMgZW5zdXJlcyBzdGFja2luZyBjb250ZXh0IGlzIGxvY2FsIGZvciB6LWluZGV4ICovXG4gIHRyYW5zZm9ybTogc2NhbGUoMSk7XG5cbiAgLyogZmlyc3QgYW5kIGxhc3Qgcm91bmRlZCBjb3JuZXJzICovXG4gID4gZGl2OmZpcnN0LW9mLXR5cGU6bm90KDpsYXN0LW9mLXR5cGUpIC5wcm9ncmVzcy1tYXJrZXIge1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHggMCAwIDEwcHg7XG4gIH1cbiAgPiBkaXY6bGFzdC1vZi10eXBlOm5vdCg6Zmlyc3Qtb2YtdHlwZSkgLnByb2dyZXNzLW1hcmtlciB7XG4gICAgYm9yZGVyLXJhZGl1czogMCAxMHB4IDEwcHggMDtcbiAgfVxuXG4gIC8qIFNlcGFyYXRvciBwb3NpdGlvbnMgKi9cbiAgZGl2Om5vdCg6bGFzdC1jaGlsZCkgLnJvdzo6YWZ0ZXIge1xuICAgICR7VHJpYW5nbGV9O1xuICAgIHotaW5kZXg6IDI7XG4gIH1cblxuICBkaXY6bm90KDpmaXJzdC1jaGlsZCkgLnJvdzo6YmVmb3JlIHtcbiAgICAke1RyaWFuZ2xlfTtcbiAgICB6LWluZGV4OiAxO1xuICB9XG5cbiAgLyogY2VudHJlIG9mZnNldCBkdWUgdG8gcHNldWRvIGVsZW1lbnRzICovXG4gICYgLnByb2dyZXNzLWl0ZW06Zmlyc3QtY2hpbGQgc3ZnIHtcbiAgICBtYXJnaW4tbGVmdDogN3B4O1xuICB9XG5cbiAgJiAucHJvZ3Jlc3MtaXRlbTpsYXN0LWNoaWxkIHN2ZyB7XG4gICAgbWFyZ2luLWxlZnQ6IC03cHg7XG4gIH1cbmA7XG4vKiBTZXBhcmF0b3IgY29sb3JzIC0gYmFzZWQgb24gc3RhdGUqL1xuY29uc3QgU2VwYXJhdG9yID0gc3R5bGVkKCdkaXYnKSBgXG4gICY6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lLCBzdGF0ZSB9KSA9PiB0aGVtZS5wcm9ncmVzcy5jb2xvcltzdGF0ZV19O1xuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjZmZmO1xuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgNTAwbXMgbGluZWFyO1xuICB9XG5cbiAgJjphZnRlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICR7KHsgdGhlbWUsIHN0YXRlIH0pID0+IHRoZW1lLnByb2dyZXNzLmNvbG9yW3N0YXRlXX07XG4gIH1cbmA7XG5jb25zdCBUZXh0ID0gc3R5bGVkKCdkaXYnKSBgXG4gICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9ufTtcbiAgZm9udC13ZWlnaHQ6ICR7KHsgY29tcGxldGVkIH0pID0+IChjb21wbGV0ZWQgPyA2MDAgOiAnbm9ybWFsJyl9O1xuICBjb2xvcjogJHsoeyB0aGVtZSwgc3RhdGUgfSkgPT4gKHN0YXRlID09PSAnbG9ja2VkJyA/IHRoZW1lLmNvbG9ycy5ncmV5IDogdGhlbWUuY29sb3JzLmJsYWNrKX07XG5gO1xuY29uc3QgZ2V0SWNvbiA9IChzdGF0ZSkgPT4gKHtcbiAgICBbUFJPR1JFU1NfU1RBVFVTLlNVQ0NFU1NdOiA8SWNvbiB3aWR0aD1cIjEwcHhcIiBoZWlnaHQ9XCIxMHB4XCIgZmlsbD1cIndoaXRlXCIgbmFtZT1cImNoZWNrbWFya1wiLz4sXG4gICAgW1BST0dSRVNTX1NUQVRVUy5FUlJPUl06IDxJY29uIHdpZHRoPVwiMTBweFwiIGhlaWdodD1cIjEwcHhcIiBmaWxsPVwid2hpdGVcIiBuYW1lPVwiZXhjbGFtYXRpb25cIi8+LFxuICAgIFtQUk9HUkVTU19TVEFUVVMuUEVORElOR106IDxJY29uIHdpZHRoPVwiMTRweFwiIGhlaWdodD1cIjE0cHhcIiBmaWxsPVwid2hpdGVcIiBuYW1lPVwiZWxsaXBzZXNcIi8+LFxuICAgIFtQUk9HUkVTU19TVEFUVVMuTE9DS0VEXTogPEljb24gd2lkdGg9XCIxMHB4XCIgaGVpZ2h0PVwiMTBweFwiIGZpbGw9XCJ3aGl0ZVwiIG5hbWU9XCJsb2NrXCIvPixcbiAgICBbUFJPR1JFU1NfU1RBVFVTLkRJU0FCTEVEXTogbnVsbCxcbiAgICBbUFJPR1JFU1NfU1RBVFVTLkNMT1NFRF06IDxJY29uIHdpZHRoPVwiOHB4XCIgaGVpZ2h0PVwiOHB4XCIgZmlsbD1cIndoaXRlXCIgbmFtZT1cInRpbWVzXCIvPixcbn1bc3RhdGVdKTtcbmV4cG9ydCBjb25zdCBQcm9ncmVzc0l0ZW0gPSAoX2EpID0+IHtcbiAgICB2YXIgeyBzdGF0ZSwgdGV4dCwgY29tcGxldGVkID0gc3RhdGUgPT09IFBST0dSRVNTX1NUQVRVUy5TVUNDRVNTLCBjbGFzc05hbWUgPSAnJyB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcInN0YXRlXCIsIFwidGV4dFwiLCBcImNvbXBsZXRlZFwiLCBcImNsYXNzTmFtZVwiXSk7XG4gICAgcmV0dXJuICg8ZGl2IGNsYXNzTmFtZT17YHByb2dyZXNzLWl0ZW0gJHtjbGFzc05hbWUgfHwgJyd9YH0gY3NzPXtjc3MgYFxuICAgICAgd2lkdGg6IDY0cHg7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW4tbGVmdDogLTRweDtcbiAgICBgfSB7Li4ucmVzdH0+XG4gICAgPFRleHQgc3RhdGU9e3N0YXRlfSBjb21wbGV0ZWQ9e2NvbXBsZXRlZH0+XG4gICAgICB7dGV4dH1cbiAgICA8L1RleHQ+XG4gICAgPFNlcGFyYXRvciBzdGF0ZT17c3RhdGV9IGNsYXNzTmFtZT1cInJvd1wiIGNzcz17Y3NzIGBcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGB9PlxuICAgICAgPFByb2dyZXNzTWFya2VyIGNsYXNzTmFtZT1cInByb2dyZXNzLW1hcmtlclwiIHN0YXRlPXtzdGF0ZX0+XG4gICAgICAgIHtnZXRJY29uKHN0YXRlKX1cbiAgICAgIDwvUHJvZ3Jlc3NNYXJrZXI+XG4gICAgPC9TZXBhcmF0b3I+XG4gIDwvZGl2Pik7XG59O1xuY29uc3QgUHJvZ3Jlc3MgPSAoeyBjaGlsZHJlbiB9KSA9PiAoPFByb2dyZXNzU2VjdGlvbj57Y2hpbGRyZW59PC9Qcm9ncmVzc1NlY3Rpb24+KTtcblByb2dyZXNzLkl0ZW0gPSBQcm9ncmVzc0l0ZW07XG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzeC5tYXAiXX0= */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var Triangle = function Triangle(props) {
  return _ref;
};

var ProgressMarker = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'ed44ndf0',
  label: 'Uikit-ProgressMarker',
})(
  'width:100%;height:14px;background-color:',
  function (_ref4) {
    var theme = _ref4.theme,
      state = _ref4.state;
    return theme.progress.color[state];
  },
  ';transition:background-color 500ms linear;display:flex;align-items:center;justify-content:center;' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrRHFDIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24nO1xuZXhwb3J0IGNvbnN0IFBST0dSRVNTX1NUQVRVUyA9IHtcbiAgICBTVUNDRVNTOiAnc3VjY2VzcycsXG4gICAgRVJST1I6ICdlcnJvcicsXG4gICAgUEVORElORzogJ3BlbmRpbmcnLFxuICAgIERJU0FCTEVEOiAnZGlzYWJsZWQnLFxuICAgIExPQ0tFRDogJ2xvY2tlZCcsXG4gICAgQ0xPU0VEOiAnY2xvc2VkJyxcbn07XG5jb25zdCBUcmlhbmdsZSA9IChwcm9wcykgPT4gY3NzIGBcbiAgY29udGVudDogJyAnO1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3JkZXItdG9wOiA3cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1ib3R0b206IDdweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLWxlZnQtc3R5bGU6IHNvbGlkO1xuICBib3JkZXItbGVmdC13aWR0aDogN3B4O1xuYDtcbmNvbnN0IFByb2dyZXNzTWFya2VyID0gc3R5bGVkKCdkaXYnKSBgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDE0cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUsIHN0YXRlIH0pID0+IHRoZW1lLnByb2dyZXNzLmNvbG9yW3N0YXRlXX07XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgNTAwbXMgbGluZWFyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG5jb25zdCBQcm9ncmVzc1NlY3Rpb24gPSBzdHlsZWQoJ2RpdicpIGBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuXG4gIC8qIHRoaXMgZW5zdXJlcyBzdGFja2luZyBjb250ZXh0IGlzIGxvY2FsIGZvciB6LWluZGV4ICovXG4gIHRyYW5zZm9ybTogc2NhbGUoMSk7XG5cbiAgLyogZmlyc3QgYW5kIGxhc3Qgcm91bmRlZCBjb3JuZXJzICovXG4gID4gZGl2OmZpcnN0LW9mLXR5cGU6bm90KDpsYXN0LW9mLXR5cGUpIC5wcm9ncmVzcy1tYXJrZXIge1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHggMCAwIDEwcHg7XG4gIH1cbiAgPiBkaXY6bGFzdC1vZi10eXBlOm5vdCg6Zmlyc3Qtb2YtdHlwZSkgLnByb2dyZXNzLW1hcmtlciB7XG4gICAgYm9yZGVyLXJhZGl1czogMCAxMHB4IDEwcHggMDtcbiAgfVxuXG4gIC8qIFNlcGFyYXRvciBwb3NpdGlvbnMgKi9cbiAgZGl2Om5vdCg6bGFzdC1jaGlsZCkgLnJvdzo6YWZ0ZXIge1xuICAgICR7VHJpYW5nbGV9O1xuICAgIHotaW5kZXg6IDI7XG4gIH1cblxuICBkaXY6bm90KDpmaXJzdC1jaGlsZCkgLnJvdzo6YmVmb3JlIHtcbiAgICAke1RyaWFuZ2xlfTtcbiAgICB6LWluZGV4OiAxO1xuICB9XG5cbiAgLyogY2VudHJlIG9mZnNldCBkdWUgdG8gcHNldWRvIGVsZW1lbnRzICovXG4gICYgLnByb2dyZXNzLWl0ZW06Zmlyc3QtY2hpbGQgc3ZnIHtcbiAgICBtYXJnaW4tbGVmdDogN3B4O1xuICB9XG5cbiAgJiAucHJvZ3Jlc3MtaXRlbTpsYXN0LWNoaWxkIHN2ZyB7XG4gICAgbWFyZ2luLWxlZnQ6IC03cHg7XG4gIH1cbmA7XG4vKiBTZXBhcmF0b3IgY29sb3JzIC0gYmFzZWQgb24gc3RhdGUqL1xuY29uc3QgU2VwYXJhdG9yID0gc3R5bGVkKCdkaXYnKSBgXG4gICY6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lLCBzdGF0ZSB9KSA9PiB0aGVtZS5wcm9ncmVzcy5jb2xvcltzdGF0ZV19O1xuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjZmZmO1xuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgNTAwbXMgbGluZWFyO1xuICB9XG5cbiAgJjphZnRlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICR7KHsgdGhlbWUsIHN0YXRlIH0pID0+IHRoZW1lLnByb2dyZXNzLmNvbG9yW3N0YXRlXX07XG4gIH1cbmA7XG5jb25zdCBUZXh0ID0gc3R5bGVkKCdkaXYnKSBgXG4gICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9ufTtcbiAgZm9udC13ZWlnaHQ6ICR7KHsgY29tcGxldGVkIH0pID0+IChjb21wbGV0ZWQgPyA2MDAgOiAnbm9ybWFsJyl9O1xuICBjb2xvcjogJHsoeyB0aGVtZSwgc3RhdGUgfSkgPT4gKHN0YXRlID09PSAnbG9ja2VkJyA/IHRoZW1lLmNvbG9ycy5ncmV5IDogdGhlbWUuY29sb3JzLmJsYWNrKX07XG5gO1xuY29uc3QgZ2V0SWNvbiA9IChzdGF0ZSkgPT4gKHtcbiAgICBbUFJPR1JFU1NfU1RBVFVTLlNVQ0NFU1NdOiA8SWNvbiB3aWR0aD1cIjEwcHhcIiBoZWlnaHQ9XCIxMHB4XCIgZmlsbD1cIndoaXRlXCIgbmFtZT1cImNoZWNrbWFya1wiLz4sXG4gICAgW1BST0dSRVNTX1NUQVRVUy5FUlJPUl06IDxJY29uIHdpZHRoPVwiMTBweFwiIGhlaWdodD1cIjEwcHhcIiBmaWxsPVwid2hpdGVcIiBuYW1lPVwiZXhjbGFtYXRpb25cIi8+LFxuICAgIFtQUk9HUkVTU19TVEFUVVMuUEVORElOR106IDxJY29uIHdpZHRoPVwiMTRweFwiIGhlaWdodD1cIjE0cHhcIiBmaWxsPVwid2hpdGVcIiBuYW1lPVwiZWxsaXBzZXNcIi8+LFxuICAgIFtQUk9HUkVTU19TVEFUVVMuTE9DS0VEXTogPEljb24gd2lkdGg9XCIxMHB4XCIgaGVpZ2h0PVwiMTBweFwiIGZpbGw9XCJ3aGl0ZVwiIG5hbWU9XCJsb2NrXCIvPixcbiAgICBbUFJPR1JFU1NfU1RBVFVTLkRJU0FCTEVEXTogbnVsbCxcbiAgICBbUFJPR1JFU1NfU1RBVFVTLkNMT1NFRF06IDxJY29uIHdpZHRoPVwiOHB4XCIgaGVpZ2h0PVwiOHB4XCIgZmlsbD1cIndoaXRlXCIgbmFtZT1cInRpbWVzXCIvPixcbn1bc3RhdGVdKTtcbmV4cG9ydCBjb25zdCBQcm9ncmVzc0l0ZW0gPSAoX2EpID0+IHtcbiAgICB2YXIgeyBzdGF0ZSwgdGV4dCwgY29tcGxldGVkID0gc3RhdGUgPT09IFBST0dSRVNTX1NUQVRVUy5TVUNDRVNTLCBjbGFzc05hbWUgPSAnJyB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcInN0YXRlXCIsIFwidGV4dFwiLCBcImNvbXBsZXRlZFwiLCBcImNsYXNzTmFtZVwiXSk7XG4gICAgcmV0dXJuICg8ZGl2IGNsYXNzTmFtZT17YHByb2dyZXNzLWl0ZW0gJHtjbGFzc05hbWUgfHwgJyd9YH0gY3NzPXtjc3MgYFxuICAgICAgd2lkdGg6IDY0cHg7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW4tbGVmdDogLTRweDtcbiAgICBgfSB7Li4ucmVzdH0+XG4gICAgPFRleHQgc3RhdGU9e3N0YXRlfSBjb21wbGV0ZWQ9e2NvbXBsZXRlZH0+XG4gICAgICB7dGV4dH1cbiAgICA8L1RleHQ+XG4gICAgPFNlcGFyYXRvciBzdGF0ZT17c3RhdGV9IGNsYXNzTmFtZT1cInJvd1wiIGNzcz17Y3NzIGBcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGB9PlxuICAgICAgPFByb2dyZXNzTWFya2VyIGNsYXNzTmFtZT1cInByb2dyZXNzLW1hcmtlclwiIHN0YXRlPXtzdGF0ZX0+XG4gICAgICAgIHtnZXRJY29uKHN0YXRlKX1cbiAgICAgIDwvUHJvZ3Jlc3NNYXJrZXI+XG4gICAgPC9TZXBhcmF0b3I+XG4gIDwvZGl2Pik7XG59O1xuY29uc3QgUHJvZ3Jlc3MgPSAoeyBjaGlsZHJlbiB9KSA9PiAoPFByb2dyZXNzU2VjdGlvbj57Y2hpbGRyZW59PC9Qcm9ncmVzc1NlY3Rpb24+KTtcblByb2dyZXNzLkl0ZW0gPSBQcm9ncmVzc0l0ZW07XG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzeC5tYXAiXX0= */'),
);
var ProgressSection = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'ed44ndf1',
  label: 'Uikit-ProgressSection',
})(
  'display:flex;align-items:flex-end;transform:scale(1);> div:first-of-type:not(:last-of-type) .progress-marker{border-radius:10px 0 0 10px;}> div:last-of-type:not(:first-of-type) .progress-marker{border-radius:0 10px 10px 0;}div:not(:last-child) .row::after{',
  Triangle,
  ';z-index:2;}div:not(:first-child) .row::before{',
  Triangle,
  ';z-index:1;}& .progress-item:first-child svg{margin-left:7px;}& .progress-item:last-child svg{margin-left:-7px;}' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyRHNDIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24nO1xuZXhwb3J0IGNvbnN0IFBST0dSRVNTX1NUQVRVUyA9IHtcbiAgICBTVUNDRVNTOiAnc3VjY2VzcycsXG4gICAgRVJST1I6ICdlcnJvcicsXG4gICAgUEVORElORzogJ3BlbmRpbmcnLFxuICAgIERJU0FCTEVEOiAnZGlzYWJsZWQnLFxuICAgIExPQ0tFRDogJ2xvY2tlZCcsXG4gICAgQ0xPU0VEOiAnY2xvc2VkJyxcbn07XG5jb25zdCBUcmlhbmdsZSA9IChwcm9wcykgPT4gY3NzIGBcbiAgY29udGVudDogJyAnO1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3JkZXItdG9wOiA3cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1ib3R0b206IDdweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLWxlZnQtc3R5bGU6IHNvbGlkO1xuICBib3JkZXItbGVmdC13aWR0aDogN3B4O1xuYDtcbmNvbnN0IFByb2dyZXNzTWFya2VyID0gc3R5bGVkKCdkaXYnKSBgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDE0cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUsIHN0YXRlIH0pID0+IHRoZW1lLnByb2dyZXNzLmNvbG9yW3N0YXRlXX07XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgNTAwbXMgbGluZWFyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG5jb25zdCBQcm9ncmVzc1NlY3Rpb24gPSBzdHlsZWQoJ2RpdicpIGBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuXG4gIC8qIHRoaXMgZW5zdXJlcyBzdGFja2luZyBjb250ZXh0IGlzIGxvY2FsIGZvciB6LWluZGV4ICovXG4gIHRyYW5zZm9ybTogc2NhbGUoMSk7XG5cbiAgLyogZmlyc3QgYW5kIGxhc3Qgcm91bmRlZCBjb3JuZXJzICovXG4gID4gZGl2OmZpcnN0LW9mLXR5cGU6bm90KDpsYXN0LW9mLXR5cGUpIC5wcm9ncmVzcy1tYXJrZXIge1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHggMCAwIDEwcHg7XG4gIH1cbiAgPiBkaXY6bGFzdC1vZi10eXBlOm5vdCg6Zmlyc3Qtb2YtdHlwZSkgLnByb2dyZXNzLW1hcmtlciB7XG4gICAgYm9yZGVyLXJhZGl1czogMCAxMHB4IDEwcHggMDtcbiAgfVxuXG4gIC8qIFNlcGFyYXRvciBwb3NpdGlvbnMgKi9cbiAgZGl2Om5vdCg6bGFzdC1jaGlsZCkgLnJvdzo6YWZ0ZXIge1xuICAgICR7VHJpYW5nbGV9O1xuICAgIHotaW5kZXg6IDI7XG4gIH1cblxuICBkaXY6bm90KDpmaXJzdC1jaGlsZCkgLnJvdzo6YmVmb3JlIHtcbiAgICAke1RyaWFuZ2xlfTtcbiAgICB6LWluZGV4OiAxO1xuICB9XG5cbiAgLyogY2VudHJlIG9mZnNldCBkdWUgdG8gcHNldWRvIGVsZW1lbnRzICovXG4gICYgLnByb2dyZXNzLWl0ZW06Zmlyc3QtY2hpbGQgc3ZnIHtcbiAgICBtYXJnaW4tbGVmdDogN3B4O1xuICB9XG5cbiAgJiAucHJvZ3Jlc3MtaXRlbTpsYXN0LWNoaWxkIHN2ZyB7XG4gICAgbWFyZ2luLWxlZnQ6IC03cHg7XG4gIH1cbmA7XG4vKiBTZXBhcmF0b3IgY29sb3JzIC0gYmFzZWQgb24gc3RhdGUqL1xuY29uc3QgU2VwYXJhdG9yID0gc3R5bGVkKCdkaXYnKSBgXG4gICY6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lLCBzdGF0ZSB9KSA9PiB0aGVtZS5wcm9ncmVzcy5jb2xvcltzdGF0ZV19O1xuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjZmZmO1xuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgNTAwbXMgbGluZWFyO1xuICB9XG5cbiAgJjphZnRlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICR7KHsgdGhlbWUsIHN0YXRlIH0pID0+IHRoZW1lLnByb2dyZXNzLmNvbG9yW3N0YXRlXX07XG4gIH1cbmA7XG5jb25zdCBUZXh0ID0gc3R5bGVkKCdkaXYnKSBgXG4gICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9ufTtcbiAgZm9udC13ZWlnaHQ6ICR7KHsgY29tcGxldGVkIH0pID0+IChjb21wbGV0ZWQgPyA2MDAgOiAnbm9ybWFsJyl9O1xuICBjb2xvcjogJHsoeyB0aGVtZSwgc3RhdGUgfSkgPT4gKHN0YXRlID09PSAnbG9ja2VkJyA/IHRoZW1lLmNvbG9ycy5ncmV5IDogdGhlbWUuY29sb3JzLmJsYWNrKX07XG5gO1xuY29uc3QgZ2V0SWNvbiA9IChzdGF0ZSkgPT4gKHtcbiAgICBbUFJPR1JFU1NfU1RBVFVTLlNVQ0NFU1NdOiA8SWNvbiB3aWR0aD1cIjEwcHhcIiBoZWlnaHQ9XCIxMHB4XCIgZmlsbD1cIndoaXRlXCIgbmFtZT1cImNoZWNrbWFya1wiLz4sXG4gICAgW1BST0dSRVNTX1NUQVRVUy5FUlJPUl06IDxJY29uIHdpZHRoPVwiMTBweFwiIGhlaWdodD1cIjEwcHhcIiBmaWxsPVwid2hpdGVcIiBuYW1lPVwiZXhjbGFtYXRpb25cIi8+LFxuICAgIFtQUk9HUkVTU19TVEFUVVMuUEVORElOR106IDxJY29uIHdpZHRoPVwiMTRweFwiIGhlaWdodD1cIjE0cHhcIiBmaWxsPVwid2hpdGVcIiBuYW1lPVwiZWxsaXBzZXNcIi8+LFxuICAgIFtQUk9HUkVTU19TVEFUVVMuTE9DS0VEXTogPEljb24gd2lkdGg9XCIxMHB4XCIgaGVpZ2h0PVwiMTBweFwiIGZpbGw9XCJ3aGl0ZVwiIG5hbWU9XCJsb2NrXCIvPixcbiAgICBbUFJPR1JFU1NfU1RBVFVTLkRJU0FCTEVEXTogbnVsbCxcbiAgICBbUFJPR1JFU1NfU1RBVFVTLkNMT1NFRF06IDxJY29uIHdpZHRoPVwiOHB4XCIgaGVpZ2h0PVwiOHB4XCIgZmlsbD1cIndoaXRlXCIgbmFtZT1cInRpbWVzXCIvPixcbn1bc3RhdGVdKTtcbmV4cG9ydCBjb25zdCBQcm9ncmVzc0l0ZW0gPSAoX2EpID0+IHtcbiAgICB2YXIgeyBzdGF0ZSwgdGV4dCwgY29tcGxldGVkID0gc3RhdGUgPT09IFBST0dSRVNTX1NUQVRVUy5TVUNDRVNTLCBjbGFzc05hbWUgPSAnJyB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcInN0YXRlXCIsIFwidGV4dFwiLCBcImNvbXBsZXRlZFwiLCBcImNsYXNzTmFtZVwiXSk7XG4gICAgcmV0dXJuICg8ZGl2IGNsYXNzTmFtZT17YHByb2dyZXNzLWl0ZW0gJHtjbGFzc05hbWUgfHwgJyd9YH0gY3NzPXtjc3MgYFxuICAgICAgd2lkdGg6IDY0cHg7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW4tbGVmdDogLTRweDtcbiAgICBgfSB7Li4ucmVzdH0+XG4gICAgPFRleHQgc3RhdGU9e3N0YXRlfSBjb21wbGV0ZWQ9e2NvbXBsZXRlZH0+XG4gICAgICB7dGV4dH1cbiAgICA8L1RleHQ+XG4gICAgPFNlcGFyYXRvciBzdGF0ZT17c3RhdGV9IGNsYXNzTmFtZT1cInJvd1wiIGNzcz17Y3NzIGBcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGB9PlxuICAgICAgPFByb2dyZXNzTWFya2VyIGNsYXNzTmFtZT1cInByb2dyZXNzLW1hcmtlclwiIHN0YXRlPXtzdGF0ZX0+XG4gICAgICAgIHtnZXRJY29uKHN0YXRlKX1cbiAgICAgIDwvUHJvZ3Jlc3NNYXJrZXI+XG4gICAgPC9TZXBhcmF0b3I+XG4gIDwvZGl2Pik7XG59O1xuY29uc3QgUHJvZ3Jlc3MgPSAoeyBjaGlsZHJlbiB9KSA9PiAoPFByb2dyZXNzU2VjdGlvbj57Y2hpbGRyZW59PC9Qcm9ncmVzc1NlY3Rpb24+KTtcblByb2dyZXNzLkl0ZW0gPSBQcm9ncmVzc0l0ZW07XG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzeC5tYXAiXX0= */'),
);
/* Separator colors - based on state*/

var Separator = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'ed44ndf2',
  label: 'Uikit-Separator',
})(
  '&:before{background-color:',
  function (_ref5) {
    var theme = _ref5.theme,
      state = _ref5.state;
    return theme.progress.color[state];
  },
  ';border-left-color:#fff;transition:background-color 500ms linear;}&:after{background-color:transparent;border-left-color:',
  function (_ref6) {
    var theme = _ref6.theme,
      state = _ref6.state;
    return theme.progress.color[state];
  },
  ';}' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErRmdDIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24nO1xuZXhwb3J0IGNvbnN0IFBST0dSRVNTX1NUQVRVUyA9IHtcbiAgICBTVUNDRVNTOiAnc3VjY2VzcycsXG4gICAgRVJST1I6ICdlcnJvcicsXG4gICAgUEVORElORzogJ3BlbmRpbmcnLFxuICAgIERJU0FCTEVEOiAnZGlzYWJsZWQnLFxuICAgIExPQ0tFRDogJ2xvY2tlZCcsXG4gICAgQ0xPU0VEOiAnY2xvc2VkJyxcbn07XG5jb25zdCBUcmlhbmdsZSA9IChwcm9wcykgPT4gY3NzIGBcbiAgY29udGVudDogJyAnO1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3JkZXItdG9wOiA3cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1ib3R0b206IDdweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLWxlZnQtc3R5bGU6IHNvbGlkO1xuICBib3JkZXItbGVmdC13aWR0aDogN3B4O1xuYDtcbmNvbnN0IFByb2dyZXNzTWFya2VyID0gc3R5bGVkKCdkaXYnKSBgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDE0cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUsIHN0YXRlIH0pID0+IHRoZW1lLnByb2dyZXNzLmNvbG9yW3N0YXRlXX07XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgNTAwbXMgbGluZWFyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG5jb25zdCBQcm9ncmVzc1NlY3Rpb24gPSBzdHlsZWQoJ2RpdicpIGBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuXG4gIC8qIHRoaXMgZW5zdXJlcyBzdGFja2luZyBjb250ZXh0IGlzIGxvY2FsIGZvciB6LWluZGV4ICovXG4gIHRyYW5zZm9ybTogc2NhbGUoMSk7XG5cbiAgLyogZmlyc3QgYW5kIGxhc3Qgcm91bmRlZCBjb3JuZXJzICovXG4gID4gZGl2OmZpcnN0LW9mLXR5cGU6bm90KDpsYXN0LW9mLXR5cGUpIC5wcm9ncmVzcy1tYXJrZXIge1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHggMCAwIDEwcHg7XG4gIH1cbiAgPiBkaXY6bGFzdC1vZi10eXBlOm5vdCg6Zmlyc3Qtb2YtdHlwZSkgLnByb2dyZXNzLW1hcmtlciB7XG4gICAgYm9yZGVyLXJhZGl1czogMCAxMHB4IDEwcHggMDtcbiAgfVxuXG4gIC8qIFNlcGFyYXRvciBwb3NpdGlvbnMgKi9cbiAgZGl2Om5vdCg6bGFzdC1jaGlsZCkgLnJvdzo6YWZ0ZXIge1xuICAgICR7VHJpYW5nbGV9O1xuICAgIHotaW5kZXg6IDI7XG4gIH1cblxuICBkaXY6bm90KDpmaXJzdC1jaGlsZCkgLnJvdzo6YmVmb3JlIHtcbiAgICAke1RyaWFuZ2xlfTtcbiAgICB6LWluZGV4OiAxO1xuICB9XG5cbiAgLyogY2VudHJlIG9mZnNldCBkdWUgdG8gcHNldWRvIGVsZW1lbnRzICovXG4gICYgLnByb2dyZXNzLWl0ZW06Zmlyc3QtY2hpbGQgc3ZnIHtcbiAgICBtYXJnaW4tbGVmdDogN3B4O1xuICB9XG5cbiAgJiAucHJvZ3Jlc3MtaXRlbTpsYXN0LWNoaWxkIHN2ZyB7XG4gICAgbWFyZ2luLWxlZnQ6IC03cHg7XG4gIH1cbmA7XG4vKiBTZXBhcmF0b3IgY29sb3JzIC0gYmFzZWQgb24gc3RhdGUqL1xuY29uc3QgU2VwYXJhdG9yID0gc3R5bGVkKCdkaXYnKSBgXG4gICY6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lLCBzdGF0ZSB9KSA9PiB0aGVtZS5wcm9ncmVzcy5jb2xvcltzdGF0ZV19O1xuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjZmZmO1xuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgNTAwbXMgbGluZWFyO1xuICB9XG5cbiAgJjphZnRlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICR7KHsgdGhlbWUsIHN0YXRlIH0pID0+IHRoZW1lLnByb2dyZXNzLmNvbG9yW3N0YXRlXX07XG4gIH1cbmA7XG5jb25zdCBUZXh0ID0gc3R5bGVkKCdkaXYnKSBgXG4gICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9ufTtcbiAgZm9udC13ZWlnaHQ6ICR7KHsgY29tcGxldGVkIH0pID0+IChjb21wbGV0ZWQgPyA2MDAgOiAnbm9ybWFsJyl9O1xuICBjb2xvcjogJHsoeyB0aGVtZSwgc3RhdGUgfSkgPT4gKHN0YXRlID09PSAnbG9ja2VkJyA/IHRoZW1lLmNvbG9ycy5ncmV5IDogdGhlbWUuY29sb3JzLmJsYWNrKX07XG5gO1xuY29uc3QgZ2V0SWNvbiA9IChzdGF0ZSkgPT4gKHtcbiAgICBbUFJPR1JFU1NfU1RBVFVTLlNVQ0NFU1NdOiA8SWNvbiB3aWR0aD1cIjEwcHhcIiBoZWlnaHQ9XCIxMHB4XCIgZmlsbD1cIndoaXRlXCIgbmFtZT1cImNoZWNrbWFya1wiLz4sXG4gICAgW1BST0dSRVNTX1NUQVRVUy5FUlJPUl06IDxJY29uIHdpZHRoPVwiMTBweFwiIGhlaWdodD1cIjEwcHhcIiBmaWxsPVwid2hpdGVcIiBuYW1lPVwiZXhjbGFtYXRpb25cIi8+LFxuICAgIFtQUk9HUkVTU19TVEFUVVMuUEVORElOR106IDxJY29uIHdpZHRoPVwiMTRweFwiIGhlaWdodD1cIjE0cHhcIiBmaWxsPVwid2hpdGVcIiBuYW1lPVwiZWxsaXBzZXNcIi8+LFxuICAgIFtQUk9HUkVTU19TVEFUVVMuTE9DS0VEXTogPEljb24gd2lkdGg9XCIxMHB4XCIgaGVpZ2h0PVwiMTBweFwiIGZpbGw9XCJ3aGl0ZVwiIG5hbWU9XCJsb2NrXCIvPixcbiAgICBbUFJPR1JFU1NfU1RBVFVTLkRJU0FCTEVEXTogbnVsbCxcbiAgICBbUFJPR1JFU1NfU1RBVFVTLkNMT1NFRF06IDxJY29uIHdpZHRoPVwiOHB4XCIgaGVpZ2h0PVwiOHB4XCIgZmlsbD1cIndoaXRlXCIgbmFtZT1cInRpbWVzXCIvPixcbn1bc3RhdGVdKTtcbmV4cG9ydCBjb25zdCBQcm9ncmVzc0l0ZW0gPSAoX2EpID0+IHtcbiAgICB2YXIgeyBzdGF0ZSwgdGV4dCwgY29tcGxldGVkID0gc3RhdGUgPT09IFBST0dSRVNTX1NUQVRVUy5TVUNDRVNTLCBjbGFzc05hbWUgPSAnJyB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcInN0YXRlXCIsIFwidGV4dFwiLCBcImNvbXBsZXRlZFwiLCBcImNsYXNzTmFtZVwiXSk7XG4gICAgcmV0dXJuICg8ZGl2IGNsYXNzTmFtZT17YHByb2dyZXNzLWl0ZW0gJHtjbGFzc05hbWUgfHwgJyd9YH0gY3NzPXtjc3MgYFxuICAgICAgd2lkdGg6IDY0cHg7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW4tbGVmdDogLTRweDtcbiAgICBgfSB7Li4ucmVzdH0+XG4gICAgPFRleHQgc3RhdGU9e3N0YXRlfSBjb21wbGV0ZWQ9e2NvbXBsZXRlZH0+XG4gICAgICB7dGV4dH1cbiAgICA8L1RleHQ+XG4gICAgPFNlcGFyYXRvciBzdGF0ZT17c3RhdGV9IGNsYXNzTmFtZT1cInJvd1wiIGNzcz17Y3NzIGBcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGB9PlxuICAgICAgPFByb2dyZXNzTWFya2VyIGNsYXNzTmFtZT1cInByb2dyZXNzLW1hcmtlclwiIHN0YXRlPXtzdGF0ZX0+XG4gICAgICAgIHtnZXRJY29uKHN0YXRlKX1cbiAgICAgIDwvUHJvZ3Jlc3NNYXJrZXI+XG4gICAgPC9TZXBhcmF0b3I+XG4gIDwvZGl2Pik7XG59O1xuY29uc3QgUHJvZ3Jlc3MgPSAoeyBjaGlsZHJlbiB9KSA9PiAoPFByb2dyZXNzU2VjdGlvbj57Y2hpbGRyZW59PC9Qcm9ncmVzc1NlY3Rpb24+KTtcblByb2dyZXNzLkl0ZW0gPSBQcm9ncmVzc0l0ZW07XG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzeC5tYXAiXX0= */'),
);
var Text = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'ed44ndf3',
  label: 'Uikit-Text',
})(
  function (_ref7) {
    var theme = _ref7.theme;
    return theme.typography.caption;
  },
  ';font-weight:',
  function (_ref8) {
    var completed = _ref8.completed;
    return completed ? 600 : 'normal';
  },
  ';color:',
  function (_ref9) {
    var theme = _ref9.theme,
      state = _ref9.state;
    return state === 'locked' ? theme.colors.grey : theme.colors.black;
  },
  ';' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyRzJCIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24nO1xuZXhwb3J0IGNvbnN0IFBST0dSRVNTX1NUQVRVUyA9IHtcbiAgICBTVUNDRVNTOiAnc3VjY2VzcycsXG4gICAgRVJST1I6ICdlcnJvcicsXG4gICAgUEVORElORzogJ3BlbmRpbmcnLFxuICAgIERJU0FCTEVEOiAnZGlzYWJsZWQnLFxuICAgIExPQ0tFRDogJ2xvY2tlZCcsXG4gICAgQ0xPU0VEOiAnY2xvc2VkJyxcbn07XG5jb25zdCBUcmlhbmdsZSA9IChwcm9wcykgPT4gY3NzIGBcbiAgY29udGVudDogJyAnO1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3JkZXItdG9wOiA3cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1ib3R0b206IDdweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLWxlZnQtc3R5bGU6IHNvbGlkO1xuICBib3JkZXItbGVmdC13aWR0aDogN3B4O1xuYDtcbmNvbnN0IFByb2dyZXNzTWFya2VyID0gc3R5bGVkKCdkaXYnKSBgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDE0cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUsIHN0YXRlIH0pID0+IHRoZW1lLnByb2dyZXNzLmNvbG9yW3N0YXRlXX07XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgNTAwbXMgbGluZWFyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG5jb25zdCBQcm9ncmVzc1NlY3Rpb24gPSBzdHlsZWQoJ2RpdicpIGBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuXG4gIC8qIHRoaXMgZW5zdXJlcyBzdGFja2luZyBjb250ZXh0IGlzIGxvY2FsIGZvciB6LWluZGV4ICovXG4gIHRyYW5zZm9ybTogc2NhbGUoMSk7XG5cbiAgLyogZmlyc3QgYW5kIGxhc3Qgcm91bmRlZCBjb3JuZXJzICovXG4gID4gZGl2OmZpcnN0LW9mLXR5cGU6bm90KDpsYXN0LW9mLXR5cGUpIC5wcm9ncmVzcy1tYXJrZXIge1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHggMCAwIDEwcHg7XG4gIH1cbiAgPiBkaXY6bGFzdC1vZi10eXBlOm5vdCg6Zmlyc3Qtb2YtdHlwZSkgLnByb2dyZXNzLW1hcmtlciB7XG4gICAgYm9yZGVyLXJhZGl1czogMCAxMHB4IDEwcHggMDtcbiAgfVxuXG4gIC8qIFNlcGFyYXRvciBwb3NpdGlvbnMgKi9cbiAgZGl2Om5vdCg6bGFzdC1jaGlsZCkgLnJvdzo6YWZ0ZXIge1xuICAgICR7VHJpYW5nbGV9O1xuICAgIHotaW5kZXg6IDI7XG4gIH1cblxuICBkaXY6bm90KDpmaXJzdC1jaGlsZCkgLnJvdzo6YmVmb3JlIHtcbiAgICAke1RyaWFuZ2xlfTtcbiAgICB6LWluZGV4OiAxO1xuICB9XG5cbiAgLyogY2VudHJlIG9mZnNldCBkdWUgdG8gcHNldWRvIGVsZW1lbnRzICovXG4gICYgLnByb2dyZXNzLWl0ZW06Zmlyc3QtY2hpbGQgc3ZnIHtcbiAgICBtYXJnaW4tbGVmdDogN3B4O1xuICB9XG5cbiAgJiAucHJvZ3Jlc3MtaXRlbTpsYXN0LWNoaWxkIHN2ZyB7XG4gICAgbWFyZ2luLWxlZnQ6IC03cHg7XG4gIH1cbmA7XG4vKiBTZXBhcmF0b3IgY29sb3JzIC0gYmFzZWQgb24gc3RhdGUqL1xuY29uc3QgU2VwYXJhdG9yID0gc3R5bGVkKCdkaXYnKSBgXG4gICY6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lLCBzdGF0ZSB9KSA9PiB0aGVtZS5wcm9ncmVzcy5jb2xvcltzdGF0ZV19O1xuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjZmZmO1xuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgNTAwbXMgbGluZWFyO1xuICB9XG5cbiAgJjphZnRlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICR7KHsgdGhlbWUsIHN0YXRlIH0pID0+IHRoZW1lLnByb2dyZXNzLmNvbG9yW3N0YXRlXX07XG4gIH1cbmA7XG5jb25zdCBUZXh0ID0gc3R5bGVkKCdkaXYnKSBgXG4gICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9ufTtcbiAgZm9udC13ZWlnaHQ6ICR7KHsgY29tcGxldGVkIH0pID0+IChjb21wbGV0ZWQgPyA2MDAgOiAnbm9ybWFsJyl9O1xuICBjb2xvcjogJHsoeyB0aGVtZSwgc3RhdGUgfSkgPT4gKHN0YXRlID09PSAnbG9ja2VkJyA/IHRoZW1lLmNvbG9ycy5ncmV5IDogdGhlbWUuY29sb3JzLmJsYWNrKX07XG5gO1xuY29uc3QgZ2V0SWNvbiA9IChzdGF0ZSkgPT4gKHtcbiAgICBbUFJPR1JFU1NfU1RBVFVTLlNVQ0NFU1NdOiA8SWNvbiB3aWR0aD1cIjEwcHhcIiBoZWlnaHQ9XCIxMHB4XCIgZmlsbD1cIndoaXRlXCIgbmFtZT1cImNoZWNrbWFya1wiLz4sXG4gICAgW1BST0dSRVNTX1NUQVRVUy5FUlJPUl06IDxJY29uIHdpZHRoPVwiMTBweFwiIGhlaWdodD1cIjEwcHhcIiBmaWxsPVwid2hpdGVcIiBuYW1lPVwiZXhjbGFtYXRpb25cIi8+LFxuICAgIFtQUk9HUkVTU19TVEFUVVMuUEVORElOR106IDxJY29uIHdpZHRoPVwiMTRweFwiIGhlaWdodD1cIjE0cHhcIiBmaWxsPVwid2hpdGVcIiBuYW1lPVwiZWxsaXBzZXNcIi8+LFxuICAgIFtQUk9HUkVTU19TVEFUVVMuTE9DS0VEXTogPEljb24gd2lkdGg9XCIxMHB4XCIgaGVpZ2h0PVwiMTBweFwiIGZpbGw9XCJ3aGl0ZVwiIG5hbWU9XCJsb2NrXCIvPixcbiAgICBbUFJPR1JFU1NfU1RBVFVTLkRJU0FCTEVEXTogbnVsbCxcbiAgICBbUFJPR1JFU1NfU1RBVFVTLkNMT1NFRF06IDxJY29uIHdpZHRoPVwiOHB4XCIgaGVpZ2h0PVwiOHB4XCIgZmlsbD1cIndoaXRlXCIgbmFtZT1cInRpbWVzXCIvPixcbn1bc3RhdGVdKTtcbmV4cG9ydCBjb25zdCBQcm9ncmVzc0l0ZW0gPSAoX2EpID0+IHtcbiAgICB2YXIgeyBzdGF0ZSwgdGV4dCwgY29tcGxldGVkID0gc3RhdGUgPT09IFBST0dSRVNTX1NUQVRVUy5TVUNDRVNTLCBjbGFzc05hbWUgPSAnJyB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcInN0YXRlXCIsIFwidGV4dFwiLCBcImNvbXBsZXRlZFwiLCBcImNsYXNzTmFtZVwiXSk7XG4gICAgcmV0dXJuICg8ZGl2IGNsYXNzTmFtZT17YHByb2dyZXNzLWl0ZW0gJHtjbGFzc05hbWUgfHwgJyd9YH0gY3NzPXtjc3MgYFxuICAgICAgd2lkdGg6IDY0cHg7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW4tbGVmdDogLTRweDtcbiAgICBgfSB7Li4ucmVzdH0+XG4gICAgPFRleHQgc3RhdGU9e3N0YXRlfSBjb21wbGV0ZWQ9e2NvbXBsZXRlZH0+XG4gICAgICB7dGV4dH1cbiAgICA8L1RleHQ+XG4gICAgPFNlcGFyYXRvciBzdGF0ZT17c3RhdGV9IGNsYXNzTmFtZT1cInJvd1wiIGNzcz17Y3NzIGBcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGB9PlxuICAgICAgPFByb2dyZXNzTWFya2VyIGNsYXNzTmFtZT1cInByb2dyZXNzLW1hcmtlclwiIHN0YXRlPXtzdGF0ZX0+XG4gICAgICAgIHtnZXRJY29uKHN0YXRlKX1cbiAgICAgIDwvUHJvZ3Jlc3NNYXJrZXI+XG4gICAgPC9TZXBhcmF0b3I+XG4gIDwvZGl2Pik7XG59O1xuY29uc3QgUHJvZ3Jlc3MgPSAoeyBjaGlsZHJlbiB9KSA9PiAoPFByb2dyZXNzU2VjdGlvbj57Y2hpbGRyZW59PC9Qcm9ncmVzc1NlY3Rpb24+KTtcblByb2dyZXNzLkl0ZW0gPSBQcm9ncmVzc0l0ZW07XG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzeC5tYXAiXX0= */'),
);

var getIcon = function getIcon(state) {
  var _PROGRESS_STATUS$SUCC;

  return ((_PROGRESS_STATUS$SUCC = {}),
  (0, _defineProperty2['default'])(
    _PROGRESS_STATUS$SUCC,
    PROGRESS_STATUS.SUCCESS,
    (0, _core.jsx)(_Icon['default'], {
      width: '10px',
      height: '10px',
      fill: 'white',
      name: 'checkmark',
    }),
  ),
  (0, _defineProperty2['default'])(
    _PROGRESS_STATUS$SUCC,
    PROGRESS_STATUS.ERROR,
    (0, _core.jsx)(_Icon['default'], {
      width: '10px',
      height: '10px',
      fill: 'white',
      name: 'exclamation',
    }),
  ),
  (0, _defineProperty2['default'])(
    _PROGRESS_STATUS$SUCC,
    PROGRESS_STATUS.PENDING,
    (0, _core.jsx)(_Icon['default'], {
      width: '14px',
      height: '14px',
      fill: 'white',
      name: 'ellipses',
    }),
  ),
  (0, _defineProperty2['default'])(
    _PROGRESS_STATUS$SUCC,
    PROGRESS_STATUS.LOCKED,
    (0, _core.jsx)(_Icon['default'], {
      width: '10px',
      height: '10px',
      fill: 'white',
      name: 'lock',
    }),
  ),
  (0, _defineProperty2['default'])(_PROGRESS_STATUS$SUCC, PROGRESS_STATUS.DISABLED, null),
  (0, _defineProperty2['default'])(
    _PROGRESS_STATUS$SUCC,
    PROGRESS_STATUS.CLOSED,
    (0, _core.jsx)(_Icon['default'], {
      width: '8px',
      height: '8px',
      fill: 'white',
      name: 'times',
    }),
  ),
  _PROGRESS_STATUS$SUCC)[state];
};

var _ref2 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '27i6po-Uikit-ProgressItem',
        styles: 'width:64px;text-align:center;margin-left:-4px;;label:Uikit-ProgressItem;',
      }
    : {
        name: '27i6po-Uikit-ProgressItem',
        styles: 'width:64px;text-align:center;margin-left:-4px;;label:Uikit-ProgressItem;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwSHlFIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24nO1xuZXhwb3J0IGNvbnN0IFBST0dSRVNTX1NUQVRVUyA9IHtcbiAgICBTVUNDRVNTOiAnc3VjY2VzcycsXG4gICAgRVJST1I6ICdlcnJvcicsXG4gICAgUEVORElORzogJ3BlbmRpbmcnLFxuICAgIERJU0FCTEVEOiAnZGlzYWJsZWQnLFxuICAgIExPQ0tFRDogJ2xvY2tlZCcsXG4gICAgQ0xPU0VEOiAnY2xvc2VkJyxcbn07XG5jb25zdCBUcmlhbmdsZSA9IChwcm9wcykgPT4gY3NzIGBcbiAgY29udGVudDogJyAnO1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3JkZXItdG9wOiA3cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1ib3R0b206IDdweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLWxlZnQtc3R5bGU6IHNvbGlkO1xuICBib3JkZXItbGVmdC13aWR0aDogN3B4O1xuYDtcbmNvbnN0IFByb2dyZXNzTWFya2VyID0gc3R5bGVkKCdkaXYnKSBgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDE0cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUsIHN0YXRlIH0pID0+IHRoZW1lLnByb2dyZXNzLmNvbG9yW3N0YXRlXX07XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgNTAwbXMgbGluZWFyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG5jb25zdCBQcm9ncmVzc1NlY3Rpb24gPSBzdHlsZWQoJ2RpdicpIGBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuXG4gIC8qIHRoaXMgZW5zdXJlcyBzdGFja2luZyBjb250ZXh0IGlzIGxvY2FsIGZvciB6LWluZGV4ICovXG4gIHRyYW5zZm9ybTogc2NhbGUoMSk7XG5cbiAgLyogZmlyc3QgYW5kIGxhc3Qgcm91bmRlZCBjb3JuZXJzICovXG4gID4gZGl2OmZpcnN0LW9mLXR5cGU6bm90KDpsYXN0LW9mLXR5cGUpIC5wcm9ncmVzcy1tYXJrZXIge1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHggMCAwIDEwcHg7XG4gIH1cbiAgPiBkaXY6bGFzdC1vZi10eXBlOm5vdCg6Zmlyc3Qtb2YtdHlwZSkgLnByb2dyZXNzLW1hcmtlciB7XG4gICAgYm9yZGVyLXJhZGl1czogMCAxMHB4IDEwcHggMDtcbiAgfVxuXG4gIC8qIFNlcGFyYXRvciBwb3NpdGlvbnMgKi9cbiAgZGl2Om5vdCg6bGFzdC1jaGlsZCkgLnJvdzo6YWZ0ZXIge1xuICAgICR7VHJpYW5nbGV9O1xuICAgIHotaW5kZXg6IDI7XG4gIH1cblxuICBkaXY6bm90KDpmaXJzdC1jaGlsZCkgLnJvdzo6YmVmb3JlIHtcbiAgICAke1RyaWFuZ2xlfTtcbiAgICB6LWluZGV4OiAxO1xuICB9XG5cbiAgLyogY2VudHJlIG9mZnNldCBkdWUgdG8gcHNldWRvIGVsZW1lbnRzICovXG4gICYgLnByb2dyZXNzLWl0ZW06Zmlyc3QtY2hpbGQgc3ZnIHtcbiAgICBtYXJnaW4tbGVmdDogN3B4O1xuICB9XG5cbiAgJiAucHJvZ3Jlc3MtaXRlbTpsYXN0LWNoaWxkIHN2ZyB7XG4gICAgbWFyZ2luLWxlZnQ6IC03cHg7XG4gIH1cbmA7XG4vKiBTZXBhcmF0b3IgY29sb3JzIC0gYmFzZWQgb24gc3RhdGUqL1xuY29uc3QgU2VwYXJhdG9yID0gc3R5bGVkKCdkaXYnKSBgXG4gICY6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lLCBzdGF0ZSB9KSA9PiB0aGVtZS5wcm9ncmVzcy5jb2xvcltzdGF0ZV19O1xuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjZmZmO1xuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgNTAwbXMgbGluZWFyO1xuICB9XG5cbiAgJjphZnRlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICR7KHsgdGhlbWUsIHN0YXRlIH0pID0+IHRoZW1lLnByb2dyZXNzLmNvbG9yW3N0YXRlXX07XG4gIH1cbmA7XG5jb25zdCBUZXh0ID0gc3R5bGVkKCdkaXYnKSBgXG4gICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9ufTtcbiAgZm9udC13ZWlnaHQ6ICR7KHsgY29tcGxldGVkIH0pID0+IChjb21wbGV0ZWQgPyA2MDAgOiAnbm9ybWFsJyl9O1xuICBjb2xvcjogJHsoeyB0aGVtZSwgc3RhdGUgfSkgPT4gKHN0YXRlID09PSAnbG9ja2VkJyA/IHRoZW1lLmNvbG9ycy5ncmV5IDogdGhlbWUuY29sb3JzLmJsYWNrKX07XG5gO1xuY29uc3QgZ2V0SWNvbiA9IChzdGF0ZSkgPT4gKHtcbiAgICBbUFJPR1JFU1NfU1RBVFVTLlNVQ0NFU1NdOiA8SWNvbiB3aWR0aD1cIjEwcHhcIiBoZWlnaHQ9XCIxMHB4XCIgZmlsbD1cIndoaXRlXCIgbmFtZT1cImNoZWNrbWFya1wiLz4sXG4gICAgW1BST0dSRVNTX1NUQVRVUy5FUlJPUl06IDxJY29uIHdpZHRoPVwiMTBweFwiIGhlaWdodD1cIjEwcHhcIiBmaWxsPVwid2hpdGVcIiBuYW1lPVwiZXhjbGFtYXRpb25cIi8+LFxuICAgIFtQUk9HUkVTU19TVEFUVVMuUEVORElOR106IDxJY29uIHdpZHRoPVwiMTRweFwiIGhlaWdodD1cIjE0cHhcIiBmaWxsPVwid2hpdGVcIiBuYW1lPVwiZWxsaXBzZXNcIi8+LFxuICAgIFtQUk9HUkVTU19TVEFUVVMuTE9DS0VEXTogPEljb24gd2lkdGg9XCIxMHB4XCIgaGVpZ2h0PVwiMTBweFwiIGZpbGw9XCJ3aGl0ZVwiIG5hbWU9XCJsb2NrXCIvPixcbiAgICBbUFJPR1JFU1NfU1RBVFVTLkRJU0FCTEVEXTogbnVsbCxcbiAgICBbUFJPR1JFU1NfU1RBVFVTLkNMT1NFRF06IDxJY29uIHdpZHRoPVwiOHB4XCIgaGVpZ2h0PVwiOHB4XCIgZmlsbD1cIndoaXRlXCIgbmFtZT1cInRpbWVzXCIvPixcbn1bc3RhdGVdKTtcbmV4cG9ydCBjb25zdCBQcm9ncmVzc0l0ZW0gPSAoX2EpID0+IHtcbiAgICB2YXIgeyBzdGF0ZSwgdGV4dCwgY29tcGxldGVkID0gc3RhdGUgPT09IFBST0dSRVNTX1NUQVRVUy5TVUNDRVNTLCBjbGFzc05hbWUgPSAnJyB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcInN0YXRlXCIsIFwidGV4dFwiLCBcImNvbXBsZXRlZFwiLCBcImNsYXNzTmFtZVwiXSk7XG4gICAgcmV0dXJuICg8ZGl2IGNsYXNzTmFtZT17YHByb2dyZXNzLWl0ZW0gJHtjbGFzc05hbWUgfHwgJyd9YH0gY3NzPXtjc3MgYFxuICAgICAgd2lkdGg6IDY0cHg7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW4tbGVmdDogLTRweDtcbiAgICBgfSB7Li4ucmVzdH0+XG4gICAgPFRleHQgc3RhdGU9e3N0YXRlfSBjb21wbGV0ZWQ9e2NvbXBsZXRlZH0+XG4gICAgICB7dGV4dH1cbiAgICA8L1RleHQ+XG4gICAgPFNlcGFyYXRvciBzdGF0ZT17c3RhdGV9IGNsYXNzTmFtZT1cInJvd1wiIGNzcz17Y3NzIGBcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGB9PlxuICAgICAgPFByb2dyZXNzTWFya2VyIGNsYXNzTmFtZT1cInByb2dyZXNzLW1hcmtlclwiIHN0YXRlPXtzdGF0ZX0+XG4gICAgICAgIHtnZXRJY29uKHN0YXRlKX1cbiAgICAgIDwvUHJvZ3Jlc3NNYXJrZXI+XG4gICAgPC9TZXBhcmF0b3I+XG4gIDwvZGl2Pik7XG59O1xuY29uc3QgUHJvZ3Jlc3MgPSAoeyBjaGlsZHJlbiB9KSA9PiAoPFByb2dyZXNzU2VjdGlvbj57Y2hpbGRyZW59PC9Qcm9ncmVzc1NlY3Rpb24+KTtcblByb2dyZXNzLkl0ZW0gPSBQcm9ncmVzc0l0ZW07XG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzeC5tYXAiXX0= */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref3 =
  process.env.NODE_ENV === 'production'
    ? {
        name: 'bewixj-Uikit-ProgressItem',
        styles: 'display:flex;;label:Uikit-ProgressItem;',
      }
    : {
        name: 'bewixj-Uikit-ProgressItem',
        styles: 'display:flex;;label:Uikit-ProgressItem;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrSXNEIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24nO1xuZXhwb3J0IGNvbnN0IFBST0dSRVNTX1NUQVRVUyA9IHtcbiAgICBTVUNDRVNTOiAnc3VjY2VzcycsXG4gICAgRVJST1I6ICdlcnJvcicsXG4gICAgUEVORElORzogJ3BlbmRpbmcnLFxuICAgIERJU0FCTEVEOiAnZGlzYWJsZWQnLFxuICAgIExPQ0tFRDogJ2xvY2tlZCcsXG4gICAgQ0xPU0VEOiAnY2xvc2VkJyxcbn07XG5jb25zdCBUcmlhbmdsZSA9IChwcm9wcykgPT4gY3NzIGBcbiAgY29udGVudDogJyAnO1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3JkZXItdG9wOiA3cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1ib3R0b206IDdweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLWxlZnQtc3R5bGU6IHNvbGlkO1xuICBib3JkZXItbGVmdC13aWR0aDogN3B4O1xuYDtcbmNvbnN0IFByb2dyZXNzTWFya2VyID0gc3R5bGVkKCdkaXYnKSBgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDE0cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUsIHN0YXRlIH0pID0+IHRoZW1lLnByb2dyZXNzLmNvbG9yW3N0YXRlXX07XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgNTAwbXMgbGluZWFyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG5jb25zdCBQcm9ncmVzc1NlY3Rpb24gPSBzdHlsZWQoJ2RpdicpIGBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuXG4gIC8qIHRoaXMgZW5zdXJlcyBzdGFja2luZyBjb250ZXh0IGlzIGxvY2FsIGZvciB6LWluZGV4ICovXG4gIHRyYW5zZm9ybTogc2NhbGUoMSk7XG5cbiAgLyogZmlyc3QgYW5kIGxhc3Qgcm91bmRlZCBjb3JuZXJzICovXG4gID4gZGl2OmZpcnN0LW9mLXR5cGU6bm90KDpsYXN0LW9mLXR5cGUpIC5wcm9ncmVzcy1tYXJrZXIge1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHggMCAwIDEwcHg7XG4gIH1cbiAgPiBkaXY6bGFzdC1vZi10eXBlOm5vdCg6Zmlyc3Qtb2YtdHlwZSkgLnByb2dyZXNzLW1hcmtlciB7XG4gICAgYm9yZGVyLXJhZGl1czogMCAxMHB4IDEwcHggMDtcbiAgfVxuXG4gIC8qIFNlcGFyYXRvciBwb3NpdGlvbnMgKi9cbiAgZGl2Om5vdCg6bGFzdC1jaGlsZCkgLnJvdzo6YWZ0ZXIge1xuICAgICR7VHJpYW5nbGV9O1xuICAgIHotaW5kZXg6IDI7XG4gIH1cblxuICBkaXY6bm90KDpmaXJzdC1jaGlsZCkgLnJvdzo6YmVmb3JlIHtcbiAgICAke1RyaWFuZ2xlfTtcbiAgICB6LWluZGV4OiAxO1xuICB9XG5cbiAgLyogY2VudHJlIG9mZnNldCBkdWUgdG8gcHNldWRvIGVsZW1lbnRzICovXG4gICYgLnByb2dyZXNzLWl0ZW06Zmlyc3QtY2hpbGQgc3ZnIHtcbiAgICBtYXJnaW4tbGVmdDogN3B4O1xuICB9XG5cbiAgJiAucHJvZ3Jlc3MtaXRlbTpsYXN0LWNoaWxkIHN2ZyB7XG4gICAgbWFyZ2luLWxlZnQ6IC03cHg7XG4gIH1cbmA7XG4vKiBTZXBhcmF0b3IgY29sb3JzIC0gYmFzZWQgb24gc3RhdGUqL1xuY29uc3QgU2VwYXJhdG9yID0gc3R5bGVkKCdkaXYnKSBgXG4gICY6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lLCBzdGF0ZSB9KSA9PiB0aGVtZS5wcm9ncmVzcy5jb2xvcltzdGF0ZV19O1xuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjZmZmO1xuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgNTAwbXMgbGluZWFyO1xuICB9XG5cbiAgJjphZnRlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICR7KHsgdGhlbWUsIHN0YXRlIH0pID0+IHRoZW1lLnByb2dyZXNzLmNvbG9yW3N0YXRlXX07XG4gIH1cbmA7XG5jb25zdCBUZXh0ID0gc3R5bGVkKCdkaXYnKSBgXG4gICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9ufTtcbiAgZm9udC13ZWlnaHQ6ICR7KHsgY29tcGxldGVkIH0pID0+IChjb21wbGV0ZWQgPyA2MDAgOiAnbm9ybWFsJyl9O1xuICBjb2xvcjogJHsoeyB0aGVtZSwgc3RhdGUgfSkgPT4gKHN0YXRlID09PSAnbG9ja2VkJyA/IHRoZW1lLmNvbG9ycy5ncmV5IDogdGhlbWUuY29sb3JzLmJsYWNrKX07XG5gO1xuY29uc3QgZ2V0SWNvbiA9IChzdGF0ZSkgPT4gKHtcbiAgICBbUFJPR1JFU1NfU1RBVFVTLlNVQ0NFU1NdOiA8SWNvbiB3aWR0aD1cIjEwcHhcIiBoZWlnaHQ9XCIxMHB4XCIgZmlsbD1cIndoaXRlXCIgbmFtZT1cImNoZWNrbWFya1wiLz4sXG4gICAgW1BST0dSRVNTX1NUQVRVUy5FUlJPUl06IDxJY29uIHdpZHRoPVwiMTBweFwiIGhlaWdodD1cIjEwcHhcIiBmaWxsPVwid2hpdGVcIiBuYW1lPVwiZXhjbGFtYXRpb25cIi8+LFxuICAgIFtQUk9HUkVTU19TVEFUVVMuUEVORElOR106IDxJY29uIHdpZHRoPVwiMTRweFwiIGhlaWdodD1cIjE0cHhcIiBmaWxsPVwid2hpdGVcIiBuYW1lPVwiZWxsaXBzZXNcIi8+LFxuICAgIFtQUk9HUkVTU19TVEFUVVMuTE9DS0VEXTogPEljb24gd2lkdGg9XCIxMHB4XCIgaGVpZ2h0PVwiMTBweFwiIGZpbGw9XCJ3aGl0ZVwiIG5hbWU9XCJsb2NrXCIvPixcbiAgICBbUFJPR1JFU1NfU1RBVFVTLkRJU0FCTEVEXTogbnVsbCxcbiAgICBbUFJPR1JFU1NfU1RBVFVTLkNMT1NFRF06IDxJY29uIHdpZHRoPVwiOHB4XCIgaGVpZ2h0PVwiOHB4XCIgZmlsbD1cIndoaXRlXCIgbmFtZT1cInRpbWVzXCIvPixcbn1bc3RhdGVdKTtcbmV4cG9ydCBjb25zdCBQcm9ncmVzc0l0ZW0gPSAoX2EpID0+IHtcbiAgICB2YXIgeyBzdGF0ZSwgdGV4dCwgY29tcGxldGVkID0gc3RhdGUgPT09IFBST0dSRVNTX1NUQVRVUy5TVUNDRVNTLCBjbGFzc05hbWUgPSAnJyB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcInN0YXRlXCIsIFwidGV4dFwiLCBcImNvbXBsZXRlZFwiLCBcImNsYXNzTmFtZVwiXSk7XG4gICAgcmV0dXJuICg8ZGl2IGNsYXNzTmFtZT17YHByb2dyZXNzLWl0ZW0gJHtjbGFzc05hbWUgfHwgJyd9YH0gY3NzPXtjc3MgYFxuICAgICAgd2lkdGg6IDY0cHg7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW4tbGVmdDogLTRweDtcbiAgICBgfSB7Li4ucmVzdH0+XG4gICAgPFRleHQgc3RhdGU9e3N0YXRlfSBjb21wbGV0ZWQ9e2NvbXBsZXRlZH0+XG4gICAgICB7dGV4dH1cbiAgICA8L1RleHQ+XG4gICAgPFNlcGFyYXRvciBzdGF0ZT17c3RhdGV9IGNsYXNzTmFtZT1cInJvd1wiIGNzcz17Y3NzIGBcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGB9PlxuICAgICAgPFByb2dyZXNzTWFya2VyIGNsYXNzTmFtZT1cInByb2dyZXNzLW1hcmtlclwiIHN0YXRlPXtzdGF0ZX0+XG4gICAgICAgIHtnZXRJY29uKHN0YXRlKX1cbiAgICAgIDwvUHJvZ3Jlc3NNYXJrZXI+XG4gICAgPC9TZXBhcmF0b3I+XG4gIDwvZGl2Pik7XG59O1xuY29uc3QgUHJvZ3Jlc3MgPSAoeyBjaGlsZHJlbiB9KSA9PiAoPFByb2dyZXNzU2VjdGlvbj57Y2hpbGRyZW59PC9Qcm9ncmVzc1NlY3Rpb24+KTtcblByb2dyZXNzLkl0ZW0gPSBQcm9ncmVzc0l0ZW07XG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzeC5tYXAiXX0= */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var ProgressItem = function ProgressItem(_a) {
  var state = _a.state,
    text = _a.text,
    _a$completed = _a.completed,
    completed = _a$completed === void 0 ? state === PROGRESS_STATUS.SUCCESS : _a$completed,
    _a$className = _a.className,
    className = _a$className === void 0 ? '' : _a$className,
    rest = __rest(_a, ['state', 'text', 'completed', 'className']);

  return (0, _core.jsx)(
    'div',
    (0, _extends2['default'])(
      {
        className: 'progress-item '.concat(className || ''),
        css: _ref2,
      },
      rest,
    ),
    (0, _core.jsx)(
      Text,
      {
        state: state,
        completed: completed,
      },
      text,
    ),
    (0, _core.jsx)(
      Separator,
      {
        state: state,
        className: 'row',
        css: _ref3,
      },
      (0, _core.jsx)(
        ProgressMarker,
        {
          className: 'progress-marker',
          state: state,
        },
        getIcon(state),
      ),
    ),
  );
};

exports.ProgressItem = ProgressItem;

var Progress = function Progress(_ref10) {
  var children = _ref10.children;
  return (0, _core.jsx)(ProgressSection, null, children);
};

Progress.Item = ProgressItem;
var _default = Progress;
exports['default'] = _default;
