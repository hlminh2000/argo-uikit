'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports['default'] = void 0;

var _core = require('@emotion/core');

var _slicedToArray2 = _interopRequireDefault(require('@babel/runtime/helpers/slicedToArray'));

var _regenerator = _interopRequireDefault(require('@babel/runtime/regenerator'));

var _styledBase = _interopRequireDefault(require('@emotion/styled-base'));

var _react = _interopRequireDefault(require('react'));

var _common = require('../form/common');

var _Button = _interopRequireDefault(require('../Button'));

var _Typography = _interopRequireDefault(require('../Typography'));

var _Tag = _interopRequireWildcard(require('../Tag'));

var _Icon = _interopRequireDefault(require('../Icon'));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return { default: obj };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj['default'] = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}

var __jsx = _react['default'].createElement;

function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}

/*
 * Copyright (c) 2020 The Ontario Institute for Cancer Research. All rights reserved
 *
 * This program and the accompanying materials are made available under the terms of
 * the GNU Affero General Public License v3.0. You should have received a copy of the
 * GNU Affero General Public License along with this program.
 *  If not, see <http://www.gnu.org/licenses/>.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var __awaiter =
  (void 0 && (void 0).__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value);
          });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator['throw'](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

var TagWrapper = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'eh3apfc0',
  label: 'Uikit-TagWrapper',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: '1sylyko',
        styles: 'margin-right:5px;',
      }
    : {
        name: '1sylyko',
        styles: 'margin-right:5px;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtQ2lDIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgU3R5bGVkSW5wdXRXcmFwcGVyLCBJTlBVVF9TVEFURVMsIElOUFVUX1NJWkVTIH0gZnJvbSAndWlraXQvZm9ybS9jb21tb24nO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICd1aWtpdC9CdXR0b24nO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAndWlraXQvVHlwb2dyYXBoeSc7XG5pbXBvcnQgVGFnLCB7IFRBR19WQVJJQU5UUyB9IGZyb20gJ3Vpa2l0L1RhZyc7XG5pbXBvcnQgSWNvbiBmcm9tICd1aWtpdC9JY29uJztcbmNvbnN0IFRhZ1dyYXBwZXIgPSBzdHlsZWQoJ2RpdicpIGBcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XG5gO1xuY29uc3QgUHJvbXBNZXNzYWdlID0gc3R5bGVkKCdkaXYnKSBgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxMDAlO1xuICByaWdodDogMCU7XG4gIG1hcmdpbi1yaWdodDogNXB4O1xuYDtcbmNvbnN0IGNvcHlUb0NsaXBib2FyZCA9IChkYXRhKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICB5aWVsZCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChkYXRhKTtcbn0pO1xuY29uc3QgQ2xpcGJvYXJkQ29weUZpZWxkID0gKHsgdmFsdWUsIGJ1dHRvblRleHQgPSAnY29weScsIGRpc2FibGVkID0gZmFsc2UsIHRhZ1RleHQsIGVycm9yVGV4dCwgdGltZW91dCA9IDIwMDAsIGxvYWRpbmcsIGJ1dHRvbklkLCB9KSA9PiB7XG4gICAgY29uc3QgW3Byb21wdE1zZ1Nob3duLCBzZXRQcm9tcHRNc2dTaG93bl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgbGV0IGN1cnJlbnRUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHNob3dQcm9tcHRNZXNzYWdlID0gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQoY3VycmVudFRpbWVvdXQpO1xuICAgICAgICBzZXRQcm9tcHRNc2dTaG93bih0cnVlKTtcbiAgICAgICAgY3VycmVudFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHNldFByb21wdE1zZ1Nob3duKGZhbHNlKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgfTtcbiAgICBjb25zdCBvbkNvcHlDbGlja2VkID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgeWllbGQgY29weVRvQ2xpcGJvYXJkKHZhbHVlKTtcbiAgICAgICAgICAgIHNob3dQcm9tcHRNZXNzYWdlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gKDxkaXYgY3NzPXtjc3MgYFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICBgfT5cbiAgICAgIDxTdHlsZWRJbnB1dFdyYXBwZXIgZGlzYWJsZWQ9e2Rpc2FibGVkfSBzaXplPXtJTlBVVF9TSVpFUy5TTX0gaW5wdXRTdGF0ZT17SU5QVVRfU1RBVEVTLmRlZmF1bHR9IGNzcz17Y3NzIGBcbiAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiA1cHg7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBjdXJzb3I6IHVuc2V0O1xuICAgICAgICBgfT5cbiAgICAgICAgeyhlcnJvclRleHQgfHwgdGFnVGV4dCkgJiYgIWxvYWRpbmcgJiYgKDxUYWdXcmFwcGVyPlxuICAgICAgICAgICAgPFRhZyBpZD1cImFwaVRva2VuRXhwaXJ5XCIgLy8gRm9yIFNlbGVuaXVtXG4gICAgIHZhcmlhbnQ9e2Vycm9yVGV4dCA/IFRBR19WQVJJQU5UUy5FUlJPUiA6IFRBR19WQVJJQU5UUy5JTkZPfT5cbiAgICAgICAgICAgICAge2Vycm9yVGV4dCB8fCB0YWdUZXh0fVxuICAgICAgICAgICAgPC9UYWc+XG4gICAgICAgICAgPC9UYWdXcmFwcGVyPil9XG4gICAgICAgIDxkaXYgY3NzPXtjc3MgYFxuICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgYH0+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgaWQ9XCJhcGlUb2tlblwiIC8vIEZvciBTZWxlbml1bVxuICAgICB2YXJpYW50PVwiZGVmYXVsdFwiPlxuICAgICAgICAgICAge3ZhbHVlfVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxCdXR0b24gaWQ9e2J1dHRvbklkfSBpc0FzeW5jIGRpc2FibGVkPXtkaXNhYmxlZH0gb25DbGljaz17b25Db3B5Q2xpY2tlZH0gY3NzPXtjc3MgYFxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIGB9PlxuICAgICAgICAgIHtwcm9tcHRNc2dTaG93biA/ICg8SWNvbiBuYW1lPVwiY2hlY2ttYXJrXCIgZmlsbD1cIndoaXRlXCIgaGVpZ2h0PVwiMTNweFwiLz4pIDogbG9hZGluZyA/ICg8SWNvbiBuYW1lPVwic3Bpbm5lclwiIGhlaWdodD1cIjEzcHhcIi8+KSA6IChidXR0b25UZXh0KX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L1N0eWxlZElucHV0V3JhcHBlcj5cbiAgICAgIHtwcm9tcHRNc2dTaG93biAmJiAoPFByb21wTWVzc2FnZT5cbiAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwibGFiZWxcIiBjb21wb25lbnQ9XCJkaXZcIiBjb2xvcj1cImFjY2VudDJfZGFya1wiPlxuICAgICAgICAgICAgQ29waWVkIVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPC9Qcm9tcE1lc3NhZ2U+KX1cbiAgICA8L2Rpdj4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IENsaXBib2FyZENvcHlGaWVsZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzeC5tYXAiXX0= */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);
var PrompMessage = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'eh3apfc1',
  label: 'Uikit-PrompMessage',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: 'tzs4jf',
        styles: 'position:absolute;top:100%;right:0%;margin-right:5px;',
      }
    : {
        name: 'tzs4jf',
        styles: 'position:absolute;top:100%;right:0%;margin-right:5px;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQ21DIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgU3R5bGVkSW5wdXRXcmFwcGVyLCBJTlBVVF9TVEFURVMsIElOUFVUX1NJWkVTIH0gZnJvbSAndWlraXQvZm9ybS9jb21tb24nO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICd1aWtpdC9CdXR0b24nO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAndWlraXQvVHlwb2dyYXBoeSc7XG5pbXBvcnQgVGFnLCB7IFRBR19WQVJJQU5UUyB9IGZyb20gJ3Vpa2l0L1RhZyc7XG5pbXBvcnQgSWNvbiBmcm9tICd1aWtpdC9JY29uJztcbmNvbnN0IFRhZ1dyYXBwZXIgPSBzdHlsZWQoJ2RpdicpIGBcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XG5gO1xuY29uc3QgUHJvbXBNZXNzYWdlID0gc3R5bGVkKCdkaXYnKSBgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxMDAlO1xuICByaWdodDogMCU7XG4gIG1hcmdpbi1yaWdodDogNXB4O1xuYDtcbmNvbnN0IGNvcHlUb0NsaXBib2FyZCA9IChkYXRhKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICB5aWVsZCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChkYXRhKTtcbn0pO1xuY29uc3QgQ2xpcGJvYXJkQ29weUZpZWxkID0gKHsgdmFsdWUsIGJ1dHRvblRleHQgPSAnY29weScsIGRpc2FibGVkID0gZmFsc2UsIHRhZ1RleHQsIGVycm9yVGV4dCwgdGltZW91dCA9IDIwMDAsIGxvYWRpbmcsIGJ1dHRvbklkLCB9KSA9PiB7XG4gICAgY29uc3QgW3Byb21wdE1zZ1Nob3duLCBzZXRQcm9tcHRNc2dTaG93bl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgbGV0IGN1cnJlbnRUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHNob3dQcm9tcHRNZXNzYWdlID0gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQoY3VycmVudFRpbWVvdXQpO1xuICAgICAgICBzZXRQcm9tcHRNc2dTaG93bih0cnVlKTtcbiAgICAgICAgY3VycmVudFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHNldFByb21wdE1zZ1Nob3duKGZhbHNlKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgfTtcbiAgICBjb25zdCBvbkNvcHlDbGlja2VkID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgeWllbGQgY29weVRvQ2xpcGJvYXJkKHZhbHVlKTtcbiAgICAgICAgICAgIHNob3dQcm9tcHRNZXNzYWdlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gKDxkaXYgY3NzPXtjc3MgYFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICBgfT5cbiAgICAgIDxTdHlsZWRJbnB1dFdyYXBwZXIgZGlzYWJsZWQ9e2Rpc2FibGVkfSBzaXplPXtJTlBVVF9TSVpFUy5TTX0gaW5wdXRTdGF0ZT17SU5QVVRfU1RBVEVTLmRlZmF1bHR9IGNzcz17Y3NzIGBcbiAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiA1cHg7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBjdXJzb3I6IHVuc2V0O1xuICAgICAgICBgfT5cbiAgICAgICAgeyhlcnJvclRleHQgfHwgdGFnVGV4dCkgJiYgIWxvYWRpbmcgJiYgKDxUYWdXcmFwcGVyPlxuICAgICAgICAgICAgPFRhZyBpZD1cImFwaVRva2VuRXhwaXJ5XCIgLy8gRm9yIFNlbGVuaXVtXG4gICAgIHZhcmlhbnQ9e2Vycm9yVGV4dCA/IFRBR19WQVJJQU5UUy5FUlJPUiA6IFRBR19WQVJJQU5UUy5JTkZPfT5cbiAgICAgICAgICAgICAge2Vycm9yVGV4dCB8fCB0YWdUZXh0fVxuICAgICAgICAgICAgPC9UYWc+XG4gICAgICAgICAgPC9UYWdXcmFwcGVyPil9XG4gICAgICAgIDxkaXYgY3NzPXtjc3MgYFxuICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgYH0+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgaWQ9XCJhcGlUb2tlblwiIC8vIEZvciBTZWxlbml1bVxuICAgICB2YXJpYW50PVwiZGVmYXVsdFwiPlxuICAgICAgICAgICAge3ZhbHVlfVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxCdXR0b24gaWQ9e2J1dHRvbklkfSBpc0FzeW5jIGRpc2FibGVkPXtkaXNhYmxlZH0gb25DbGljaz17b25Db3B5Q2xpY2tlZH0gY3NzPXtjc3MgYFxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIGB9PlxuICAgICAgICAgIHtwcm9tcHRNc2dTaG93biA/ICg8SWNvbiBuYW1lPVwiY2hlY2ttYXJrXCIgZmlsbD1cIndoaXRlXCIgaGVpZ2h0PVwiMTNweFwiLz4pIDogbG9hZGluZyA/ICg8SWNvbiBuYW1lPVwic3Bpbm5lclwiIGhlaWdodD1cIjEzcHhcIi8+KSA6IChidXR0b25UZXh0KX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L1N0eWxlZElucHV0V3JhcHBlcj5cbiAgICAgIHtwcm9tcHRNc2dTaG93biAmJiAoPFByb21wTWVzc2FnZT5cbiAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwibGFiZWxcIiBjb21wb25lbnQ9XCJkaXZcIiBjb2xvcj1cImFjY2VudDJfZGFya1wiPlxuICAgICAgICAgICAgQ29waWVkIVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPC9Qcm9tcE1lc3NhZ2U+KX1cbiAgICA8L2Rpdj4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IENsaXBib2FyZENvcHlGaWVsZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzeC5tYXAiXX0= */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);

var copyToClipboard = function copyToClipboard(data) {
  return __awaiter(
    void 0,
    void 0,
    void 0,
    /*#__PURE__*/ _regenerator['default'].mark(function _callee() {
      return _regenerator['default'].wrap(function _callee$(_context) {
        while (1) {
          switch ((_context.prev = _context.next)) {
            case 0:
              _context.next = 2;
              return navigator.clipboard.writeText(data);

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee);
    }),
  );
};

var _ref =
  process.env.NODE_ENV === 'production'
    ? {
        name: '18rjytx-Uikit-ClipboardCopyField',
        styles: 'position:relative;;label:Uikit-ClipboardCopyField;',
      }
    : {
        name: '18rjytx-Uikit-ClipboardCopyField',
        styles: 'position:relative;;label:Uikit-ClipboardCopyField;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErRDBCIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgU3R5bGVkSW5wdXRXcmFwcGVyLCBJTlBVVF9TVEFURVMsIElOUFVUX1NJWkVTIH0gZnJvbSAndWlraXQvZm9ybS9jb21tb24nO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICd1aWtpdC9CdXR0b24nO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAndWlraXQvVHlwb2dyYXBoeSc7XG5pbXBvcnQgVGFnLCB7IFRBR19WQVJJQU5UUyB9IGZyb20gJ3Vpa2l0L1RhZyc7XG5pbXBvcnQgSWNvbiBmcm9tICd1aWtpdC9JY29uJztcbmNvbnN0IFRhZ1dyYXBwZXIgPSBzdHlsZWQoJ2RpdicpIGBcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XG5gO1xuY29uc3QgUHJvbXBNZXNzYWdlID0gc3R5bGVkKCdkaXYnKSBgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxMDAlO1xuICByaWdodDogMCU7XG4gIG1hcmdpbi1yaWdodDogNXB4O1xuYDtcbmNvbnN0IGNvcHlUb0NsaXBib2FyZCA9IChkYXRhKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICB5aWVsZCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChkYXRhKTtcbn0pO1xuY29uc3QgQ2xpcGJvYXJkQ29weUZpZWxkID0gKHsgdmFsdWUsIGJ1dHRvblRleHQgPSAnY29weScsIGRpc2FibGVkID0gZmFsc2UsIHRhZ1RleHQsIGVycm9yVGV4dCwgdGltZW91dCA9IDIwMDAsIGxvYWRpbmcsIGJ1dHRvbklkLCB9KSA9PiB7XG4gICAgY29uc3QgW3Byb21wdE1zZ1Nob3duLCBzZXRQcm9tcHRNc2dTaG93bl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgbGV0IGN1cnJlbnRUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHNob3dQcm9tcHRNZXNzYWdlID0gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQoY3VycmVudFRpbWVvdXQpO1xuICAgICAgICBzZXRQcm9tcHRNc2dTaG93bih0cnVlKTtcbiAgICAgICAgY3VycmVudFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHNldFByb21wdE1zZ1Nob3duKGZhbHNlKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgfTtcbiAgICBjb25zdCBvbkNvcHlDbGlja2VkID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgeWllbGQgY29weVRvQ2xpcGJvYXJkKHZhbHVlKTtcbiAgICAgICAgICAgIHNob3dQcm9tcHRNZXNzYWdlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gKDxkaXYgY3NzPXtjc3MgYFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICBgfT5cbiAgICAgIDxTdHlsZWRJbnB1dFdyYXBwZXIgZGlzYWJsZWQ9e2Rpc2FibGVkfSBzaXplPXtJTlBVVF9TSVpFUy5TTX0gaW5wdXRTdGF0ZT17SU5QVVRfU1RBVEVTLmRlZmF1bHR9IGNzcz17Y3NzIGBcbiAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiA1cHg7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBjdXJzb3I6IHVuc2V0O1xuICAgICAgICBgfT5cbiAgICAgICAgeyhlcnJvclRleHQgfHwgdGFnVGV4dCkgJiYgIWxvYWRpbmcgJiYgKDxUYWdXcmFwcGVyPlxuICAgICAgICAgICAgPFRhZyBpZD1cImFwaVRva2VuRXhwaXJ5XCIgLy8gRm9yIFNlbGVuaXVtXG4gICAgIHZhcmlhbnQ9e2Vycm9yVGV4dCA/IFRBR19WQVJJQU5UUy5FUlJPUiA6IFRBR19WQVJJQU5UUy5JTkZPfT5cbiAgICAgICAgICAgICAge2Vycm9yVGV4dCB8fCB0YWdUZXh0fVxuICAgICAgICAgICAgPC9UYWc+XG4gICAgICAgICAgPC9UYWdXcmFwcGVyPil9XG4gICAgICAgIDxkaXYgY3NzPXtjc3MgYFxuICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgYH0+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgaWQ9XCJhcGlUb2tlblwiIC8vIEZvciBTZWxlbml1bVxuICAgICB2YXJpYW50PVwiZGVmYXVsdFwiPlxuICAgICAgICAgICAge3ZhbHVlfVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxCdXR0b24gaWQ9e2J1dHRvbklkfSBpc0FzeW5jIGRpc2FibGVkPXtkaXNhYmxlZH0gb25DbGljaz17b25Db3B5Q2xpY2tlZH0gY3NzPXtjc3MgYFxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIGB9PlxuICAgICAgICAgIHtwcm9tcHRNc2dTaG93biA/ICg8SWNvbiBuYW1lPVwiY2hlY2ttYXJrXCIgZmlsbD1cIndoaXRlXCIgaGVpZ2h0PVwiMTNweFwiLz4pIDogbG9hZGluZyA/ICg8SWNvbiBuYW1lPVwic3Bpbm5lclwiIGhlaWdodD1cIjEzcHhcIi8+KSA6IChidXR0b25UZXh0KX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L1N0eWxlZElucHV0V3JhcHBlcj5cbiAgICAgIHtwcm9tcHRNc2dTaG93biAmJiAoPFByb21wTWVzc2FnZT5cbiAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwibGFiZWxcIiBjb21wb25lbnQ9XCJkaXZcIiBjb2xvcj1cImFjY2VudDJfZGFya1wiPlxuICAgICAgICAgICAgQ29waWVkIVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPC9Qcm9tcE1lc3NhZ2U+KX1cbiAgICA8L2Rpdj4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IENsaXBib2FyZENvcHlGaWVsZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzeC5tYXAiXX0= */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref2 =
  process.env.NODE_ENV === 'production'
    ? {
        name: 'ap43zg-Uikit-ClipboardCopyField',
        styles:
          'height:15px;padding-left:5px;display:flex;cursor:unset;;label:Uikit-ClipboardCopyField;',
      }
    : {
        name: 'ap43zg-Uikit-ClipboardCopyField',
        styles:
          'height:15px;padding-left:5px;display:flex;cursor:unset;;label:Uikit-ClipboardCopyField;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrRStHIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgU3R5bGVkSW5wdXRXcmFwcGVyLCBJTlBVVF9TVEFURVMsIElOUFVUX1NJWkVTIH0gZnJvbSAndWlraXQvZm9ybS9jb21tb24nO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICd1aWtpdC9CdXR0b24nO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAndWlraXQvVHlwb2dyYXBoeSc7XG5pbXBvcnQgVGFnLCB7IFRBR19WQVJJQU5UUyB9IGZyb20gJ3Vpa2l0L1RhZyc7XG5pbXBvcnQgSWNvbiBmcm9tICd1aWtpdC9JY29uJztcbmNvbnN0IFRhZ1dyYXBwZXIgPSBzdHlsZWQoJ2RpdicpIGBcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XG5gO1xuY29uc3QgUHJvbXBNZXNzYWdlID0gc3R5bGVkKCdkaXYnKSBgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxMDAlO1xuICByaWdodDogMCU7XG4gIG1hcmdpbi1yaWdodDogNXB4O1xuYDtcbmNvbnN0IGNvcHlUb0NsaXBib2FyZCA9IChkYXRhKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICB5aWVsZCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChkYXRhKTtcbn0pO1xuY29uc3QgQ2xpcGJvYXJkQ29weUZpZWxkID0gKHsgdmFsdWUsIGJ1dHRvblRleHQgPSAnY29weScsIGRpc2FibGVkID0gZmFsc2UsIHRhZ1RleHQsIGVycm9yVGV4dCwgdGltZW91dCA9IDIwMDAsIGxvYWRpbmcsIGJ1dHRvbklkLCB9KSA9PiB7XG4gICAgY29uc3QgW3Byb21wdE1zZ1Nob3duLCBzZXRQcm9tcHRNc2dTaG93bl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgbGV0IGN1cnJlbnRUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHNob3dQcm9tcHRNZXNzYWdlID0gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQoY3VycmVudFRpbWVvdXQpO1xuICAgICAgICBzZXRQcm9tcHRNc2dTaG93bih0cnVlKTtcbiAgICAgICAgY3VycmVudFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHNldFByb21wdE1zZ1Nob3duKGZhbHNlKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgfTtcbiAgICBjb25zdCBvbkNvcHlDbGlja2VkID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgeWllbGQgY29weVRvQ2xpcGJvYXJkKHZhbHVlKTtcbiAgICAgICAgICAgIHNob3dQcm9tcHRNZXNzYWdlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gKDxkaXYgY3NzPXtjc3MgYFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICBgfT5cbiAgICAgIDxTdHlsZWRJbnB1dFdyYXBwZXIgZGlzYWJsZWQ9e2Rpc2FibGVkfSBzaXplPXtJTlBVVF9TSVpFUy5TTX0gaW5wdXRTdGF0ZT17SU5QVVRfU1RBVEVTLmRlZmF1bHR9IGNzcz17Y3NzIGBcbiAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiA1cHg7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBjdXJzb3I6IHVuc2V0O1xuICAgICAgICBgfT5cbiAgICAgICAgeyhlcnJvclRleHQgfHwgdGFnVGV4dCkgJiYgIWxvYWRpbmcgJiYgKDxUYWdXcmFwcGVyPlxuICAgICAgICAgICAgPFRhZyBpZD1cImFwaVRva2VuRXhwaXJ5XCIgLy8gRm9yIFNlbGVuaXVtXG4gICAgIHZhcmlhbnQ9e2Vycm9yVGV4dCA/IFRBR19WQVJJQU5UUy5FUlJPUiA6IFRBR19WQVJJQU5UUy5JTkZPfT5cbiAgICAgICAgICAgICAge2Vycm9yVGV4dCB8fCB0YWdUZXh0fVxuICAgICAgICAgICAgPC9UYWc+XG4gICAgICAgICAgPC9UYWdXcmFwcGVyPil9XG4gICAgICAgIDxkaXYgY3NzPXtjc3MgYFxuICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgYH0+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgaWQ9XCJhcGlUb2tlblwiIC8vIEZvciBTZWxlbml1bVxuICAgICB2YXJpYW50PVwiZGVmYXVsdFwiPlxuICAgICAgICAgICAge3ZhbHVlfVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxCdXR0b24gaWQ9e2J1dHRvbklkfSBpc0FzeW5jIGRpc2FibGVkPXtkaXNhYmxlZH0gb25DbGljaz17b25Db3B5Q2xpY2tlZH0gY3NzPXtjc3MgYFxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIGB9PlxuICAgICAgICAgIHtwcm9tcHRNc2dTaG93biA/ICg8SWNvbiBuYW1lPVwiY2hlY2ttYXJrXCIgZmlsbD1cIndoaXRlXCIgaGVpZ2h0PVwiMTNweFwiLz4pIDogbG9hZGluZyA/ICg8SWNvbiBuYW1lPVwic3Bpbm5lclwiIGhlaWdodD1cIjEzcHhcIi8+KSA6IChidXR0b25UZXh0KX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L1N0eWxlZElucHV0V3JhcHBlcj5cbiAgICAgIHtwcm9tcHRNc2dTaG93biAmJiAoPFByb21wTWVzc2FnZT5cbiAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwibGFiZWxcIiBjb21wb25lbnQ9XCJkaXZcIiBjb2xvcj1cImFjY2VudDJfZGFya1wiPlxuICAgICAgICAgICAgQ29waWVkIVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPC9Qcm9tcE1lc3NhZ2U+KX1cbiAgICA8L2Rpdj4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IENsaXBib2FyZENvcHlGaWVsZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzeC5tYXAiXX0= */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref3 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '1mhdn21-Uikit-ClipboardCopyField',
        styles:
          'flex:1;overflow:hidden;word-break:break-all;height:15px;;label:Uikit-ClipboardCopyField;',
      }
    : {
        name: '1mhdn21-Uikit-ClipboardCopyField',
        styles:
          'flex:1;overflow:hidden;word-break:break-all;height:15px;;label:Uikit-ClipboardCopyField;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4RXNCIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgU3R5bGVkSW5wdXRXcmFwcGVyLCBJTlBVVF9TVEFURVMsIElOUFVUX1NJWkVTIH0gZnJvbSAndWlraXQvZm9ybS9jb21tb24nO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICd1aWtpdC9CdXR0b24nO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAndWlraXQvVHlwb2dyYXBoeSc7XG5pbXBvcnQgVGFnLCB7IFRBR19WQVJJQU5UUyB9IGZyb20gJ3Vpa2l0L1RhZyc7XG5pbXBvcnQgSWNvbiBmcm9tICd1aWtpdC9JY29uJztcbmNvbnN0IFRhZ1dyYXBwZXIgPSBzdHlsZWQoJ2RpdicpIGBcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XG5gO1xuY29uc3QgUHJvbXBNZXNzYWdlID0gc3R5bGVkKCdkaXYnKSBgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxMDAlO1xuICByaWdodDogMCU7XG4gIG1hcmdpbi1yaWdodDogNXB4O1xuYDtcbmNvbnN0IGNvcHlUb0NsaXBib2FyZCA9IChkYXRhKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICB5aWVsZCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChkYXRhKTtcbn0pO1xuY29uc3QgQ2xpcGJvYXJkQ29weUZpZWxkID0gKHsgdmFsdWUsIGJ1dHRvblRleHQgPSAnY29weScsIGRpc2FibGVkID0gZmFsc2UsIHRhZ1RleHQsIGVycm9yVGV4dCwgdGltZW91dCA9IDIwMDAsIGxvYWRpbmcsIGJ1dHRvbklkLCB9KSA9PiB7XG4gICAgY29uc3QgW3Byb21wdE1zZ1Nob3duLCBzZXRQcm9tcHRNc2dTaG93bl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgbGV0IGN1cnJlbnRUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHNob3dQcm9tcHRNZXNzYWdlID0gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQoY3VycmVudFRpbWVvdXQpO1xuICAgICAgICBzZXRQcm9tcHRNc2dTaG93bih0cnVlKTtcbiAgICAgICAgY3VycmVudFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHNldFByb21wdE1zZ1Nob3duKGZhbHNlKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgfTtcbiAgICBjb25zdCBvbkNvcHlDbGlja2VkID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgeWllbGQgY29weVRvQ2xpcGJvYXJkKHZhbHVlKTtcbiAgICAgICAgICAgIHNob3dQcm9tcHRNZXNzYWdlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gKDxkaXYgY3NzPXtjc3MgYFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICBgfT5cbiAgICAgIDxTdHlsZWRJbnB1dFdyYXBwZXIgZGlzYWJsZWQ9e2Rpc2FibGVkfSBzaXplPXtJTlBVVF9TSVpFUy5TTX0gaW5wdXRTdGF0ZT17SU5QVVRfU1RBVEVTLmRlZmF1bHR9IGNzcz17Y3NzIGBcbiAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiA1cHg7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBjdXJzb3I6IHVuc2V0O1xuICAgICAgICBgfT5cbiAgICAgICAgeyhlcnJvclRleHQgfHwgdGFnVGV4dCkgJiYgIWxvYWRpbmcgJiYgKDxUYWdXcmFwcGVyPlxuICAgICAgICAgICAgPFRhZyBpZD1cImFwaVRva2VuRXhwaXJ5XCIgLy8gRm9yIFNlbGVuaXVtXG4gICAgIHZhcmlhbnQ9e2Vycm9yVGV4dCA/IFRBR19WQVJJQU5UUy5FUlJPUiA6IFRBR19WQVJJQU5UUy5JTkZPfT5cbiAgICAgICAgICAgICAge2Vycm9yVGV4dCB8fCB0YWdUZXh0fVxuICAgICAgICAgICAgPC9UYWc+XG4gICAgICAgICAgPC9UYWdXcmFwcGVyPil9XG4gICAgICAgIDxkaXYgY3NzPXtjc3MgYFxuICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgYH0+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgaWQ9XCJhcGlUb2tlblwiIC8vIEZvciBTZWxlbml1bVxuICAgICB2YXJpYW50PVwiZGVmYXVsdFwiPlxuICAgICAgICAgICAge3ZhbHVlfVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxCdXR0b24gaWQ9e2J1dHRvbklkfSBpc0FzeW5jIGRpc2FibGVkPXtkaXNhYmxlZH0gb25DbGljaz17b25Db3B5Q2xpY2tlZH0gY3NzPXtjc3MgYFxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIGB9PlxuICAgICAgICAgIHtwcm9tcHRNc2dTaG93biA/ICg8SWNvbiBuYW1lPVwiY2hlY2ttYXJrXCIgZmlsbD1cIndoaXRlXCIgaGVpZ2h0PVwiMTNweFwiLz4pIDogbG9hZGluZyA/ICg8SWNvbiBuYW1lPVwic3Bpbm5lclwiIGhlaWdodD1cIjEzcHhcIi8+KSA6IChidXR0b25UZXh0KX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L1N0eWxlZElucHV0V3JhcHBlcj5cbiAgICAgIHtwcm9tcHRNc2dTaG93biAmJiAoPFByb21wTWVzc2FnZT5cbiAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwibGFiZWxcIiBjb21wb25lbnQ9XCJkaXZcIiBjb2xvcj1cImFjY2VudDJfZGFya1wiPlxuICAgICAgICAgICAgQ29waWVkIVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPC9Qcm9tcE1lc3NhZ2U+KX1cbiAgICA8L2Rpdj4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IENsaXBib2FyZENvcHlGaWVsZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzeC5tYXAiXX0= */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref4 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '10sy6c4-Uikit-ClipboardCopyField',
        styles: 'border-radius:0px;position:relative;;label:Uikit-ClipboardCopyField;',
      }
    : {
        name: '10sy6c4-Uikit-ClipboardCopyField',
        styles: 'border-radius:0px;position:relative;;label:Uikit-ClipboardCopyField;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5RjJGIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgU3R5bGVkSW5wdXRXcmFwcGVyLCBJTlBVVF9TVEFURVMsIElOUFVUX1NJWkVTIH0gZnJvbSAndWlraXQvZm9ybS9jb21tb24nO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICd1aWtpdC9CdXR0b24nO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAndWlraXQvVHlwb2dyYXBoeSc7XG5pbXBvcnQgVGFnLCB7IFRBR19WQVJJQU5UUyB9IGZyb20gJ3Vpa2l0L1RhZyc7XG5pbXBvcnQgSWNvbiBmcm9tICd1aWtpdC9JY29uJztcbmNvbnN0IFRhZ1dyYXBwZXIgPSBzdHlsZWQoJ2RpdicpIGBcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XG5gO1xuY29uc3QgUHJvbXBNZXNzYWdlID0gc3R5bGVkKCdkaXYnKSBgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxMDAlO1xuICByaWdodDogMCU7XG4gIG1hcmdpbi1yaWdodDogNXB4O1xuYDtcbmNvbnN0IGNvcHlUb0NsaXBib2FyZCA9IChkYXRhKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICB5aWVsZCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChkYXRhKTtcbn0pO1xuY29uc3QgQ2xpcGJvYXJkQ29weUZpZWxkID0gKHsgdmFsdWUsIGJ1dHRvblRleHQgPSAnY29weScsIGRpc2FibGVkID0gZmFsc2UsIHRhZ1RleHQsIGVycm9yVGV4dCwgdGltZW91dCA9IDIwMDAsIGxvYWRpbmcsIGJ1dHRvbklkLCB9KSA9PiB7XG4gICAgY29uc3QgW3Byb21wdE1zZ1Nob3duLCBzZXRQcm9tcHRNc2dTaG93bl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgbGV0IGN1cnJlbnRUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHNob3dQcm9tcHRNZXNzYWdlID0gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQoY3VycmVudFRpbWVvdXQpO1xuICAgICAgICBzZXRQcm9tcHRNc2dTaG93bih0cnVlKTtcbiAgICAgICAgY3VycmVudFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHNldFByb21wdE1zZ1Nob3duKGZhbHNlKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgfTtcbiAgICBjb25zdCBvbkNvcHlDbGlja2VkID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgeWllbGQgY29weVRvQ2xpcGJvYXJkKHZhbHVlKTtcbiAgICAgICAgICAgIHNob3dQcm9tcHRNZXNzYWdlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gKDxkaXYgY3NzPXtjc3MgYFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICBgfT5cbiAgICAgIDxTdHlsZWRJbnB1dFdyYXBwZXIgZGlzYWJsZWQ9e2Rpc2FibGVkfSBzaXplPXtJTlBVVF9TSVpFUy5TTX0gaW5wdXRTdGF0ZT17SU5QVVRfU1RBVEVTLmRlZmF1bHR9IGNzcz17Y3NzIGBcbiAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiA1cHg7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBjdXJzb3I6IHVuc2V0O1xuICAgICAgICBgfT5cbiAgICAgICAgeyhlcnJvclRleHQgfHwgdGFnVGV4dCkgJiYgIWxvYWRpbmcgJiYgKDxUYWdXcmFwcGVyPlxuICAgICAgICAgICAgPFRhZyBpZD1cImFwaVRva2VuRXhwaXJ5XCIgLy8gRm9yIFNlbGVuaXVtXG4gICAgIHZhcmlhbnQ9e2Vycm9yVGV4dCA/IFRBR19WQVJJQU5UUy5FUlJPUiA6IFRBR19WQVJJQU5UUy5JTkZPfT5cbiAgICAgICAgICAgICAge2Vycm9yVGV4dCB8fCB0YWdUZXh0fVxuICAgICAgICAgICAgPC9UYWc+XG4gICAgICAgICAgPC9UYWdXcmFwcGVyPil9XG4gICAgICAgIDxkaXYgY3NzPXtjc3MgYFxuICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgYH0+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgaWQ9XCJhcGlUb2tlblwiIC8vIEZvciBTZWxlbml1bVxuICAgICB2YXJpYW50PVwiZGVmYXVsdFwiPlxuICAgICAgICAgICAge3ZhbHVlfVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxCdXR0b24gaWQ9e2J1dHRvbklkfSBpc0FzeW5jIGRpc2FibGVkPXtkaXNhYmxlZH0gb25DbGljaz17b25Db3B5Q2xpY2tlZH0gY3NzPXtjc3MgYFxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIGB9PlxuICAgICAgICAgIHtwcm9tcHRNc2dTaG93biA/ICg8SWNvbiBuYW1lPVwiY2hlY2ttYXJrXCIgZmlsbD1cIndoaXRlXCIgaGVpZ2h0PVwiMTNweFwiLz4pIDogbG9hZGluZyA/ICg8SWNvbiBuYW1lPVwic3Bpbm5lclwiIGhlaWdodD1cIjEzcHhcIi8+KSA6IChidXR0b25UZXh0KX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L1N0eWxlZElucHV0V3JhcHBlcj5cbiAgICAgIHtwcm9tcHRNc2dTaG93biAmJiAoPFByb21wTWVzc2FnZT5cbiAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwibGFiZWxcIiBjb21wb25lbnQ9XCJkaXZcIiBjb2xvcj1cImFjY2VudDJfZGFya1wiPlxuICAgICAgICAgICAgQ29waWVkIVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPC9Qcm9tcE1lc3NhZ2U+KX1cbiAgICA8L2Rpdj4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IENsaXBib2FyZENvcHlGaWVsZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzeC5tYXAiXX0= */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var ClipboardCopyField = function ClipboardCopyField(_ref5) {
  var value = _ref5.value,
    _ref5$buttonText = _ref5.buttonText,
    buttonText = _ref5$buttonText === void 0 ? 'copy' : _ref5$buttonText,
    _ref5$disabled = _ref5.disabled,
    disabled = _ref5$disabled === void 0 ? false : _ref5$disabled,
    tagText = _ref5.tagText,
    errorText = _ref5.errorText,
    _ref5$timeout = _ref5.timeout,
    timeout = _ref5$timeout === void 0 ? 2000 : _ref5$timeout,
    loading = _ref5.loading,
    buttonId = _ref5.buttonId;

  var _React$useState = _react['default'].useState(false),
    _React$useState2 = (0, _slicedToArray2['default'])(_React$useState, 2),
    promptMsgShown = _React$useState2[0],
    setPromptMsgShown = _React$useState2[1];

  var currentTimeout = undefined;

  var showPromptMessage = function showPromptMessage() {
    clearTimeout(currentTimeout);
    setPromptMsgShown(true);
    currentTimeout = setTimeout(function () {
      setPromptMsgShown(false);
    }, timeout);
  };

  var onCopyClicked = function onCopyClicked() {
    return __awaiter(
      void 0,
      void 0,
      void 0,
      /*#__PURE__*/ _regenerator['default'].mark(function _callee2() {
        return _regenerator['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch ((_context2.prev = _context2.next)) {
              case 0:
                if (!value) {
                  _context2.next = 4;
                  break;
                }

                _context2.next = 3;
                return copyToClipboard(value);

              case 3:
                showPromptMessage();

              case 4:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2);
      }),
    );
  };

  return (0, _core.jsx)(
    'div',
    {
      css: _ref,
    },
    (0, _core.jsx)(
      _common.StyledInputWrapper,
      {
        disabled: disabled,
        size: _common.INPUT_SIZES.SM,
        inputState: _common.INPUT_STATES['default'],
        css: _ref2,
      },
      (errorText || tagText) &&
        !loading &&
        (0, _core.jsx)(
          TagWrapper,
          null,
          (0, _core.jsx)(
            _Tag['default'],
            {
              id: 'apiTokenExpiry', // For Selenium
              variant: errorText ? _Tag.TAG_VARIANTS.ERROR : _Tag.TAG_VARIANTS.INFO,
            },
            errorText || tagText,
          ),
        ),
      (0, _core.jsx)(
        'div',
        {
          css: _ref3,
        },
        (0, _core.jsx)(
          _Typography['default'],
          {
            id: 'apiToken', // For Selenium
            variant: 'default',
          },
          value,
        ),
      ),
      (0, _core.jsx)(
        _Button['default'],
        {
          id: buttonId,
          isAsync: true,
          disabled: disabled,
          onClick: onCopyClicked,
          css: _ref4,
        },
        promptMsgShown
          ? (0, _core.jsx)(_Icon['default'], {
              name: 'checkmark',
              fill: 'white',
              height: '13px',
            })
          : loading
          ? (0, _core.jsx)(_Icon['default'], {
              name: 'spinner',
              height: '13px',
            })
          : buttonText,
      ),
    ),
    promptMsgShown &&
      (0, _core.jsx)(
        PrompMessage,
        null,
        (0, _core.jsx)(
          _Typography['default'],
          {
            variant: 'label',
            component: 'div',
            color: 'accent2_dark',
          },
          'Copied!',
        ),
      ),
  );
};

var _default = ClipboardCopyField;
exports['default'] = _default;
