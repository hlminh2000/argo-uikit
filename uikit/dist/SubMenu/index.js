'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports['default'] = exports.SubMenu = exports.MenuItem = void 0;

var _core = require('@emotion/core');

var _extends2 = _interopRequireDefault(require('@babel/runtime/helpers/extends'));

var _slicedToArray2 = _interopRequireDefault(require('@babel/runtime/helpers/slicedToArray'));

var _css2 = _interopRequireDefault(require('@emotion/css'));

var _styledBase = _interopRequireDefault(require('@emotion/styled-base'));

var _react = _interopRequireDefault(require('react'));

var _Icon = _interopRequireDefault(require('../Icon'));

var _Input = _interopRequireDefault(require('../form/Input'));

var _useTheme = _interopRequireDefault(require('../utils/useTheme'));

var _styledComponents = require('./styledComponents');

var __jsx = _react['default'].createElement;

function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}

/*
 * Copyright (c) 2020 The Ontario Institute for Cancer Research. All rights reserved
 *
 * This program and the accompanying materials are made available under the terms of
 * the GNU Affero General Public License v3.0. You should have received a copy of the
 * GNU Affero General Public License along with this program.
 *  If not, see <http://www.gnu.org/licenses/>.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

var _ref =
  process.env.NODE_ENV === 'production'
    ? {
        name: '1pm3cko-Uikit-MenuItemComponent',
        styles: 'padding-left:10px;;label:Uikit-MenuItemComponent;',
      }
    : {
        name: '1pm3cko-Uikit-MenuItemComponent',
        styles: 'padding-left:10px;;label:Uikit-MenuItemComponent;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0RTZHIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgY3NzIGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91dGlscy91c2VUaGVtZSc7XG5pbXBvcnQgeyBNZW51SXRlbUNvbnRhaW5lciwgSWNvbkNvbnRhaW5lciwgQ29udGVudENvbnRhaW5lciB9IGZyb20gJy4vc3R5bGVkQ29tcG9uZW50cyc7XG5jb25zdCBNZW51SXRlbUNvbXBvbmVudCA9IFJlYWN0LmZvcndhcmRSZWYoKF9hLCByZWYpID0+IHtcbiAgICB2YXIgeyBjbGFzc05hbWUgPSAnJywgc2VsZWN0ZWQ6IGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlLCBsZXZlbCwgY2hpbGRyZW4sIGNvbnRlbnQsIG9uQ2xpY2sgPSAoZSkgPT4geyB9LCBpY29uLCBub0NoZXZyb24gPSBmYWxzZSwgY29udGVudEFzID0gJ2J1dHRvbicsIGNoZXZyb25PbkxlZnRTaWRlID0gZmFsc2UsIGlzRmFjZXRWYXJpYW50ID0gZmFsc2UsIHNlYXJjaEJhciA9IGZhbHNlLCBzZWFyY2hTdGF0ZVBhcmFtcywgUmlnaHRTaWRlQ29tcCA9IG51bGwgfSA9IF9hLCBvdGhlclByb3BzID0gX19yZXN0KF9hLCBbXCJjbGFzc05hbWVcIiwgXCJzZWxlY3RlZFwiLCBcImxldmVsXCIsIFwiY2hpbGRyZW5cIiwgXCJjb250ZW50XCIsIFwib25DbGlja1wiLCBcImljb25cIiwgXCJub0NoZXZyb25cIiwgXCJjb250ZW50QXNcIiwgXCJjaGV2cm9uT25MZWZ0U2lkZVwiLCBcImlzRmFjZXRWYXJpYW50XCIsIFwic2VhcmNoQmFyXCIsIFwic2VhcmNoU3RhdGVQYXJhbXNcIiwgXCJSaWdodFNpZGVDb21wXCJdKTtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3QgW2xvY2FsU2VsZWN0ZWRTdGF0ZSwgc2V0TG9jYWxTZWxlY3RlZFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlKTtcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gdHlwZW9mIGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlID09PSAndW5kZWZpbmVkJyA/IGxvY2FsU2VsZWN0ZWRTdGF0ZSA6IGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlO1xuICAgIGNvbnN0IFtzZWFyY2hiYXJTdGF0ZSwgc2V0U2VhcmNoYmFyU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGNvbnRlbnRDb250YWluZXJSZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICBjb25zdCBjaGV2cm9uSWNvbiA9IGNoaWxkcmVuICYmICFub0NoZXZyb24gPyAoPEljb24gY3NzPXtjc3MgYFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAke2NoZXZyb25PbkxlZnRTaWRlID8gJzdweCcgOiAnMHB4J307XG4gICAgICAgICAgYH0gbmFtZT17aXNTZWxlY3RlZCA/ICdjaGV2cm9uX2Rvd24nIDogJ2NoZXZyb25fcmlnaHQnfSBmaWxsPXtpc1NlbGVjdGVkICYmICFpc0ZhY2V0VmFyaWFudCA/ICdzZWNvbmRhcnknIDogJ3ByaW1hcnknfS8+KSA6ICg8PjwvPik7XG4gICAgcmV0dXJuICg8TWVudUl0ZW1Db250YWluZXIgcmVmPXtyZWZ9IGxldmVsPXtsZXZlbH0gc2VsZWN0ZWQ9e2lzU2VsZWN0ZWR9IG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmIChjb250ZW50Q29udGFpbmVyUmVmLmN1cnJlbnQpXG4gICAgICAgICAgICBjb250ZW50Q29udGFpbmVyUmVmLmN1cnJlbnQuYmx1cigpO1xuICAgICAgICBzZXRMb2NhbFNlbGVjdGVkU3RhdGUoIWlzU2VsZWN0ZWQpO1xuICAgICAgICBvbkNsaWNrKGUpO1xuICAgIH19IGNsYXNzTmFtZT17YCR7Y2xhc3NOYW1lfSBNZW51SXRlbUNvbnRhaW5lcmB9IHsuLi5vdGhlclByb3BzfT5cbiAgICAgICAge2NvbnRlbnQgJiYgKDxkaXYgY2xhc3NOYW1lPXtgJHtjbGFzc05hbWV9IE1lbnVJdGVtQ29udGVudGB9PlxuICAgICAgICAgICAge2NoZXZyb25PbkxlZnRTaWRlICYmIGNoZXZyb25JY29ufVxuICAgICAgICAgICAgPENvbnRlbnRDb250YWluZXIgcmVmPXtjb250ZW50Q29udGFpbmVyUmVmfSBhcz17Y29udGVudEFzfT5cbiAgICAgICAgICAgICAge2ljb24gJiYgKDxJY29uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAge1JlYWN0LmNsb25lRWxlbWVudChpY29uLCB7XG4gICAgICAgIGZpbGw6IGlzU2VsZWN0ZWQgPyAnc2Vjb25kYXJ5X2RhcmsnIDogJ3ByaW1hcnknLFxuICAgIH0pfVxuICAgICAgICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj4pfVxuICAgICAgICAgICAgICB7Y29udGVudH1cbiAgICAgICAgICAgICAge1JpZ2h0U2lkZUNvbXAgJiYgIXNlYXJjaEJhciAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICAgICAgICAgICAgYH0+XG4gICAgICAgICAgICAgICAgICB7UmlnaHRTaWRlQ29tcH1cbiAgICAgICAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxuICAgICAgICAgICAgeyFjaGV2cm9uT25MZWZ0U2lkZSAmJiBjaGV2cm9uSWNvbn1cbiAgICAgICAgICAgIHtpc1NlbGVjdGVkICYmIHNlYXJjaEJhciAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBgfT5cbiAgICAgICAgICAgICAgICA8SWNvbiBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBzZXRTZWFyY2hiYXJTdGF0ZSghc2VhcmNoYmFyU3RhdGUpO1xuICAgIH19IG5hbWU9eydzZWFyY2gnfSBmaWxsPXtzZWFyY2hiYXJTdGF0ZSA/ICdzZWNvbmRhcnknIDogJ3ByaW1hcnlfMyd9IGhlaWdodD1cIjE2cHhcIiB3aWR0aD1cIjE2cHhcIiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgICAgICAgICAgICAgICAgIGB9Lz5cbiAgICAgICAgICAgICAgPC9kaXY+KX1cbiAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICB7aXNTZWxlY3RlZCAmJiBzZWFyY2hiYXJTdGF0ZSAmJiAoPE1lbnVJdGVtIGNsYXNzTmFtZT1cIkZhY2V0Q29udGVudFwiIGxldmVsPXsxfSBzZWxlY3RlZCBjb250ZW50QXM9XCJkaXZcIiBjb250ZW50PXs8SW5wdXQgc2l6ZT1cInNtXCIgYXJpYS1sYWJlbD1cInNlYXJjaC1mb3ItZmFjZXRzXCIgY3NzPXtjc3MgYFxuICAgICAgICAgICAgICAgICAgJHtjc3ModGhlbWUudHlwb2dyYXBoeS5kYXRhKX1cbiAgICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgYH0gcHJlc2V0PVwic2VhcmNoXCIgdmFsdWU9e3NlYXJjaFN0YXRlUGFyYW1zLnF1ZXJ5fSBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgc2VhcmNoU3RhdGVQYXJhbXMucXVlcnlTZXR0ZXIoZS50YXJnZXQudmFsdWUpO1xuICAgIH19IHNob3dDbGVhcj17dHJ1ZX0vPn0vPil9XG4gICAgICAgIHtpc1NlbGVjdGVkICYmIGNoaWxkcmVufVxuICAgICAgPC9NZW51SXRlbUNvbnRhaW5lcj4pO1xufSk7XG5jb25zdCBTdWJNZW51Q29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKSBgXG4gIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLndoaXRlfTtcbiAgJiA+ICR7TWVudUl0ZW1Db250YWluZXJ9IHtcbiAgICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5jb2xvcnMuZ3JleV8yfTtcbiAgfVxuYDtcbmV4cG9ydCBjb25zdCBNZW51SXRlbSA9IE1lbnVJdGVtQ29tcG9uZW50O1xuZXhwb3J0IGNvbnN0IFN1Yk1lbnUgPSAoKCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IFN1Yk1lbnVDb21wb25lbnQ7XG4gICAgb3V0cHV0Lkl0ZW0gPSBNZW51SXRlbTtcbiAgICByZXR1cm4gb3V0cHV0O1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IFN1Yk1lbnU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qc3gubWFwIl19 */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref2 =
  process.env.NODE_ENV === 'production'
    ? {
        name: 'varqph-Uikit-MenuItemComponent',
        styles: 'display:flex;align-items:center;;label:Uikit-MenuItemComponent;',
      }
    : {
        name: 'varqph-Uikit-MenuItemComponent',
        styles: 'display:flex;align-items:center;;label:Uikit-MenuItemComponent;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxRXVEIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgY3NzIGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91dGlscy91c2VUaGVtZSc7XG5pbXBvcnQgeyBNZW51SXRlbUNvbnRhaW5lciwgSWNvbkNvbnRhaW5lciwgQ29udGVudENvbnRhaW5lciB9IGZyb20gJy4vc3R5bGVkQ29tcG9uZW50cyc7XG5jb25zdCBNZW51SXRlbUNvbXBvbmVudCA9IFJlYWN0LmZvcndhcmRSZWYoKF9hLCByZWYpID0+IHtcbiAgICB2YXIgeyBjbGFzc05hbWUgPSAnJywgc2VsZWN0ZWQ6IGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlLCBsZXZlbCwgY2hpbGRyZW4sIGNvbnRlbnQsIG9uQ2xpY2sgPSAoZSkgPT4geyB9LCBpY29uLCBub0NoZXZyb24gPSBmYWxzZSwgY29udGVudEFzID0gJ2J1dHRvbicsIGNoZXZyb25PbkxlZnRTaWRlID0gZmFsc2UsIGlzRmFjZXRWYXJpYW50ID0gZmFsc2UsIHNlYXJjaEJhciA9IGZhbHNlLCBzZWFyY2hTdGF0ZVBhcmFtcywgUmlnaHRTaWRlQ29tcCA9IG51bGwgfSA9IF9hLCBvdGhlclByb3BzID0gX19yZXN0KF9hLCBbXCJjbGFzc05hbWVcIiwgXCJzZWxlY3RlZFwiLCBcImxldmVsXCIsIFwiY2hpbGRyZW5cIiwgXCJjb250ZW50XCIsIFwib25DbGlja1wiLCBcImljb25cIiwgXCJub0NoZXZyb25cIiwgXCJjb250ZW50QXNcIiwgXCJjaGV2cm9uT25MZWZ0U2lkZVwiLCBcImlzRmFjZXRWYXJpYW50XCIsIFwic2VhcmNoQmFyXCIsIFwic2VhcmNoU3RhdGVQYXJhbXNcIiwgXCJSaWdodFNpZGVDb21wXCJdKTtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3QgW2xvY2FsU2VsZWN0ZWRTdGF0ZSwgc2V0TG9jYWxTZWxlY3RlZFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlKTtcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gdHlwZW9mIGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlID09PSAndW5kZWZpbmVkJyA/IGxvY2FsU2VsZWN0ZWRTdGF0ZSA6IGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlO1xuICAgIGNvbnN0IFtzZWFyY2hiYXJTdGF0ZSwgc2V0U2VhcmNoYmFyU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGNvbnRlbnRDb250YWluZXJSZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICBjb25zdCBjaGV2cm9uSWNvbiA9IGNoaWxkcmVuICYmICFub0NoZXZyb24gPyAoPEljb24gY3NzPXtjc3MgYFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAke2NoZXZyb25PbkxlZnRTaWRlID8gJzdweCcgOiAnMHB4J307XG4gICAgICAgICAgYH0gbmFtZT17aXNTZWxlY3RlZCA/ICdjaGV2cm9uX2Rvd24nIDogJ2NoZXZyb25fcmlnaHQnfSBmaWxsPXtpc1NlbGVjdGVkICYmICFpc0ZhY2V0VmFyaWFudCA/ICdzZWNvbmRhcnknIDogJ3ByaW1hcnknfS8+KSA6ICg8PjwvPik7XG4gICAgcmV0dXJuICg8TWVudUl0ZW1Db250YWluZXIgcmVmPXtyZWZ9IGxldmVsPXtsZXZlbH0gc2VsZWN0ZWQ9e2lzU2VsZWN0ZWR9IG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmIChjb250ZW50Q29udGFpbmVyUmVmLmN1cnJlbnQpXG4gICAgICAgICAgICBjb250ZW50Q29udGFpbmVyUmVmLmN1cnJlbnQuYmx1cigpO1xuICAgICAgICBzZXRMb2NhbFNlbGVjdGVkU3RhdGUoIWlzU2VsZWN0ZWQpO1xuICAgICAgICBvbkNsaWNrKGUpO1xuICAgIH19IGNsYXNzTmFtZT17YCR7Y2xhc3NOYW1lfSBNZW51SXRlbUNvbnRhaW5lcmB9IHsuLi5vdGhlclByb3BzfT5cbiAgICAgICAge2NvbnRlbnQgJiYgKDxkaXYgY2xhc3NOYW1lPXtgJHtjbGFzc05hbWV9IE1lbnVJdGVtQ29udGVudGB9PlxuICAgICAgICAgICAge2NoZXZyb25PbkxlZnRTaWRlICYmIGNoZXZyb25JY29ufVxuICAgICAgICAgICAgPENvbnRlbnRDb250YWluZXIgcmVmPXtjb250ZW50Q29udGFpbmVyUmVmfSBhcz17Y29udGVudEFzfT5cbiAgICAgICAgICAgICAge2ljb24gJiYgKDxJY29uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAge1JlYWN0LmNsb25lRWxlbWVudChpY29uLCB7XG4gICAgICAgIGZpbGw6IGlzU2VsZWN0ZWQgPyAnc2Vjb25kYXJ5X2RhcmsnIDogJ3ByaW1hcnknLFxuICAgIH0pfVxuICAgICAgICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj4pfVxuICAgICAgICAgICAgICB7Y29udGVudH1cbiAgICAgICAgICAgICAge1JpZ2h0U2lkZUNvbXAgJiYgIXNlYXJjaEJhciAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICAgICAgICAgICAgYH0+XG4gICAgICAgICAgICAgICAgICB7UmlnaHRTaWRlQ29tcH1cbiAgICAgICAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxuICAgICAgICAgICAgeyFjaGV2cm9uT25MZWZ0U2lkZSAmJiBjaGV2cm9uSWNvbn1cbiAgICAgICAgICAgIHtpc1NlbGVjdGVkICYmIHNlYXJjaEJhciAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBgfT5cbiAgICAgICAgICAgICAgICA8SWNvbiBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBzZXRTZWFyY2hiYXJTdGF0ZSghc2VhcmNoYmFyU3RhdGUpO1xuICAgIH19IG5hbWU9eydzZWFyY2gnfSBmaWxsPXtzZWFyY2hiYXJTdGF0ZSA/ICdzZWNvbmRhcnknIDogJ3ByaW1hcnlfMyd9IGhlaWdodD1cIjE2cHhcIiB3aWR0aD1cIjE2cHhcIiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgICAgICAgICAgICAgICAgIGB9Lz5cbiAgICAgICAgICAgICAgPC9kaXY+KX1cbiAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICB7aXNTZWxlY3RlZCAmJiBzZWFyY2hiYXJTdGF0ZSAmJiAoPE1lbnVJdGVtIGNsYXNzTmFtZT1cIkZhY2V0Q29udGVudFwiIGxldmVsPXsxfSBzZWxlY3RlZCBjb250ZW50QXM9XCJkaXZcIiBjb250ZW50PXs8SW5wdXQgc2l6ZT1cInNtXCIgYXJpYS1sYWJlbD1cInNlYXJjaC1mb3ItZmFjZXRzXCIgY3NzPXtjc3MgYFxuICAgICAgICAgICAgICAgICAgJHtjc3ModGhlbWUudHlwb2dyYXBoeS5kYXRhKX1cbiAgICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgYH0gcHJlc2V0PVwic2VhcmNoXCIgdmFsdWU9e3NlYXJjaFN0YXRlUGFyYW1zLnF1ZXJ5fSBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgc2VhcmNoU3RhdGVQYXJhbXMucXVlcnlTZXR0ZXIoZS50YXJnZXQudmFsdWUpO1xuICAgIH19IHNob3dDbGVhcj17dHJ1ZX0vPn0vPil9XG4gICAgICAgIHtpc1NlbGVjdGVkICYmIGNoaWxkcmVufVxuICAgICAgPC9NZW51SXRlbUNvbnRhaW5lcj4pO1xufSk7XG5jb25zdCBTdWJNZW51Q29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKSBgXG4gIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLndoaXRlfTtcbiAgJiA+ICR7TWVudUl0ZW1Db250YWluZXJ9IHtcbiAgICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5jb2xvcnMuZ3JleV8yfTtcbiAgfVxuYDtcbmV4cG9ydCBjb25zdCBNZW51SXRlbSA9IE1lbnVJdGVtQ29tcG9uZW50O1xuZXhwb3J0IGNvbnN0IFN1Yk1lbnUgPSAoKCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IFN1Yk1lbnVDb21wb25lbnQ7XG4gICAgb3V0cHV0Lkl0ZW0gPSBNZW51SXRlbTtcbiAgICByZXR1cm4gb3V0cHV0O1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IFN1Yk1lbnU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qc3gubWFwIl19 */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref3 =
  process.env.NODE_ENV === 'production'
    ? {
        name: 'bud66w-Uikit-MenuItemComponent',
        styles: 'margin-left:auto;;label:Uikit-MenuItemComponent;',
      }
    : {
        name: 'bud66w-Uikit-MenuItemComponent',
        styles: 'margin-left:auto;;label:Uikit-MenuItemComponent;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4RDZEIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgY3NzIGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91dGlscy91c2VUaGVtZSc7XG5pbXBvcnQgeyBNZW51SXRlbUNvbnRhaW5lciwgSWNvbkNvbnRhaW5lciwgQ29udGVudENvbnRhaW5lciB9IGZyb20gJy4vc3R5bGVkQ29tcG9uZW50cyc7XG5jb25zdCBNZW51SXRlbUNvbXBvbmVudCA9IFJlYWN0LmZvcndhcmRSZWYoKF9hLCByZWYpID0+IHtcbiAgICB2YXIgeyBjbGFzc05hbWUgPSAnJywgc2VsZWN0ZWQ6IGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlLCBsZXZlbCwgY2hpbGRyZW4sIGNvbnRlbnQsIG9uQ2xpY2sgPSAoZSkgPT4geyB9LCBpY29uLCBub0NoZXZyb24gPSBmYWxzZSwgY29udGVudEFzID0gJ2J1dHRvbicsIGNoZXZyb25PbkxlZnRTaWRlID0gZmFsc2UsIGlzRmFjZXRWYXJpYW50ID0gZmFsc2UsIHNlYXJjaEJhciA9IGZhbHNlLCBzZWFyY2hTdGF0ZVBhcmFtcywgUmlnaHRTaWRlQ29tcCA9IG51bGwgfSA9IF9hLCBvdGhlclByb3BzID0gX19yZXN0KF9hLCBbXCJjbGFzc05hbWVcIiwgXCJzZWxlY3RlZFwiLCBcImxldmVsXCIsIFwiY2hpbGRyZW5cIiwgXCJjb250ZW50XCIsIFwib25DbGlja1wiLCBcImljb25cIiwgXCJub0NoZXZyb25cIiwgXCJjb250ZW50QXNcIiwgXCJjaGV2cm9uT25MZWZ0U2lkZVwiLCBcImlzRmFjZXRWYXJpYW50XCIsIFwic2VhcmNoQmFyXCIsIFwic2VhcmNoU3RhdGVQYXJhbXNcIiwgXCJSaWdodFNpZGVDb21wXCJdKTtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3QgW2xvY2FsU2VsZWN0ZWRTdGF0ZSwgc2V0TG9jYWxTZWxlY3RlZFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlKTtcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gdHlwZW9mIGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlID09PSAndW5kZWZpbmVkJyA/IGxvY2FsU2VsZWN0ZWRTdGF0ZSA6IGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlO1xuICAgIGNvbnN0IFtzZWFyY2hiYXJTdGF0ZSwgc2V0U2VhcmNoYmFyU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGNvbnRlbnRDb250YWluZXJSZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICBjb25zdCBjaGV2cm9uSWNvbiA9IGNoaWxkcmVuICYmICFub0NoZXZyb24gPyAoPEljb24gY3NzPXtjc3MgYFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAke2NoZXZyb25PbkxlZnRTaWRlID8gJzdweCcgOiAnMHB4J307XG4gICAgICAgICAgYH0gbmFtZT17aXNTZWxlY3RlZCA/ICdjaGV2cm9uX2Rvd24nIDogJ2NoZXZyb25fcmlnaHQnfSBmaWxsPXtpc1NlbGVjdGVkICYmICFpc0ZhY2V0VmFyaWFudCA/ICdzZWNvbmRhcnknIDogJ3ByaW1hcnknfS8+KSA6ICg8PjwvPik7XG4gICAgcmV0dXJuICg8TWVudUl0ZW1Db250YWluZXIgcmVmPXtyZWZ9IGxldmVsPXtsZXZlbH0gc2VsZWN0ZWQ9e2lzU2VsZWN0ZWR9IG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmIChjb250ZW50Q29udGFpbmVyUmVmLmN1cnJlbnQpXG4gICAgICAgICAgICBjb250ZW50Q29udGFpbmVyUmVmLmN1cnJlbnQuYmx1cigpO1xuICAgICAgICBzZXRMb2NhbFNlbGVjdGVkU3RhdGUoIWlzU2VsZWN0ZWQpO1xuICAgICAgICBvbkNsaWNrKGUpO1xuICAgIH19IGNsYXNzTmFtZT17YCR7Y2xhc3NOYW1lfSBNZW51SXRlbUNvbnRhaW5lcmB9IHsuLi5vdGhlclByb3BzfT5cbiAgICAgICAge2NvbnRlbnQgJiYgKDxkaXYgY2xhc3NOYW1lPXtgJHtjbGFzc05hbWV9IE1lbnVJdGVtQ29udGVudGB9PlxuICAgICAgICAgICAge2NoZXZyb25PbkxlZnRTaWRlICYmIGNoZXZyb25JY29ufVxuICAgICAgICAgICAgPENvbnRlbnRDb250YWluZXIgcmVmPXtjb250ZW50Q29udGFpbmVyUmVmfSBhcz17Y29udGVudEFzfT5cbiAgICAgICAgICAgICAge2ljb24gJiYgKDxJY29uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAge1JlYWN0LmNsb25lRWxlbWVudChpY29uLCB7XG4gICAgICAgIGZpbGw6IGlzU2VsZWN0ZWQgPyAnc2Vjb25kYXJ5X2RhcmsnIDogJ3ByaW1hcnknLFxuICAgIH0pfVxuICAgICAgICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj4pfVxuICAgICAgICAgICAgICB7Y29udGVudH1cbiAgICAgICAgICAgICAge1JpZ2h0U2lkZUNvbXAgJiYgIXNlYXJjaEJhciAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICAgICAgICAgICAgYH0+XG4gICAgICAgICAgICAgICAgICB7UmlnaHRTaWRlQ29tcH1cbiAgICAgICAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxuICAgICAgICAgICAgeyFjaGV2cm9uT25MZWZ0U2lkZSAmJiBjaGV2cm9uSWNvbn1cbiAgICAgICAgICAgIHtpc1NlbGVjdGVkICYmIHNlYXJjaEJhciAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBgfT5cbiAgICAgICAgICAgICAgICA8SWNvbiBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBzZXRTZWFyY2hiYXJTdGF0ZSghc2VhcmNoYmFyU3RhdGUpO1xuICAgIH19IG5hbWU9eydzZWFyY2gnfSBmaWxsPXtzZWFyY2hiYXJTdGF0ZSA/ICdzZWNvbmRhcnknIDogJ3ByaW1hcnlfMyd9IGhlaWdodD1cIjE2cHhcIiB3aWR0aD1cIjE2cHhcIiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgICAgICAgICAgICAgICAgIGB9Lz5cbiAgICAgICAgICAgICAgPC9kaXY+KX1cbiAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICB7aXNTZWxlY3RlZCAmJiBzZWFyY2hiYXJTdGF0ZSAmJiAoPE1lbnVJdGVtIGNsYXNzTmFtZT1cIkZhY2V0Q29udGVudFwiIGxldmVsPXsxfSBzZWxlY3RlZCBjb250ZW50QXM9XCJkaXZcIiBjb250ZW50PXs8SW5wdXQgc2l6ZT1cInNtXCIgYXJpYS1sYWJlbD1cInNlYXJjaC1mb3ItZmFjZXRzXCIgY3NzPXtjc3MgYFxuICAgICAgICAgICAgICAgICAgJHtjc3ModGhlbWUudHlwb2dyYXBoeS5kYXRhKX1cbiAgICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgYH0gcHJlc2V0PVwic2VhcmNoXCIgdmFsdWU9e3NlYXJjaFN0YXRlUGFyYW1zLnF1ZXJ5fSBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgc2VhcmNoU3RhdGVQYXJhbXMucXVlcnlTZXR0ZXIoZS50YXJnZXQudmFsdWUpO1xuICAgIH19IHNob3dDbGVhcj17dHJ1ZX0vPn0vPil9XG4gICAgICAgIHtpc1NlbGVjdGVkICYmIGNoaWxkcmVufVxuICAgICAgPC9NZW51SXRlbUNvbnRhaW5lcj4pO1xufSk7XG5jb25zdCBTdWJNZW51Q29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKSBgXG4gIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLndoaXRlfTtcbiAgJiA+ICR7TWVudUl0ZW1Db250YWluZXJ9IHtcbiAgICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5jb2xvcnMuZ3JleV8yfTtcbiAgfVxuYDtcbmV4cG9ydCBjb25zdCBNZW51SXRlbSA9IE1lbnVJdGVtQ29tcG9uZW50O1xuZXhwb3J0IGNvbnN0IFN1Yk1lbnUgPSAoKCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IFN1Yk1lbnVDb21wb25lbnQ7XG4gICAgb3V0cHV0Lkl0ZW0gPSBNZW51SXRlbTtcbiAgICByZXR1cm4gb3V0cHV0O1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IFN1Yk1lbnU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qc3gubWFwIl19 */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var MenuItemComponent = /*#__PURE__*/ _react['default'].forwardRef(function (_a, ref) {
  var _a$className = _a.className,
    className = _a$className === void 0 ? '' : _a$className,
    controlledSelectedState = _a.selected,
    level = _a.level,
    children = _a.children,
    content = _a.content,
    _a$onClick = _a.onClick,
    _onClick = _a$onClick === void 0 ? function (e) {} : _a$onClick,
    icon = _a.icon,
    _a$noChevron = _a.noChevron,
    noChevron = _a$noChevron === void 0 ? false : _a$noChevron,
    _a$contentAs = _a.contentAs,
    contentAs = _a$contentAs === void 0 ? 'button' : _a$contentAs,
    _a$chevronOnLeftSide = _a.chevronOnLeftSide,
    chevronOnLeftSide = _a$chevronOnLeftSide === void 0 ? false : _a$chevronOnLeftSide,
    _a$isFacetVariant = _a.isFacetVariant,
    isFacetVariant = _a$isFacetVariant === void 0 ? false : _a$isFacetVariant,
    _a$searchBar = _a.searchBar,
    searchBar = _a$searchBar === void 0 ? false : _a$searchBar,
    searchStateParams = _a.searchStateParams,
    _a$RightSideComp = _a.RightSideComp,
    RightSideComp = _a$RightSideComp === void 0 ? null : _a$RightSideComp,
    otherProps = __rest(_a, [
      'className',
      'selected',
      'level',
      'children',
      'content',
      'onClick',
      'icon',
      'noChevron',
      'contentAs',
      'chevronOnLeftSide',
      'isFacetVariant',
      'searchBar',
      'searchStateParams',
      'RightSideComp',
    ]);

  var theme = (0, _useTheme['default'])();

  var _React$useState = _react['default'].useState(controlledSelectedState),
    _React$useState2 = (0, _slicedToArray2['default'])(_React$useState, 2),
    localSelectedState = _React$useState2[0],
    setLocalSelectedState = _React$useState2[1];

  var isSelected =
    typeof controlledSelectedState === 'undefined' ? localSelectedState : controlledSelectedState;

  var _React$useState3 = _react['default'].useState(false),
    _React$useState4 = (0, _slicedToArray2['default'])(_React$useState3, 2),
    searchbarState = _React$useState4[0],
    setSearchbarState = _React$useState4[1];

  var contentContainerRef = /*#__PURE__*/ _react['default'].createRef();

  var chevronIcon =
    children && !noChevron
      ? (0, _core.jsx)(_Icon['default'], {
          css: /*#__PURE__*/ (0, _css2['default'])(
            'margin-right:',
            chevronOnLeftSide ? '7px' : '0px',
            ';;label:Uikit-chevronIcon;' +
              (process.env.NODE_ENV === 'production'
                ? ''
                : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyQ2lFIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgY3NzIGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91dGlscy91c2VUaGVtZSc7XG5pbXBvcnQgeyBNZW51SXRlbUNvbnRhaW5lciwgSWNvbkNvbnRhaW5lciwgQ29udGVudENvbnRhaW5lciB9IGZyb20gJy4vc3R5bGVkQ29tcG9uZW50cyc7XG5jb25zdCBNZW51SXRlbUNvbXBvbmVudCA9IFJlYWN0LmZvcndhcmRSZWYoKF9hLCByZWYpID0+IHtcbiAgICB2YXIgeyBjbGFzc05hbWUgPSAnJywgc2VsZWN0ZWQ6IGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlLCBsZXZlbCwgY2hpbGRyZW4sIGNvbnRlbnQsIG9uQ2xpY2sgPSAoZSkgPT4geyB9LCBpY29uLCBub0NoZXZyb24gPSBmYWxzZSwgY29udGVudEFzID0gJ2J1dHRvbicsIGNoZXZyb25PbkxlZnRTaWRlID0gZmFsc2UsIGlzRmFjZXRWYXJpYW50ID0gZmFsc2UsIHNlYXJjaEJhciA9IGZhbHNlLCBzZWFyY2hTdGF0ZVBhcmFtcywgUmlnaHRTaWRlQ29tcCA9IG51bGwgfSA9IF9hLCBvdGhlclByb3BzID0gX19yZXN0KF9hLCBbXCJjbGFzc05hbWVcIiwgXCJzZWxlY3RlZFwiLCBcImxldmVsXCIsIFwiY2hpbGRyZW5cIiwgXCJjb250ZW50XCIsIFwib25DbGlja1wiLCBcImljb25cIiwgXCJub0NoZXZyb25cIiwgXCJjb250ZW50QXNcIiwgXCJjaGV2cm9uT25MZWZ0U2lkZVwiLCBcImlzRmFjZXRWYXJpYW50XCIsIFwic2VhcmNoQmFyXCIsIFwic2VhcmNoU3RhdGVQYXJhbXNcIiwgXCJSaWdodFNpZGVDb21wXCJdKTtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3QgW2xvY2FsU2VsZWN0ZWRTdGF0ZSwgc2V0TG9jYWxTZWxlY3RlZFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlKTtcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gdHlwZW9mIGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlID09PSAndW5kZWZpbmVkJyA/IGxvY2FsU2VsZWN0ZWRTdGF0ZSA6IGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlO1xuICAgIGNvbnN0IFtzZWFyY2hiYXJTdGF0ZSwgc2V0U2VhcmNoYmFyU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGNvbnRlbnRDb250YWluZXJSZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICBjb25zdCBjaGV2cm9uSWNvbiA9IGNoaWxkcmVuICYmICFub0NoZXZyb24gPyAoPEljb24gY3NzPXtjc3MgYFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAke2NoZXZyb25PbkxlZnRTaWRlID8gJzdweCcgOiAnMHB4J307XG4gICAgICAgICAgYH0gbmFtZT17aXNTZWxlY3RlZCA/ICdjaGV2cm9uX2Rvd24nIDogJ2NoZXZyb25fcmlnaHQnfSBmaWxsPXtpc1NlbGVjdGVkICYmICFpc0ZhY2V0VmFyaWFudCA/ICdzZWNvbmRhcnknIDogJ3ByaW1hcnknfS8+KSA6ICg8PjwvPik7XG4gICAgcmV0dXJuICg8TWVudUl0ZW1Db250YWluZXIgcmVmPXtyZWZ9IGxldmVsPXtsZXZlbH0gc2VsZWN0ZWQ9e2lzU2VsZWN0ZWR9IG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmIChjb250ZW50Q29udGFpbmVyUmVmLmN1cnJlbnQpXG4gICAgICAgICAgICBjb250ZW50Q29udGFpbmVyUmVmLmN1cnJlbnQuYmx1cigpO1xuICAgICAgICBzZXRMb2NhbFNlbGVjdGVkU3RhdGUoIWlzU2VsZWN0ZWQpO1xuICAgICAgICBvbkNsaWNrKGUpO1xuICAgIH19IGNsYXNzTmFtZT17YCR7Y2xhc3NOYW1lfSBNZW51SXRlbUNvbnRhaW5lcmB9IHsuLi5vdGhlclByb3BzfT5cbiAgICAgICAge2NvbnRlbnQgJiYgKDxkaXYgY2xhc3NOYW1lPXtgJHtjbGFzc05hbWV9IE1lbnVJdGVtQ29udGVudGB9PlxuICAgICAgICAgICAge2NoZXZyb25PbkxlZnRTaWRlICYmIGNoZXZyb25JY29ufVxuICAgICAgICAgICAgPENvbnRlbnRDb250YWluZXIgcmVmPXtjb250ZW50Q29udGFpbmVyUmVmfSBhcz17Y29udGVudEFzfT5cbiAgICAgICAgICAgICAge2ljb24gJiYgKDxJY29uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAge1JlYWN0LmNsb25lRWxlbWVudChpY29uLCB7XG4gICAgICAgIGZpbGw6IGlzU2VsZWN0ZWQgPyAnc2Vjb25kYXJ5X2RhcmsnIDogJ3ByaW1hcnknLFxuICAgIH0pfVxuICAgICAgICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj4pfVxuICAgICAgICAgICAgICB7Y29udGVudH1cbiAgICAgICAgICAgICAge1JpZ2h0U2lkZUNvbXAgJiYgIXNlYXJjaEJhciAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICAgICAgICAgICAgYH0+XG4gICAgICAgICAgICAgICAgICB7UmlnaHRTaWRlQ29tcH1cbiAgICAgICAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxuICAgICAgICAgICAgeyFjaGV2cm9uT25MZWZ0U2lkZSAmJiBjaGV2cm9uSWNvbn1cbiAgICAgICAgICAgIHtpc1NlbGVjdGVkICYmIHNlYXJjaEJhciAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBgfT5cbiAgICAgICAgICAgICAgICA8SWNvbiBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBzZXRTZWFyY2hiYXJTdGF0ZSghc2VhcmNoYmFyU3RhdGUpO1xuICAgIH19IG5hbWU9eydzZWFyY2gnfSBmaWxsPXtzZWFyY2hiYXJTdGF0ZSA/ICdzZWNvbmRhcnknIDogJ3ByaW1hcnlfMyd9IGhlaWdodD1cIjE2cHhcIiB3aWR0aD1cIjE2cHhcIiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgICAgICAgICAgICAgICAgIGB9Lz5cbiAgICAgICAgICAgICAgPC9kaXY+KX1cbiAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICB7aXNTZWxlY3RlZCAmJiBzZWFyY2hiYXJTdGF0ZSAmJiAoPE1lbnVJdGVtIGNsYXNzTmFtZT1cIkZhY2V0Q29udGVudFwiIGxldmVsPXsxfSBzZWxlY3RlZCBjb250ZW50QXM9XCJkaXZcIiBjb250ZW50PXs8SW5wdXQgc2l6ZT1cInNtXCIgYXJpYS1sYWJlbD1cInNlYXJjaC1mb3ItZmFjZXRzXCIgY3NzPXtjc3MgYFxuICAgICAgICAgICAgICAgICAgJHtjc3ModGhlbWUudHlwb2dyYXBoeS5kYXRhKX1cbiAgICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgYH0gcHJlc2V0PVwic2VhcmNoXCIgdmFsdWU9e3NlYXJjaFN0YXRlUGFyYW1zLnF1ZXJ5fSBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgc2VhcmNoU3RhdGVQYXJhbXMucXVlcnlTZXR0ZXIoZS50YXJnZXQudmFsdWUpO1xuICAgIH19IHNob3dDbGVhcj17dHJ1ZX0vPn0vPil9XG4gICAgICAgIHtpc1NlbGVjdGVkICYmIGNoaWxkcmVufVxuICAgICAgPC9NZW51SXRlbUNvbnRhaW5lcj4pO1xufSk7XG5jb25zdCBTdWJNZW51Q29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKSBgXG4gIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLndoaXRlfTtcbiAgJiA+ICR7TWVudUl0ZW1Db250YWluZXJ9IHtcbiAgICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5jb2xvcnMuZ3JleV8yfTtcbiAgfVxuYDtcbmV4cG9ydCBjb25zdCBNZW51SXRlbSA9IE1lbnVJdGVtQ29tcG9uZW50O1xuZXhwb3J0IGNvbnN0IFN1Yk1lbnUgPSAoKCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IFN1Yk1lbnVDb21wb25lbnQ7XG4gICAgb3V0cHV0Lkl0ZW0gPSBNZW51SXRlbTtcbiAgICByZXR1cm4gb3V0cHV0O1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IFN1Yk1lbnU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qc3gubWFwIl19 */'),
          ),
          name: isSelected ? 'chevron_down' : 'chevron_right',
          fill: isSelected && !isFacetVariant ? 'secondary' : 'primary',
        })
      : (0, _core.jsx)(_react['default'].Fragment, null);
  return (0, _core.jsx)(
    _styledComponents.MenuItemContainer,
    (0, _extends2['default'])(
      {
        ref: ref,
        level: level,
        selected: isSelected,
        onClick: function onClick(e) {
          e.stopPropagation();
          if (contentContainerRef.current) contentContainerRef.current.blur();
          setLocalSelectedState(!isSelected);

          _onClick(e);
        },
        className: ''.concat(className, ' MenuItemContainer'),
      },
      otherProps,
    ),
    content &&
      (0, _core.jsx)(
        'div',
        {
          className: ''.concat(className, ' MenuItemContent'),
        },
        chevronOnLeftSide && chevronIcon,
        (0, _core.jsx)(
          _styledComponents.ContentContainer,
          {
            ref: contentContainerRef,
            as: contentAs,
          },
          icon &&
            (0, _core.jsx)(
              _styledComponents.IconContainer,
              null,
              /*#__PURE__*/ _react['default'].cloneElement(icon, {
                fill: isSelected ? 'secondary_dark' : 'primary',
              }),
            ),
          content,
          RightSideComp &&
            !searchBar &&
            (0, _core.jsx)(
              'div',
              {
                css: _ref3,
              },
              RightSideComp,
            ),
        ),
        !chevronOnLeftSide && chevronIcon,
        isSelected &&
          searchBar &&
          (0, _core.jsx)(
            'div',
            {
              css: _ref2,
            },
            (0, _core.jsx)(_Icon['default'], {
              onClick: function onClick(e) {
                e.stopPropagation();
                setSearchbarState(!searchbarState);
              },
              name: 'search',
              fill: searchbarState ? 'secondary' : 'primary_3',
              height: '16px',
              width: '16px',
              css: _ref,
            }),
          ),
      ),
    isSelected &&
      searchbarState &&
      (0, _core.jsx)(MenuItem, {
        className: 'FacetContent',
        level: 1,
        selected: true,
        contentAs: 'div',
        content: (0, _core.jsx)(_Input['default'], {
          size: 'sm',
          'aria-label': 'search-for-facets',
          css: /*#__PURE__*/ (0, _css2['default'])(
            /*#__PURE__*/ (0, _css2['default'])(
              theme.typography.data,
              ';label:Uikit-MenuItemComponent;' +
                (process.env.NODE_ENV === 'production'
                  ? ''
                  : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrRm9CIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgY3NzIGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91dGlscy91c2VUaGVtZSc7XG5pbXBvcnQgeyBNZW51SXRlbUNvbnRhaW5lciwgSWNvbkNvbnRhaW5lciwgQ29udGVudENvbnRhaW5lciB9IGZyb20gJy4vc3R5bGVkQ29tcG9uZW50cyc7XG5jb25zdCBNZW51SXRlbUNvbXBvbmVudCA9IFJlYWN0LmZvcndhcmRSZWYoKF9hLCByZWYpID0+IHtcbiAgICB2YXIgeyBjbGFzc05hbWUgPSAnJywgc2VsZWN0ZWQ6IGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlLCBsZXZlbCwgY2hpbGRyZW4sIGNvbnRlbnQsIG9uQ2xpY2sgPSAoZSkgPT4geyB9LCBpY29uLCBub0NoZXZyb24gPSBmYWxzZSwgY29udGVudEFzID0gJ2J1dHRvbicsIGNoZXZyb25PbkxlZnRTaWRlID0gZmFsc2UsIGlzRmFjZXRWYXJpYW50ID0gZmFsc2UsIHNlYXJjaEJhciA9IGZhbHNlLCBzZWFyY2hTdGF0ZVBhcmFtcywgUmlnaHRTaWRlQ29tcCA9IG51bGwgfSA9IF9hLCBvdGhlclByb3BzID0gX19yZXN0KF9hLCBbXCJjbGFzc05hbWVcIiwgXCJzZWxlY3RlZFwiLCBcImxldmVsXCIsIFwiY2hpbGRyZW5cIiwgXCJjb250ZW50XCIsIFwib25DbGlja1wiLCBcImljb25cIiwgXCJub0NoZXZyb25cIiwgXCJjb250ZW50QXNcIiwgXCJjaGV2cm9uT25MZWZ0U2lkZVwiLCBcImlzRmFjZXRWYXJpYW50XCIsIFwic2VhcmNoQmFyXCIsIFwic2VhcmNoU3RhdGVQYXJhbXNcIiwgXCJSaWdodFNpZGVDb21wXCJdKTtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3QgW2xvY2FsU2VsZWN0ZWRTdGF0ZSwgc2V0TG9jYWxTZWxlY3RlZFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlKTtcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gdHlwZW9mIGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlID09PSAndW5kZWZpbmVkJyA/IGxvY2FsU2VsZWN0ZWRTdGF0ZSA6IGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlO1xuICAgIGNvbnN0IFtzZWFyY2hiYXJTdGF0ZSwgc2V0U2VhcmNoYmFyU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGNvbnRlbnRDb250YWluZXJSZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICBjb25zdCBjaGV2cm9uSWNvbiA9IGNoaWxkcmVuICYmICFub0NoZXZyb24gPyAoPEljb24gY3NzPXtjc3MgYFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAke2NoZXZyb25PbkxlZnRTaWRlID8gJzdweCcgOiAnMHB4J307XG4gICAgICAgICAgYH0gbmFtZT17aXNTZWxlY3RlZCA/ICdjaGV2cm9uX2Rvd24nIDogJ2NoZXZyb25fcmlnaHQnfSBmaWxsPXtpc1NlbGVjdGVkICYmICFpc0ZhY2V0VmFyaWFudCA/ICdzZWNvbmRhcnknIDogJ3ByaW1hcnknfS8+KSA6ICg8PjwvPik7XG4gICAgcmV0dXJuICg8TWVudUl0ZW1Db250YWluZXIgcmVmPXtyZWZ9IGxldmVsPXtsZXZlbH0gc2VsZWN0ZWQ9e2lzU2VsZWN0ZWR9IG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmIChjb250ZW50Q29udGFpbmVyUmVmLmN1cnJlbnQpXG4gICAgICAgICAgICBjb250ZW50Q29udGFpbmVyUmVmLmN1cnJlbnQuYmx1cigpO1xuICAgICAgICBzZXRMb2NhbFNlbGVjdGVkU3RhdGUoIWlzU2VsZWN0ZWQpO1xuICAgICAgICBvbkNsaWNrKGUpO1xuICAgIH19IGNsYXNzTmFtZT17YCR7Y2xhc3NOYW1lfSBNZW51SXRlbUNvbnRhaW5lcmB9IHsuLi5vdGhlclByb3BzfT5cbiAgICAgICAge2NvbnRlbnQgJiYgKDxkaXYgY2xhc3NOYW1lPXtgJHtjbGFzc05hbWV9IE1lbnVJdGVtQ29udGVudGB9PlxuICAgICAgICAgICAge2NoZXZyb25PbkxlZnRTaWRlICYmIGNoZXZyb25JY29ufVxuICAgICAgICAgICAgPENvbnRlbnRDb250YWluZXIgcmVmPXtjb250ZW50Q29udGFpbmVyUmVmfSBhcz17Y29udGVudEFzfT5cbiAgICAgICAgICAgICAge2ljb24gJiYgKDxJY29uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAge1JlYWN0LmNsb25lRWxlbWVudChpY29uLCB7XG4gICAgICAgIGZpbGw6IGlzU2VsZWN0ZWQgPyAnc2Vjb25kYXJ5X2RhcmsnIDogJ3ByaW1hcnknLFxuICAgIH0pfVxuICAgICAgICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj4pfVxuICAgICAgICAgICAgICB7Y29udGVudH1cbiAgICAgICAgICAgICAge1JpZ2h0U2lkZUNvbXAgJiYgIXNlYXJjaEJhciAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICAgICAgICAgICAgYH0+XG4gICAgICAgICAgICAgICAgICB7UmlnaHRTaWRlQ29tcH1cbiAgICAgICAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxuICAgICAgICAgICAgeyFjaGV2cm9uT25MZWZ0U2lkZSAmJiBjaGV2cm9uSWNvbn1cbiAgICAgICAgICAgIHtpc1NlbGVjdGVkICYmIHNlYXJjaEJhciAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBgfT5cbiAgICAgICAgICAgICAgICA8SWNvbiBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBzZXRTZWFyY2hiYXJTdGF0ZSghc2VhcmNoYmFyU3RhdGUpO1xuICAgIH19IG5hbWU9eydzZWFyY2gnfSBmaWxsPXtzZWFyY2hiYXJTdGF0ZSA/ICdzZWNvbmRhcnknIDogJ3ByaW1hcnlfMyd9IGhlaWdodD1cIjE2cHhcIiB3aWR0aD1cIjE2cHhcIiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgICAgICAgICAgICAgICAgIGB9Lz5cbiAgICAgICAgICAgICAgPC9kaXY+KX1cbiAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICB7aXNTZWxlY3RlZCAmJiBzZWFyY2hiYXJTdGF0ZSAmJiAoPE1lbnVJdGVtIGNsYXNzTmFtZT1cIkZhY2V0Q29udGVudFwiIGxldmVsPXsxfSBzZWxlY3RlZCBjb250ZW50QXM9XCJkaXZcIiBjb250ZW50PXs8SW5wdXQgc2l6ZT1cInNtXCIgYXJpYS1sYWJlbD1cInNlYXJjaC1mb3ItZmFjZXRzXCIgY3NzPXtjc3MgYFxuICAgICAgICAgICAgICAgICAgJHtjc3ModGhlbWUudHlwb2dyYXBoeS5kYXRhKX1cbiAgICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgYH0gcHJlc2V0PVwic2VhcmNoXCIgdmFsdWU9e3NlYXJjaFN0YXRlUGFyYW1zLnF1ZXJ5fSBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgc2VhcmNoU3RhdGVQYXJhbXMucXVlcnlTZXR0ZXIoZS50YXJnZXQudmFsdWUpO1xuICAgIH19IHNob3dDbGVhcj17dHJ1ZX0vPn0vPil9XG4gICAgICAgIHtpc1NlbGVjdGVkICYmIGNoaWxkcmVufVxuICAgICAgPC9NZW51SXRlbUNvbnRhaW5lcj4pO1xufSk7XG5jb25zdCBTdWJNZW51Q29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKSBgXG4gIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLndoaXRlfTtcbiAgJiA+ICR7TWVudUl0ZW1Db250YWluZXJ9IHtcbiAgICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5jb2xvcnMuZ3JleV8yfTtcbiAgfVxuYDtcbmV4cG9ydCBjb25zdCBNZW51SXRlbSA9IE1lbnVJdGVtQ29tcG9uZW50O1xuZXhwb3J0IGNvbnN0IFN1Yk1lbnUgPSAoKCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IFN1Yk1lbnVDb21wb25lbnQ7XG4gICAgb3V0cHV0Lkl0ZW0gPSBNZW51SXRlbTtcbiAgICByZXR1cm4gb3V0cHV0O1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IFN1Yk1lbnU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qc3gubWFwIl19 */'),
            ),
            ' flex:1;;label:Uikit-MenuItemComponent;' +
              (process.env.NODE_ENV === 'production'
                ? ''
                : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpRmtMIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgY3NzIGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91dGlscy91c2VUaGVtZSc7XG5pbXBvcnQgeyBNZW51SXRlbUNvbnRhaW5lciwgSWNvbkNvbnRhaW5lciwgQ29udGVudENvbnRhaW5lciB9IGZyb20gJy4vc3R5bGVkQ29tcG9uZW50cyc7XG5jb25zdCBNZW51SXRlbUNvbXBvbmVudCA9IFJlYWN0LmZvcndhcmRSZWYoKF9hLCByZWYpID0+IHtcbiAgICB2YXIgeyBjbGFzc05hbWUgPSAnJywgc2VsZWN0ZWQ6IGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlLCBsZXZlbCwgY2hpbGRyZW4sIGNvbnRlbnQsIG9uQ2xpY2sgPSAoZSkgPT4geyB9LCBpY29uLCBub0NoZXZyb24gPSBmYWxzZSwgY29udGVudEFzID0gJ2J1dHRvbicsIGNoZXZyb25PbkxlZnRTaWRlID0gZmFsc2UsIGlzRmFjZXRWYXJpYW50ID0gZmFsc2UsIHNlYXJjaEJhciA9IGZhbHNlLCBzZWFyY2hTdGF0ZVBhcmFtcywgUmlnaHRTaWRlQ29tcCA9IG51bGwgfSA9IF9hLCBvdGhlclByb3BzID0gX19yZXN0KF9hLCBbXCJjbGFzc05hbWVcIiwgXCJzZWxlY3RlZFwiLCBcImxldmVsXCIsIFwiY2hpbGRyZW5cIiwgXCJjb250ZW50XCIsIFwib25DbGlja1wiLCBcImljb25cIiwgXCJub0NoZXZyb25cIiwgXCJjb250ZW50QXNcIiwgXCJjaGV2cm9uT25MZWZ0U2lkZVwiLCBcImlzRmFjZXRWYXJpYW50XCIsIFwic2VhcmNoQmFyXCIsIFwic2VhcmNoU3RhdGVQYXJhbXNcIiwgXCJSaWdodFNpZGVDb21wXCJdKTtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3QgW2xvY2FsU2VsZWN0ZWRTdGF0ZSwgc2V0TG9jYWxTZWxlY3RlZFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlKTtcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gdHlwZW9mIGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlID09PSAndW5kZWZpbmVkJyA/IGxvY2FsU2VsZWN0ZWRTdGF0ZSA6IGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlO1xuICAgIGNvbnN0IFtzZWFyY2hiYXJTdGF0ZSwgc2V0U2VhcmNoYmFyU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGNvbnRlbnRDb250YWluZXJSZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICBjb25zdCBjaGV2cm9uSWNvbiA9IGNoaWxkcmVuICYmICFub0NoZXZyb24gPyAoPEljb24gY3NzPXtjc3MgYFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAke2NoZXZyb25PbkxlZnRTaWRlID8gJzdweCcgOiAnMHB4J307XG4gICAgICAgICAgYH0gbmFtZT17aXNTZWxlY3RlZCA/ICdjaGV2cm9uX2Rvd24nIDogJ2NoZXZyb25fcmlnaHQnfSBmaWxsPXtpc1NlbGVjdGVkICYmICFpc0ZhY2V0VmFyaWFudCA/ICdzZWNvbmRhcnknIDogJ3ByaW1hcnknfS8+KSA6ICg8PjwvPik7XG4gICAgcmV0dXJuICg8TWVudUl0ZW1Db250YWluZXIgcmVmPXtyZWZ9IGxldmVsPXtsZXZlbH0gc2VsZWN0ZWQ9e2lzU2VsZWN0ZWR9IG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmIChjb250ZW50Q29udGFpbmVyUmVmLmN1cnJlbnQpXG4gICAgICAgICAgICBjb250ZW50Q29udGFpbmVyUmVmLmN1cnJlbnQuYmx1cigpO1xuICAgICAgICBzZXRMb2NhbFNlbGVjdGVkU3RhdGUoIWlzU2VsZWN0ZWQpO1xuICAgICAgICBvbkNsaWNrKGUpO1xuICAgIH19IGNsYXNzTmFtZT17YCR7Y2xhc3NOYW1lfSBNZW51SXRlbUNvbnRhaW5lcmB9IHsuLi5vdGhlclByb3BzfT5cbiAgICAgICAge2NvbnRlbnQgJiYgKDxkaXYgY2xhc3NOYW1lPXtgJHtjbGFzc05hbWV9IE1lbnVJdGVtQ29udGVudGB9PlxuICAgICAgICAgICAge2NoZXZyb25PbkxlZnRTaWRlICYmIGNoZXZyb25JY29ufVxuICAgICAgICAgICAgPENvbnRlbnRDb250YWluZXIgcmVmPXtjb250ZW50Q29udGFpbmVyUmVmfSBhcz17Y29udGVudEFzfT5cbiAgICAgICAgICAgICAge2ljb24gJiYgKDxJY29uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAge1JlYWN0LmNsb25lRWxlbWVudChpY29uLCB7XG4gICAgICAgIGZpbGw6IGlzU2VsZWN0ZWQgPyAnc2Vjb25kYXJ5X2RhcmsnIDogJ3ByaW1hcnknLFxuICAgIH0pfVxuICAgICAgICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj4pfVxuICAgICAgICAgICAgICB7Y29udGVudH1cbiAgICAgICAgICAgICAge1JpZ2h0U2lkZUNvbXAgJiYgIXNlYXJjaEJhciAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICAgICAgICAgICAgYH0+XG4gICAgICAgICAgICAgICAgICB7UmlnaHRTaWRlQ29tcH1cbiAgICAgICAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxuICAgICAgICAgICAgeyFjaGV2cm9uT25MZWZ0U2lkZSAmJiBjaGV2cm9uSWNvbn1cbiAgICAgICAgICAgIHtpc1NlbGVjdGVkICYmIHNlYXJjaEJhciAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBgfT5cbiAgICAgICAgICAgICAgICA8SWNvbiBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBzZXRTZWFyY2hiYXJTdGF0ZSghc2VhcmNoYmFyU3RhdGUpO1xuICAgIH19IG5hbWU9eydzZWFyY2gnfSBmaWxsPXtzZWFyY2hiYXJTdGF0ZSA/ICdzZWNvbmRhcnknIDogJ3ByaW1hcnlfMyd9IGhlaWdodD1cIjE2cHhcIiB3aWR0aD1cIjE2cHhcIiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgICAgICAgICAgICAgICAgIGB9Lz5cbiAgICAgICAgICAgICAgPC9kaXY+KX1cbiAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICB7aXNTZWxlY3RlZCAmJiBzZWFyY2hiYXJTdGF0ZSAmJiAoPE1lbnVJdGVtIGNsYXNzTmFtZT1cIkZhY2V0Q29udGVudFwiIGxldmVsPXsxfSBzZWxlY3RlZCBjb250ZW50QXM9XCJkaXZcIiBjb250ZW50PXs8SW5wdXQgc2l6ZT1cInNtXCIgYXJpYS1sYWJlbD1cInNlYXJjaC1mb3ItZmFjZXRzXCIgY3NzPXtjc3MgYFxuICAgICAgICAgICAgICAgICAgJHtjc3ModGhlbWUudHlwb2dyYXBoeS5kYXRhKX1cbiAgICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgYH0gcHJlc2V0PVwic2VhcmNoXCIgdmFsdWU9e3NlYXJjaFN0YXRlUGFyYW1zLnF1ZXJ5fSBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgc2VhcmNoU3RhdGVQYXJhbXMucXVlcnlTZXR0ZXIoZS50YXJnZXQudmFsdWUpO1xuICAgIH19IHNob3dDbGVhcj17dHJ1ZX0vPn0vPil9XG4gICAgICAgIHtpc1NlbGVjdGVkICYmIGNoaWxkcmVufVxuICAgICAgPC9NZW51SXRlbUNvbnRhaW5lcj4pO1xufSk7XG5jb25zdCBTdWJNZW51Q29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKSBgXG4gIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLndoaXRlfTtcbiAgJiA+ICR7TWVudUl0ZW1Db250YWluZXJ9IHtcbiAgICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5jb2xvcnMuZ3JleV8yfTtcbiAgfVxuYDtcbmV4cG9ydCBjb25zdCBNZW51SXRlbSA9IE1lbnVJdGVtQ29tcG9uZW50O1xuZXhwb3J0IGNvbnN0IFN1Yk1lbnUgPSAoKCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IFN1Yk1lbnVDb21wb25lbnQ7XG4gICAgb3V0cHV0Lkl0ZW0gPSBNZW51SXRlbTtcbiAgICByZXR1cm4gb3V0cHV0O1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IFN1Yk1lbnU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qc3gubWFwIl19 */'),
          ),
          preset: 'search',
          value: searchStateParams.query,
          onChange: function onChange(e) {
            searchStateParams.querySetter(e.target.value);
          },
          showClear: true,
        }),
      }),
    isSelected && children,
  );
});

var SubMenuComponent = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'e1q0kvlz0',
  label: 'Uikit-SubMenuComponent',
})(
  'background:',
  function (_ref4) {
    var theme = _ref4.theme;
    return theme.colors.white;
  },
  ';& > ',
  _styledComponents.MenuItemContainer,
  '{border-bottom:solid 1px ',
  function (_ref5) {
    var theme = _ref5.theme;
    return theme.colors.grey_2;
  },
  ';}' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwRnVDIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgY3NzIGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91dGlscy91c2VUaGVtZSc7XG5pbXBvcnQgeyBNZW51SXRlbUNvbnRhaW5lciwgSWNvbkNvbnRhaW5lciwgQ29udGVudENvbnRhaW5lciB9IGZyb20gJy4vc3R5bGVkQ29tcG9uZW50cyc7XG5jb25zdCBNZW51SXRlbUNvbXBvbmVudCA9IFJlYWN0LmZvcndhcmRSZWYoKF9hLCByZWYpID0+IHtcbiAgICB2YXIgeyBjbGFzc05hbWUgPSAnJywgc2VsZWN0ZWQ6IGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlLCBsZXZlbCwgY2hpbGRyZW4sIGNvbnRlbnQsIG9uQ2xpY2sgPSAoZSkgPT4geyB9LCBpY29uLCBub0NoZXZyb24gPSBmYWxzZSwgY29udGVudEFzID0gJ2J1dHRvbicsIGNoZXZyb25PbkxlZnRTaWRlID0gZmFsc2UsIGlzRmFjZXRWYXJpYW50ID0gZmFsc2UsIHNlYXJjaEJhciA9IGZhbHNlLCBzZWFyY2hTdGF0ZVBhcmFtcywgUmlnaHRTaWRlQ29tcCA9IG51bGwgfSA9IF9hLCBvdGhlclByb3BzID0gX19yZXN0KF9hLCBbXCJjbGFzc05hbWVcIiwgXCJzZWxlY3RlZFwiLCBcImxldmVsXCIsIFwiY2hpbGRyZW5cIiwgXCJjb250ZW50XCIsIFwib25DbGlja1wiLCBcImljb25cIiwgXCJub0NoZXZyb25cIiwgXCJjb250ZW50QXNcIiwgXCJjaGV2cm9uT25MZWZ0U2lkZVwiLCBcImlzRmFjZXRWYXJpYW50XCIsIFwic2VhcmNoQmFyXCIsIFwic2VhcmNoU3RhdGVQYXJhbXNcIiwgXCJSaWdodFNpZGVDb21wXCJdKTtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3QgW2xvY2FsU2VsZWN0ZWRTdGF0ZSwgc2V0TG9jYWxTZWxlY3RlZFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlKTtcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gdHlwZW9mIGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlID09PSAndW5kZWZpbmVkJyA/IGxvY2FsU2VsZWN0ZWRTdGF0ZSA6IGNvbnRyb2xsZWRTZWxlY3RlZFN0YXRlO1xuICAgIGNvbnN0IFtzZWFyY2hiYXJTdGF0ZSwgc2V0U2VhcmNoYmFyU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGNvbnRlbnRDb250YWluZXJSZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICBjb25zdCBjaGV2cm9uSWNvbiA9IGNoaWxkcmVuICYmICFub0NoZXZyb24gPyAoPEljb24gY3NzPXtjc3MgYFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAke2NoZXZyb25PbkxlZnRTaWRlID8gJzdweCcgOiAnMHB4J307XG4gICAgICAgICAgYH0gbmFtZT17aXNTZWxlY3RlZCA/ICdjaGV2cm9uX2Rvd24nIDogJ2NoZXZyb25fcmlnaHQnfSBmaWxsPXtpc1NlbGVjdGVkICYmICFpc0ZhY2V0VmFyaWFudCA/ICdzZWNvbmRhcnknIDogJ3ByaW1hcnknfS8+KSA6ICg8PjwvPik7XG4gICAgcmV0dXJuICg8TWVudUl0ZW1Db250YWluZXIgcmVmPXtyZWZ9IGxldmVsPXtsZXZlbH0gc2VsZWN0ZWQ9e2lzU2VsZWN0ZWR9IG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmIChjb250ZW50Q29udGFpbmVyUmVmLmN1cnJlbnQpXG4gICAgICAgICAgICBjb250ZW50Q29udGFpbmVyUmVmLmN1cnJlbnQuYmx1cigpO1xuICAgICAgICBzZXRMb2NhbFNlbGVjdGVkU3RhdGUoIWlzU2VsZWN0ZWQpO1xuICAgICAgICBvbkNsaWNrKGUpO1xuICAgIH19IGNsYXNzTmFtZT17YCR7Y2xhc3NOYW1lfSBNZW51SXRlbUNvbnRhaW5lcmB9IHsuLi5vdGhlclByb3BzfT5cbiAgICAgICAge2NvbnRlbnQgJiYgKDxkaXYgY2xhc3NOYW1lPXtgJHtjbGFzc05hbWV9IE1lbnVJdGVtQ29udGVudGB9PlxuICAgICAgICAgICAge2NoZXZyb25PbkxlZnRTaWRlICYmIGNoZXZyb25JY29ufVxuICAgICAgICAgICAgPENvbnRlbnRDb250YWluZXIgcmVmPXtjb250ZW50Q29udGFpbmVyUmVmfSBhcz17Y29udGVudEFzfT5cbiAgICAgICAgICAgICAge2ljb24gJiYgKDxJY29uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAge1JlYWN0LmNsb25lRWxlbWVudChpY29uLCB7XG4gICAgICAgIGZpbGw6IGlzU2VsZWN0ZWQgPyAnc2Vjb25kYXJ5X2RhcmsnIDogJ3ByaW1hcnknLFxuICAgIH0pfVxuICAgICAgICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj4pfVxuICAgICAgICAgICAgICB7Y29udGVudH1cbiAgICAgICAgICAgICAge1JpZ2h0U2lkZUNvbXAgJiYgIXNlYXJjaEJhciAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICAgICAgICAgICAgYH0+XG4gICAgICAgICAgICAgICAgICB7UmlnaHRTaWRlQ29tcH1cbiAgICAgICAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxuICAgICAgICAgICAgeyFjaGV2cm9uT25MZWZ0U2lkZSAmJiBjaGV2cm9uSWNvbn1cbiAgICAgICAgICAgIHtpc1NlbGVjdGVkICYmIHNlYXJjaEJhciAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBgfT5cbiAgICAgICAgICAgICAgICA8SWNvbiBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBzZXRTZWFyY2hiYXJTdGF0ZSghc2VhcmNoYmFyU3RhdGUpO1xuICAgIH19IG5hbWU9eydzZWFyY2gnfSBmaWxsPXtzZWFyY2hiYXJTdGF0ZSA/ICdzZWNvbmRhcnknIDogJ3ByaW1hcnlfMyd9IGhlaWdodD1cIjE2cHhcIiB3aWR0aD1cIjE2cHhcIiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgICAgICAgICAgICAgICAgIGB9Lz5cbiAgICAgICAgICAgICAgPC9kaXY+KX1cbiAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICB7aXNTZWxlY3RlZCAmJiBzZWFyY2hiYXJTdGF0ZSAmJiAoPE1lbnVJdGVtIGNsYXNzTmFtZT1cIkZhY2V0Q29udGVudFwiIGxldmVsPXsxfSBzZWxlY3RlZCBjb250ZW50QXM9XCJkaXZcIiBjb250ZW50PXs8SW5wdXQgc2l6ZT1cInNtXCIgYXJpYS1sYWJlbD1cInNlYXJjaC1mb3ItZmFjZXRzXCIgY3NzPXtjc3MgYFxuICAgICAgICAgICAgICAgICAgJHtjc3ModGhlbWUudHlwb2dyYXBoeS5kYXRhKX1cbiAgICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgYH0gcHJlc2V0PVwic2VhcmNoXCIgdmFsdWU9e3NlYXJjaFN0YXRlUGFyYW1zLnF1ZXJ5fSBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgc2VhcmNoU3RhdGVQYXJhbXMucXVlcnlTZXR0ZXIoZS50YXJnZXQudmFsdWUpO1xuICAgIH19IHNob3dDbGVhcj17dHJ1ZX0vPn0vPil9XG4gICAgICAgIHtpc1NlbGVjdGVkICYmIGNoaWxkcmVufVxuICAgICAgPC9NZW51SXRlbUNvbnRhaW5lcj4pO1xufSk7XG5jb25zdCBTdWJNZW51Q29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKSBgXG4gIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLndoaXRlfTtcbiAgJiA+ICR7TWVudUl0ZW1Db250YWluZXJ9IHtcbiAgICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5jb2xvcnMuZ3JleV8yfTtcbiAgfVxuYDtcbmV4cG9ydCBjb25zdCBNZW51SXRlbSA9IE1lbnVJdGVtQ29tcG9uZW50O1xuZXhwb3J0IGNvbnN0IFN1Yk1lbnUgPSAoKCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IFN1Yk1lbnVDb21wb25lbnQ7XG4gICAgb3V0cHV0Lkl0ZW0gPSBNZW51SXRlbTtcbiAgICByZXR1cm4gb3V0cHV0O1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IFN1Yk1lbnU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qc3gubWFwIl19 */'),
);
var MenuItem = MenuItemComponent;
exports.MenuItem = MenuItem;

var SubMenu = (function () {
  var output = SubMenuComponent;
  output.Item = MenuItem;
  return output;
})();

exports.SubMenu = SubMenu;
var _default = SubMenu;
exports['default'] = _default;
