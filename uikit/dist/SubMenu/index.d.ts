import React from 'react';
import Icon from '../Icon';
declare const SubMenuComponent: import('@emotion/styled-base').StyledComponent<
  React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>,
  React.PropsWithChildren<
    React.ClassAttributes<HTMLDivElement> &
      React.HTMLAttributes<HTMLDivElement> &
      Pick<
        React.ClassAttributes<HTMLDivElement> &
          React.HTMLAttributes<HTMLDivElement> & {
            level?: 2 | 1 | 3;
            selected?: boolean;
          },
        | 'children'
        | 'slot'
        | 'style'
        | 'title'
        | 'className'
        | 'color'
        | 'id'
        | 'lang'
        | 'role'
        | 'tabIndex'
        | 'aria-activedescendant'
        | 'aria-atomic'
        | 'aria-autocomplete'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-colcount'
        | 'aria-colindex'
        | 'aria-colspan'
        | 'aria-controls'
        | 'aria-current'
        | 'aria-describedby'
        | 'aria-details'
        | 'aria-disabled'
        | 'aria-dropeffect'
        | 'aria-errormessage'
        | 'aria-expanded'
        | 'aria-flowto'
        | 'aria-grabbed'
        | 'aria-haspopup'
        | 'aria-hidden'
        | 'aria-invalid'
        | 'aria-keyshortcuts'
        | 'aria-label'
        | 'aria-labelledby'
        | 'aria-level'
        | 'aria-live'
        | 'aria-modal'
        | 'aria-multiline'
        | 'aria-multiselectable'
        | 'aria-orientation'
        | 'aria-owns'
        | 'aria-placeholder'
        | 'aria-posinset'
        | 'aria-pressed'
        | 'aria-readonly'
        | 'aria-relevant'
        | 'aria-required'
        | 'aria-roledescription'
        | 'aria-rowcount'
        | 'aria-rowindex'
        | 'aria-rowspan'
        | 'aria-selected'
        | 'aria-setsize'
        | 'aria-sort'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'dangerouslySetInnerHTML'
        | 'onCopy'
        | 'onCopyCapture'
        | 'onCut'
        | 'onCutCapture'
        | 'onPaste'
        | 'onPasteCapture'
        | 'onCompositionEnd'
        | 'onCompositionEndCapture'
        | 'onCompositionStart'
        | 'onCompositionStartCapture'
        | 'onCompositionUpdate'
        | 'onCompositionUpdateCapture'
        | 'onFocus'
        | 'onFocusCapture'
        | 'onBlur'
        | 'onBlurCapture'
        | 'onChange'
        | 'onChangeCapture'
        | 'onBeforeInput'
        | 'onBeforeInputCapture'
        | 'onInput'
        | 'onInputCapture'
        | 'onReset'
        | 'onResetCapture'
        | 'onSubmit'
        | 'onSubmitCapture'
        | 'onInvalid'
        | 'onInvalidCapture'
        | 'onLoad'
        | 'onLoadCapture'
        | 'onError'
        | 'onErrorCapture'
        | 'onKeyDown'
        | 'onKeyDownCapture'
        | 'onKeyPress'
        | 'onKeyPressCapture'
        | 'onKeyUp'
        | 'onKeyUpCapture'
        | 'onAbort'
        | 'onAbortCapture'
        | 'onCanPlay'
        | 'onCanPlayCapture'
        | 'onCanPlayThrough'
        | 'onCanPlayThroughCapture'
        | 'onDurationChange'
        | 'onDurationChangeCapture'
        | 'onEmptied'
        | 'onEmptiedCapture'
        | 'onEncrypted'
        | 'onEncryptedCapture'
        | 'onEnded'
        | 'onEndedCapture'
        | 'onLoadedData'
        | 'onLoadedDataCapture'
        | 'onLoadedMetadata'
        | 'onLoadedMetadataCapture'
        | 'onLoadStart'
        | 'onLoadStartCapture'
        | 'onPause'
        | 'onPauseCapture'
        | 'onPlay'
        | 'onPlayCapture'
        | 'onPlaying'
        | 'onPlayingCapture'
        | 'onProgress'
        | 'onProgressCapture'
        | 'onRateChange'
        | 'onRateChangeCapture'
        | 'onSeeked'
        | 'onSeekedCapture'
        | 'onSeeking'
        | 'onSeekingCapture'
        | 'onStalled'
        | 'onStalledCapture'
        | 'onSuspend'
        | 'onSuspendCapture'
        | 'onTimeUpdate'
        | 'onTimeUpdateCapture'
        | 'onVolumeChange'
        | 'onVolumeChangeCapture'
        | 'onWaiting'
        | 'onWaitingCapture'
        | 'onAuxClick'
        | 'onAuxClickCapture'
        | 'onClick'
        | 'onClickCapture'
        | 'onContextMenu'
        | 'onContextMenuCapture'
        | 'onDoubleClick'
        | 'onDoubleClickCapture'
        | 'onDrag'
        | 'onDragCapture'
        | 'onDragEnd'
        | 'onDragEndCapture'
        | 'onDragEnter'
        | 'onDragEnterCapture'
        | 'onDragExit'
        | 'onDragExitCapture'
        | 'onDragLeave'
        | 'onDragLeaveCapture'
        | 'onDragOver'
        | 'onDragOverCapture'
        | 'onDragStart'
        | 'onDragStartCapture'
        | 'onDrop'
        | 'onDropCapture'
        | 'onMouseDown'
        | 'onMouseDownCapture'
        | 'onMouseEnter'
        | 'onMouseLeave'
        | 'onMouseMove'
        | 'onMouseMoveCapture'
        | 'onMouseOut'
        | 'onMouseOutCapture'
        | 'onMouseOver'
        | 'onMouseOverCapture'
        | 'onMouseUp'
        | 'onMouseUpCapture'
        | 'onSelect'
        | 'onSelectCapture'
        | 'onTouchCancel'
        | 'onTouchCancelCapture'
        | 'onTouchEnd'
        | 'onTouchEndCapture'
        | 'onTouchMove'
        | 'onTouchMoveCapture'
        | 'onTouchStart'
        | 'onTouchStartCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerOver'
        | 'onPointerOverCapture'
        | 'onPointerOut'
        | 'onPointerOutCapture'
        | 'onGotPointerCapture'
        | 'onGotPointerCaptureCapture'
        | 'onLostPointerCapture'
        | 'onLostPointerCaptureCapture'
        | 'onScroll'
        | 'onScrollCapture'
        | 'onWheel'
        | 'onWheelCapture'
        | 'onAnimationStart'
        | 'onAnimationStartCapture'
        | 'onAnimationEnd'
        | 'onAnimationEndCapture'
        | 'onAnimationIteration'
        | 'onAnimationIterationCapture'
        | 'onTransitionEnd'
        | 'onTransitionEndCapture'
        | 'css'
        | 'translate'
        | 'defaultChecked'
        | 'defaultValue'
        | 'suppressContentEditableWarning'
        | 'suppressHydrationWarning'
        | 'accessKey'
        | 'contentEditable'
        | 'contextMenu'
        | 'dir'
        | 'draggable'
        | 'hidden'
        | 'placeholder'
        | 'spellCheck'
        | 'radioGroup'
        | 'about'
        | 'datatype'
        | 'inlist'
        | 'prefix'
        | 'property'
        | 'resource'
        | 'typeof'
        | 'vocab'
        | 'autoCapitalize'
        | 'autoCorrect'
        | 'autoSave'
        | 'itemProp'
        | 'itemScope'
        | 'itemType'
        | 'itemID'
        | 'itemRef'
        | 'results'
        | 'security'
        | 'unselectable'
        | 'inputMode'
        | 'is'
        | 'selected'
        | 'level'
      > & {
        theme?: any;
      }
  >,
  any
>;
export declare const MenuItem: React.ForwardRefExoticComponent<
  Pick<
    {
      className?: string;
      /**
       * provide this if you want to control the state, leave undefined otherwise
       */
      selected?: boolean;
      /**
       * indicates what nesting level to render as. undefined will respect DOM structure
       */
      level?: 1 | 2 | 3 | undefined;
      /**
       * content that appears in label, can provide primitives and/or React elements
       */
      content?: any;
      /**
       * nodes that will appear when opened
       */
      children?: any;
      noChevron?: boolean;
      icon?: React.ReactElement<React.ComponentProps<typeof Icon>>;
      contentAs?: keyof JSX.IntrinsicElements;
      chevronOnLeftSide?: boolean;
      isFacetVariant?: boolean;
      searchBar?: boolean;
      searchStateParams?: {
        query: string;
        querySetter: React.Dispatch<React.SetStateAction<string>>;
      };
      RightSideComp?: React.ReactNode;
    } & React.ClassAttributes<HTMLDivElement> &
      React.HTMLAttributes<HTMLDivElement> &
      Pick<
        React.ClassAttributes<HTMLDivElement> &
          React.HTMLAttributes<HTMLDivElement> & {
            level?: 2 | 1 | 3;
            selected?: boolean;
          },
        | 'children'
        | 'slot'
        | 'style'
        | 'title'
        | 'className'
        | 'color'
        | 'id'
        | 'lang'
        | 'role'
        | 'tabIndex'
        | 'aria-activedescendant'
        | 'aria-atomic'
        | 'aria-autocomplete'
        | 'aria-busy'
        | 'aria-checked'
        | 'aria-colcount'
        | 'aria-colindex'
        | 'aria-colspan'
        | 'aria-controls'
        | 'aria-current'
        | 'aria-describedby'
        | 'aria-details'
        | 'aria-disabled'
        | 'aria-dropeffect'
        | 'aria-errormessage'
        | 'aria-expanded'
        | 'aria-flowto'
        | 'aria-grabbed'
        | 'aria-haspopup'
        | 'aria-hidden'
        | 'aria-invalid'
        | 'aria-keyshortcuts'
        | 'aria-label'
        | 'aria-labelledby'
        | 'aria-level'
        | 'aria-live'
        | 'aria-modal'
        | 'aria-multiline'
        | 'aria-multiselectable'
        | 'aria-orientation'
        | 'aria-owns'
        | 'aria-placeholder'
        | 'aria-posinset'
        | 'aria-pressed'
        | 'aria-readonly'
        | 'aria-relevant'
        | 'aria-required'
        | 'aria-roledescription'
        | 'aria-rowcount'
        | 'aria-rowindex'
        | 'aria-rowspan'
        | 'aria-selected'
        | 'aria-setsize'
        | 'aria-sort'
        | 'aria-valuemax'
        | 'aria-valuemin'
        | 'aria-valuenow'
        | 'aria-valuetext'
        | 'dangerouslySetInnerHTML'
        | 'onCopy'
        | 'onCopyCapture'
        | 'onCut'
        | 'onCutCapture'
        | 'onPaste'
        | 'onPasteCapture'
        | 'onCompositionEnd'
        | 'onCompositionEndCapture'
        | 'onCompositionStart'
        | 'onCompositionStartCapture'
        | 'onCompositionUpdate'
        | 'onCompositionUpdateCapture'
        | 'onFocus'
        | 'onFocusCapture'
        | 'onBlur'
        | 'onBlurCapture'
        | 'onChange'
        | 'onChangeCapture'
        | 'onBeforeInput'
        | 'onBeforeInputCapture'
        | 'onInput'
        | 'onInputCapture'
        | 'onReset'
        | 'onResetCapture'
        | 'onSubmit'
        | 'onSubmitCapture'
        | 'onInvalid'
        | 'onInvalidCapture'
        | 'onLoad'
        | 'onLoadCapture'
        | 'onError'
        | 'onErrorCapture'
        | 'onKeyDown'
        | 'onKeyDownCapture'
        | 'onKeyPress'
        | 'onKeyPressCapture'
        | 'onKeyUp'
        | 'onKeyUpCapture'
        | 'onAbort'
        | 'onAbortCapture'
        | 'onCanPlay'
        | 'onCanPlayCapture'
        | 'onCanPlayThrough'
        | 'onCanPlayThroughCapture'
        | 'onDurationChange'
        | 'onDurationChangeCapture'
        | 'onEmptied'
        | 'onEmptiedCapture'
        | 'onEncrypted'
        | 'onEncryptedCapture'
        | 'onEnded'
        | 'onEndedCapture'
        | 'onLoadedData'
        | 'onLoadedDataCapture'
        | 'onLoadedMetadata'
        | 'onLoadedMetadataCapture'
        | 'onLoadStart'
        | 'onLoadStartCapture'
        | 'onPause'
        | 'onPauseCapture'
        | 'onPlay'
        | 'onPlayCapture'
        | 'onPlaying'
        | 'onPlayingCapture'
        | 'onProgress'
        | 'onProgressCapture'
        | 'onRateChange'
        | 'onRateChangeCapture'
        | 'onSeeked'
        | 'onSeekedCapture'
        | 'onSeeking'
        | 'onSeekingCapture'
        | 'onStalled'
        | 'onStalledCapture'
        | 'onSuspend'
        | 'onSuspendCapture'
        | 'onTimeUpdate'
        | 'onTimeUpdateCapture'
        | 'onVolumeChange'
        | 'onVolumeChangeCapture'
        | 'onWaiting'
        | 'onWaitingCapture'
        | 'onAuxClick'
        | 'onAuxClickCapture'
        | 'onClick'
        | 'onClickCapture'
        | 'onContextMenu'
        | 'onContextMenuCapture'
        | 'onDoubleClick'
        | 'onDoubleClickCapture'
        | 'onDrag'
        | 'onDragCapture'
        | 'onDragEnd'
        | 'onDragEndCapture'
        | 'onDragEnter'
        | 'onDragEnterCapture'
        | 'onDragExit'
        | 'onDragExitCapture'
        | 'onDragLeave'
        | 'onDragLeaveCapture'
        | 'onDragOver'
        | 'onDragOverCapture'
        | 'onDragStart'
        | 'onDragStartCapture'
        | 'onDrop'
        | 'onDropCapture'
        | 'onMouseDown'
        | 'onMouseDownCapture'
        | 'onMouseEnter'
        | 'onMouseLeave'
        | 'onMouseMove'
        | 'onMouseMoveCapture'
        | 'onMouseOut'
        | 'onMouseOutCapture'
        | 'onMouseOver'
        | 'onMouseOverCapture'
        | 'onMouseUp'
        | 'onMouseUpCapture'
        | 'onSelect'
        | 'onSelectCapture'
        | 'onTouchCancel'
        | 'onTouchCancelCapture'
        | 'onTouchEnd'
        | 'onTouchEndCapture'
        | 'onTouchMove'
        | 'onTouchMoveCapture'
        | 'onTouchStart'
        | 'onTouchStartCapture'
        | 'onPointerDown'
        | 'onPointerDownCapture'
        | 'onPointerMove'
        | 'onPointerMoveCapture'
        | 'onPointerUp'
        | 'onPointerUpCapture'
        | 'onPointerCancel'
        | 'onPointerCancelCapture'
        | 'onPointerEnter'
        | 'onPointerEnterCapture'
        | 'onPointerLeave'
        | 'onPointerLeaveCapture'
        | 'onPointerOver'
        | 'onPointerOverCapture'
        | 'onPointerOut'
        | 'onPointerOutCapture'
        | 'onGotPointerCapture'
        | 'onGotPointerCaptureCapture'
        | 'onLostPointerCapture'
        | 'onLostPointerCaptureCapture'
        | 'onScroll'
        | 'onScrollCapture'
        | 'onWheel'
        | 'onWheelCapture'
        | 'onAnimationStart'
        | 'onAnimationStartCapture'
        | 'onAnimationEnd'
        | 'onAnimationEndCapture'
        | 'onAnimationIteration'
        | 'onAnimationIterationCapture'
        | 'onTransitionEnd'
        | 'onTransitionEndCapture'
        | 'css'
        | 'translate'
        | 'defaultChecked'
        | 'defaultValue'
        | 'suppressContentEditableWarning'
        | 'suppressHydrationWarning'
        | 'accessKey'
        | 'contentEditable'
        | 'contextMenu'
        | 'dir'
        | 'draggable'
        | 'hidden'
        | 'placeholder'
        | 'spellCheck'
        | 'radioGroup'
        | 'about'
        | 'datatype'
        | 'inlist'
        | 'prefix'
        | 'property'
        | 'resource'
        | 'typeof'
        | 'vocab'
        | 'autoCapitalize'
        | 'autoCorrect'
        | 'autoSave'
        | 'itemProp'
        | 'itemScope'
        | 'itemType'
        | 'itemID'
        | 'itemRef'
        | 'results'
        | 'security'
        | 'unselectable'
        | 'inputMode'
        | 'is'
        | 'selected'
        | 'level'
      > & {
        theme?: any;
      } & {
        children?: React.ReactNode;
      },
    | 'theme'
    | 'children'
    | 'slot'
    | 'style'
    | 'title'
    | 'key'
    | 'className'
    | 'color'
    | 'id'
    | 'lang'
    | 'role'
    | 'tabIndex'
    | 'aria-activedescendant'
    | 'aria-atomic'
    | 'aria-autocomplete'
    | 'aria-busy'
    | 'aria-checked'
    | 'aria-colcount'
    | 'aria-colindex'
    | 'aria-colspan'
    | 'aria-controls'
    | 'aria-current'
    | 'aria-describedby'
    | 'aria-details'
    | 'aria-disabled'
    | 'aria-dropeffect'
    | 'aria-errormessage'
    | 'aria-expanded'
    | 'aria-flowto'
    | 'aria-grabbed'
    | 'aria-haspopup'
    | 'aria-hidden'
    | 'aria-invalid'
    | 'aria-keyshortcuts'
    | 'aria-label'
    | 'aria-labelledby'
    | 'aria-level'
    | 'aria-live'
    | 'aria-modal'
    | 'aria-multiline'
    | 'aria-multiselectable'
    | 'aria-orientation'
    | 'aria-owns'
    | 'aria-placeholder'
    | 'aria-posinset'
    | 'aria-pressed'
    | 'aria-readonly'
    | 'aria-relevant'
    | 'aria-required'
    | 'aria-roledescription'
    | 'aria-rowcount'
    | 'aria-rowindex'
    | 'aria-rowspan'
    | 'aria-selected'
    | 'aria-setsize'
    | 'aria-sort'
    | 'aria-valuemax'
    | 'aria-valuemin'
    | 'aria-valuenow'
    | 'aria-valuetext'
    | 'dangerouslySetInnerHTML'
    | 'onCopy'
    | 'onCopyCapture'
    | 'onCut'
    | 'onCutCapture'
    | 'onPaste'
    | 'onPasteCapture'
    | 'onCompositionEnd'
    | 'onCompositionEndCapture'
    | 'onCompositionStart'
    | 'onCompositionStartCapture'
    | 'onCompositionUpdate'
    | 'onCompositionUpdateCapture'
    | 'onFocus'
    | 'onFocusCapture'
    | 'onBlur'
    | 'onBlurCapture'
    | 'onChange'
    | 'onChangeCapture'
    | 'onBeforeInput'
    | 'onBeforeInputCapture'
    | 'onInput'
    | 'onInputCapture'
    | 'onReset'
    | 'onResetCapture'
    | 'onSubmit'
    | 'onSubmitCapture'
    | 'onInvalid'
    | 'onInvalidCapture'
    | 'onLoad'
    | 'onLoadCapture'
    | 'onError'
    | 'onErrorCapture'
    | 'onKeyDown'
    | 'onKeyDownCapture'
    | 'onKeyPress'
    | 'onKeyPressCapture'
    | 'onKeyUp'
    | 'onKeyUpCapture'
    | 'onAbort'
    | 'onAbortCapture'
    | 'onCanPlay'
    | 'onCanPlayCapture'
    | 'onCanPlayThrough'
    | 'onCanPlayThroughCapture'
    | 'onDurationChange'
    | 'onDurationChangeCapture'
    | 'onEmptied'
    | 'onEmptiedCapture'
    | 'onEncrypted'
    | 'onEncryptedCapture'
    | 'onEnded'
    | 'onEndedCapture'
    | 'onLoadedData'
    | 'onLoadedDataCapture'
    | 'onLoadedMetadata'
    | 'onLoadedMetadataCapture'
    | 'onLoadStart'
    | 'onLoadStartCapture'
    | 'onPause'
    | 'onPauseCapture'
    | 'onPlay'
    | 'onPlayCapture'
    | 'onPlaying'
    | 'onPlayingCapture'
    | 'onProgress'
    | 'onProgressCapture'
    | 'onRateChange'
    | 'onRateChangeCapture'
    | 'onSeeked'
    | 'onSeekedCapture'
    | 'onSeeking'
    | 'onSeekingCapture'
    | 'onStalled'
    | 'onStalledCapture'
    | 'onSuspend'
    | 'onSuspendCapture'
    | 'onTimeUpdate'
    | 'onTimeUpdateCapture'
    | 'onVolumeChange'
    | 'onVolumeChangeCapture'
    | 'onWaiting'
    | 'onWaitingCapture'
    | 'onAuxClick'
    | 'onAuxClickCapture'
    | 'onClick'
    | 'onClickCapture'
    | 'onContextMenu'
    | 'onContextMenuCapture'
    | 'onDoubleClick'
    | 'onDoubleClickCapture'
    | 'onDrag'
    | 'onDragCapture'
    | 'onDragEnd'
    | 'onDragEndCapture'
    | 'onDragEnter'
    | 'onDragEnterCapture'
    | 'onDragExit'
    | 'onDragExitCapture'
    | 'onDragLeave'
    | 'onDragLeaveCapture'
    | 'onDragOver'
    | 'onDragOverCapture'
    | 'onDragStart'
    | 'onDragStartCapture'
    | 'onDrop'
    | 'onDropCapture'
    | 'onMouseDown'
    | 'onMouseDownCapture'
    | 'onMouseEnter'
    | 'onMouseLeave'
    | 'onMouseMove'
    | 'onMouseMoveCapture'
    | 'onMouseOut'
    | 'onMouseOutCapture'
    | 'onMouseOver'
    | 'onMouseOverCapture'
    | 'onMouseUp'
    | 'onMouseUpCapture'
    | 'onSelect'
    | 'onSelectCapture'
    | 'onTouchCancel'
    | 'onTouchCancelCapture'
    | 'onTouchEnd'
    | 'onTouchEndCapture'
    | 'onTouchMove'
    | 'onTouchMoveCapture'
    | 'onTouchStart'
    | 'onTouchStartCapture'
    | 'onPointerDown'
    | 'onPointerDownCapture'
    | 'onPointerMove'
    | 'onPointerMoveCapture'
    | 'onPointerUp'
    | 'onPointerUpCapture'
    | 'onPointerCancel'
    | 'onPointerCancelCapture'
    | 'onPointerEnter'
    | 'onPointerEnterCapture'
    | 'onPointerLeave'
    | 'onPointerLeaveCapture'
    | 'onPointerOver'
    | 'onPointerOverCapture'
    | 'onPointerOut'
    | 'onPointerOutCapture'
    | 'onGotPointerCapture'
    | 'onGotPointerCaptureCapture'
    | 'onLostPointerCapture'
    | 'onLostPointerCaptureCapture'
    | 'onScroll'
    | 'onScrollCapture'
    | 'onWheel'
    | 'onWheelCapture'
    | 'onAnimationStart'
    | 'onAnimationStartCapture'
    | 'onAnimationEnd'
    | 'onAnimationEndCapture'
    | 'onAnimationIteration'
    | 'onAnimationIterationCapture'
    | 'onTransitionEnd'
    | 'onTransitionEndCapture'
    | 'css'
    | 'content'
    | 'translate'
    | 'defaultChecked'
    | 'defaultValue'
    | 'suppressContentEditableWarning'
    | 'suppressHydrationWarning'
    | 'accessKey'
    | 'contentEditable'
    | 'contextMenu'
    | 'dir'
    | 'draggable'
    | 'hidden'
    | 'placeholder'
    | 'spellCheck'
    | 'radioGroup'
    | 'about'
    | 'datatype'
    | 'inlist'
    | 'prefix'
    | 'property'
    | 'resource'
    | 'typeof'
    | 'vocab'
    | 'autoCapitalize'
    | 'autoCorrect'
    | 'autoSave'
    | 'itemProp'
    | 'itemScope'
    | 'itemType'
    | 'itemID'
    | 'itemRef'
    | 'results'
    | 'security'
    | 'unselectable'
    | 'inputMode'
    | 'is'
    | 'icon'
    | 'selected'
    | 'level'
    | 'noChevron'
    | 'contentAs'
    | 'chevronOnLeftSide'
    | 'isFacetVariant'
    | 'searchBar'
    | 'searchStateParams'
    | 'RightSideComp'
  > &
    React.RefAttributes<HTMLDivElement>
>;
export declare const SubMenu: typeof SubMenuComponent & {
  Item: typeof MenuItem;
};
export default SubMenu;
