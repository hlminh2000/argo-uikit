'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

Object.defineProperty(exports, '__esModule', {
  value: true,
});
Object.defineProperty(exports, 'Option', {
  enumerable: true,
  get: function get() {
    return _Option['default'];
  },
});
exports['default'] = void 0;

var _core = require('@emotion/core');

var _extends2 = _interopRequireDefault(require('@babel/runtime/helpers/extends'));

var _toConsumableArray2 = _interopRequireDefault(
  require('@babel/runtime/helpers/toConsumableArray'),
);

var _slicedToArray2 = _interopRequireDefault(require('@babel/runtime/helpers/slicedToArray'));

var _css2 = _interopRequireDefault(require('@emotion/css'));

var _styledBase = _interopRequireDefault(require('@emotion/styled-base'));

var _react = _interopRequireWildcard(require('react'));

var _isEmpty = _interopRequireDefault(require('lodash/isEmpty'));

var _isEqual = _interopRequireDefault(require('lodash/isEqual'));

var _toLower = _interopRequireDefault(require('lodash/toLower'));

var _uniq = _interopRequireDefault(require('lodash/uniq'));

var _initial = _interopRequireDefault(require('lodash/initial'));

var _without = _interopRequireDefault(require('lodash/without'));

var _includes = _interopRequireDefault(require('lodash/includes'));

var _map = _interopRequireDefault(require('lodash/map'));

var _compact = _interopRequireDefault(require('lodash/compact'));

var _find = _interopRequireDefault(require('lodash/find'));

var _Icon = _interopRequireDefault(require('../../Icon'));

var _Option = _interopRequireDefault(require('./Option'));

var _Tag = _interopRequireDefault(require('../../Tag'));

var _useTheme = _interopRequireDefault(require('../../utils/useTheme'));

var _clsx = _interopRequireDefault(require('clsx'));

var _FormControlContext = _interopRequireDefault(require('../FormControl/FormControlContext'));

var _common = require('../common');

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return { default: obj };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj['default'] = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}

var __jsx = _react['default'].createElement;

function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}

var _ref2 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '1ttindi-Uikit-Container',
        styles: 'z-index:1;;label:Uikit-Container;',
      }
    : {
        name: '1ttindi-Uikit-Container',
        styles: 'z-index:1;;label:Uikit-Container;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var Container = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'e12ll94j0',
  label: 'Uikit-Container',
})(
  'position:relative;transform:scale(1);',
  function (_ref3) {
    var focus = _ref3.focus;
    return focus && _ref2;
  },
  process.env.NODE_ENV === 'production'
    ? ''
    : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
);
var OptionsWrapper = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'e12ll94j1',
  label: 'Uikit-OptionsWrapper',
})(
  'box-sizing:border-box;position:absolute;width:100%;z-index:1;background-color:white;border:solid 1px;border-color:',
  function (_ref4) {
    var theme = _ref4.theme;
    return theme.multiSelect.listBorderColor;
  },
  ';border-radius:0 0 4px 4px;box-shadow:',
  function (props) {
    return props.focused
      ? '0 1px 6px 0 rgba(0, 0, 0, 0.1), 0 1px 5px 0 rgba(0, 0, 0, 0.08)'
      : 'none';
  },
  ';' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
);
var OptionsContainer = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'e12ll94j2',
  label: 'Uikit-OptionsContainer',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: 'u5107n',
        styles:
          'box-sizing:border-box;position:relative;max-height:200px;overflow:auto;width:100%;',
      }
    : {
        name: 'u5107n',
        styles:
          'box-sizing:border-box;position:relative;max-height:200px;overflow:auto;width:100%;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);
var OptionList = /*#__PURE__*/ (0, _styledBase['default'])('ul', {
  target: 'e12ll94j3',
  label: 'Uikit-OptionList',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: '1l95nvm',
        styles: 'margin:0;padding:0;',
      }
    : {
        name: '1l95nvm',
        styles: 'margin:0;padding:0;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);
var Gap = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'e12ll94j4',
  label: 'Uikit-Gap',
})(
  'position:absolute;left:-1px;border:solid 1px;border-top:none;border-bottom:none;height:5px;transform:translateY(-5px);width:100%;border-color:',
  function (_ref5) {
    var theme = _ref5.theme;
    return theme.multiSelect.listBorderColor;
  },
  ';z-index:2;background-color:white;' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
);
var InputBox = /*#__PURE__*/ (0, _styledBase['default'])(_common.StyledInputWrapper, {
  target: 'e12ll94j5',
  label: 'Uikit-InputBox',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: '1n3n6tr',
        styles:
          'cursor:text;flex-wrap:wrap;align-items:center;position:relative;width:100%;z-index:2;padding:2px;',
      }
    : {
        name: '1n3n6tr',
        styles:
          'cursor:text;flex-wrap:wrap;align-items:center;position:relative;width:100%;z-index:2;padding:2px;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);
var Input = /*#__PURE__*/ (0, _styledBase['default'])('input', {
  target: 'e12ll94j6',
  label: 'Uikit-Input',
})(
  function (_ref6) {
    var theme = _ref6.theme;
    return /*#__PURE__*/ (0, _css2['default'])(
      theme.typography['default'],
      ';label:Uikit-Input;' +
        (process.env.NODE_ENV === 'production'
          ? ''
          : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
    );
  },
  ';background-color:transparent;border:none;display:block;flex-grow:1;padding:0 ',
  function (_ref7) {
    var single = _ref7.single;
    return single ? 10 : 5;
  },
  'px;&:focus{outline:none;}' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
);
var PlaceHolder = /*#__PURE__*/ (0, _styledBase['default'])('span', {
  target: 'e12ll94j7',
  label: 'Uikit-PlaceHolder',
})(
  function (_ref8) {
    var theme = _ref8.theme;
    return /*#__PURE__*/ (0, _css2['default'])(
      theme.typography.data,
      ';label:Uikit-PlaceHolder;' +
        (process.env.NODE_ENV === 'production'
          ? ''
          : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
    );
  },
  ';color:',
  function (_ref9) {
    var theme = _ref9.theme;
    return theme.multiSelect.placeHolderColor;
  },
  ';position:absolute;pointer-events:none;padding:8px 10px;&.disabled{color:',
  function (_ref10) {
    var theme = _ref10.theme;
    return theme.multiSelect.disabledTextColor;
  },
  ';}' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
);
var SelectedItem = /*#__PURE__*/ (0, _styledBase['default'])(_Tag['default'], {
  target: 'e12ll94j8',
  label: 'Uikit-SelectedItem',
})(
  'box-sizing:border-box;font-size:11px;cursor:pointer;margin-left:5px;margin-top:2px;margin-bottom:2px;&.disabled{color:',
  function (_ref11) {
    var theme = _ref11.theme;
    return theme.colors.grey;
  },
  ';background-color:',
  function (_ref12) {
    var theme = _ref12.theme;
    return theme.colors.grey_2;
  },
  ';}' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
);
var SectionTitle = /*#__PURE__*/ (0, _styledBase['default'])('li', {
  target: 'e12ll94j9',
  label: 'Uikit-SectionTitle',
})(
  'list-style:none;font-size:11px;height:27px;line-height:27px;padding-left:7px;font-family:',
  function (_ref13) {
    var theme = _ref13.theme;
    return theme.typography.paragraph.fontFamily;
  },
  ';color:',
  function (_ref14) {
    var theme = _ref14.theme;
    return theme.colors.grey;
  },
  ';' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
);

function Highlight(_ref15) {
  var string = _ref15.string,
    searchText = _ref15.searchText;

  if ((0, _isEmpty['default'])(searchText)) {
    return (0, _core.jsx)(_react['default'].Fragment, null, string);
  }

  var idx = (0, _toLower['default'])(string).indexOf((0, _toLower['default'])(searchText));
  var theme = (0, _useTheme['default'])();

  if (idx === -1) {
    return (0, _core.jsx)(_react['default'].Fragment, null, string);
  } else {
    var before = string.substring(0, idx);
    var match = string.substring(idx, idx + searchText.length);
    var after = string.substring(idx + searchText.length, string.length);
    return (0, _core.jsx)(
      _react['default'].Fragment,
      null,
      before,
      (0, _core.jsx)(
        'span',
        {
          css: /*#__PURE__*/ (0, _css2['default'])(
            'background-color:',
            theme.colors.warning_3,
            ';;label:Uikit-Highlight;' +
              (process.env.NODE_ENV === 'production'
                ? ''
                : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
          ),
        },
        match,
      ),
      after,
    );
  }
}

var _ref =
  process.env.NODE_ENV === 'production'
    ? {
        name: '1j3iz5q-Uikit-css',
        styles: 'padding:5px 0px 5px 7px;;label:Uikit-css;',
      }
    : {
        name: '1j3iz5q-Uikit-css',
        styles: 'padding:5px 0px 5px 7px;;label:Uikit-css;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var MultiSelect = function MultiSelect(_ref16) {
  var _ref16$ariaLabel = _ref16['aria-label'],
    ariaLabel = _ref16$ariaLabel === void 0 ? 'search' : _ref16$ariaLabel,
    _ref16$allowNew = _ref16.allowNew,
    allowNew = _ref16$allowNew === void 0 ? false : _ref16$allowNew,
    children = _ref16.children,
    _ref16$disabled = _ref16.disabled,
    disabled = _ref16$disabled === void 0 ? false : _ref16$disabled,
    _ref16$error = _ref16.error,
    error = _ref16$error === void 0 ? false : _ref16$error,
    _ref16$id = _ref16.id,
    id = _ref16$id === void 0 ? '' : _ref16$id,
    inputProps = _ref16.inputProps,
    _ref16$name = _ref16.name,
    name = _ref16$name === void 0 ? '' : _ref16$name,
    _ref16$onBlur = _ref16.onBlur,
    onBlur = _ref16$onBlur === void 0 ? function (e) {} : _ref16$onBlur,
    onChange = _ref16.onChange,
    _ref16$onFocus = _ref16.onFocus,
    onFocus = _ref16$onFocus === void 0 ? function (e) {} : _ref16$onFocus,
    placeholder = _ref16.placeholder,
    _ref16$single = _ref16.single,
    single = _ref16$single === void 0 ? false : _ref16$single,
    _ref16$size = _ref16.size,
    size = _ref16$size === void 0 ? _common.INPUT_SIZES.LG : _ref16$size,
    _ref16$value = _ref16.value,
    value = _ref16$value === void 0 ? [] : _ref16$value;

  var contextValue = _react['default'].useContext(_FormControlContext['default']);

  var _React$useState = _react['default'].useState(
      contextValue === null || contextValue === void 0 ? void 0 : contextValue.focused,
    ),
    _React$useState2 = (0, _slicedToArray2['default'])(_React$useState, 2),
    focusState = _React$useState2[0],
    setFocusState = _React$useState2[1];

  var _React$useState3 = _react['default'].useState(''),
    _React$useState4 = (0, _slicedToArray2['default'])(_React$useState3, 2),
    searchString = _React$useState4[0],
    setSearchString = _React$useState4[1];

  var hasError =
    (contextValue === null || contextValue === void 0 ? void 0 : contextValue.error) || !!error;
  var isDisabled =
    (contextValue === null || contextValue === void 0 ? void 0 : contextValue.disabled) || disabled;

  var createCustomEvent = function createCustomEvent(event, newValue) {
    return Object.assign(Object.assign({}, event), {
      target: Object.assign(
        Object.assign(Object.assign({}, event.target), {
          id: id,
          name: name,
          tagName: 'MULTISELECT',
          type: 'select-'.concat(single ? 'one' : 'multiple'),
        }),
        newValue && {
          value: newValue,
        },
      ),
    });
  };

  var handleItemClick = function handleItemClick(child) {
    return function (event) {
      event.persist();
      var newValue = single
        ? [child.props.value]
        : (0, _uniq['default'])(
            [].concat((0, _toConsumableArray2['default'])(value), [child.props.value]),
          );
      setSearchString(single ? child.props.value : '');
      onChange(createCustomEvent(event, newValue), child);
    };
  };

  var items = _react['default'].Children.map(children, function (child) {
    var selected = (0, _includes['default'])(value, child.props.value);

    if (selected) {
      return null;
    }

    if (searchString !== '') {
      if (
        !(0, _includes['default'])(
          (0, _toLower['default'])(child.props.children),
          (0, _toLower['default'])(searchString),
        )
      ) {
        return null;
      }
    }

    return /*#__PURE__*/ _react['default'].cloneElement(child, {
      onMouseDown: handleItemClick(child),
      role: 'option',
      selected: selected,
      value: undefined,
      css: _ref,
      children: (0, _core.jsx)(Highlight, {
        string: child.props.children,
        searchText: searchString,
      }),
      'data-value': child.props.value,
    });
  });

  var handleNewItemClick = function handleNewItemClick(event) {
    var newValue = single
      ? [searchString]
      : (0, _uniq['default'])(
          [].concat((0, _toConsumableArray2['default'])(value), [searchString]),
        );
    setSearchString(single ? searchString : '');
    onChange(createCustomEvent(event, newValue), null);
  };

  var handleInputChange = function handleInputChange(event) {
    setSearchString(event.target.value);
  };

  var handleInputKeyDown = function handleInputKeyDown(event) {
    if (event.key === 'Backspace') {
      if (single ? searchString.length <= 1 : searchString.length === 0) {
        event.persist();
        var newValue = (0, _initial['default'])(value);
        (0, _isEqual['default'])(value, newValue) || onChange(createCustomEvent(event, newValue));
      }
    } else if (event.key === 'Enter' || event.key === 'Tab') {
      if (allowNew) {
        if (searchString.length !== 0) {
          event.persist();

          var _newValue = single
            ? [searchString]
            : (0, _uniq['default'])(
                [].concat((0, _toConsumableArray2['default'])(value), [searchString]),
              );

          setSearchString(single ? searchString : '');
          onChange(createCustomEvent(event, _newValue));
        }
      } else {
        if (searchString.length !== 0 && items.length > 0) {
          event.persist();
          var valueAttr = items[0].props['data-value'];

          var _newValue2 = single
            ? [valueAttr]
            : (0, _uniq['default'])(
                [].concat((0, _toConsumableArray2['default'])(value), [valueAttr]),
              );

          setSearchString(single ? valueAttr : '');
          onChange(createCustomEvent(event, _newValue2));
        }
      }
    }
  };

  var handleInputFocus = function handleInputFocus(event) {
    var _a;

    (_a = contextValue === null || contextValue === void 0 ? void 0 : contextValue.handleFocus) ===
      null || _a === void 0
      ? void 0
      : _a.call(contextValue);
    onFocus(createCustomEvent(event));
    setFocusState(true);
  };

  var handleInputBlur = function handleInputBlur(event) {
    var _a;

    (_a = contextValue === null || contextValue === void 0 ? void 0 : contextValue.handleBlur) ===
      null || _a === void 0
      ? void 0
      : _a.call(contextValue);
    onBlur(createCustomEvent(event));
    setFocusState(false);
  };

  var handleSelectedItemClick = function handleSelectedItemClick(item) {
    return function (event) {
      event.persist();
      onChange(
        createCustomEvent(
          event,
          (0, _without['default'])((0, _toConsumableArray2['default'])(value), item.value),
        ),
        item,
      );
    };
  };

  var selectedItems = (0, _map['default'])(value, function (v) {
    var c = (0, _find['default'])(_react['default'].Children.toArray(children), {
      props: {
        value: v,
      },
    });

    if (typeof c === 'undefined') {
      return {
        value: v,
        displayName: v,
      };
    }

    return {
      value: c.props.value,
      displayName: c.props.children,
    };
  });
  var showPlaceHolder = (0, _isEmpty['default'])(value) && searchString === '';
  var showOptions =
    focusState && (allowNew || !(0, _isEmpty['default'])((0, _compact['default'])(items)));
  var theme = (0, _useTheme['default'])();
  (0, _react.useEffect)(
    function () {
      if (single) {
        var newValue = value[0] || '';
        newValue === searchString || setSearchString(newValue);
      }
    },
    [value],
  );
  return (0, _core.jsx)(
    Container,
    {
      focus: focusState,
    },
    (0, _core.jsx)(
      InputBox,
      {
        inputState: focusState ? _common.INPUT_STATES.focus : _common.INPUT_STATES['default'],
        size: size,
        disabled: isDisabled,
        error: hasError,
      },
      showPlaceHolder
        ? ![false, ''].includes(placeholder) &&
            (0, _core.jsx)(
              PlaceHolder,
              {
                className: (0, _clsx['default'])({
                  disabled: isDisabled,
                  hasError: hasError,
                  focused: focusState,
                }),
              },
              placeholder || (single ? 'Select one' : 'Add one or more...'),
            )
        : !single &&
            selectedItems.map(function (item) {
              return (0, _core.jsx)(
                SelectedItem,
                {
                  key: item.value,
                  onClick: handleSelectedItemClick(item),
                  className: (0, _clsx['default'])({
                    disabled: isDisabled,
                    hasError: hasError,
                    focused: focusState,
                  }),
                },
                item.displayName,
                '\xA0\xA0',
                (0, _core.jsx)(_Icon['default'], {
                  width: '8px',
                  height: '8px',
                  name: 'times',
                  fill: isDisabled ? theme.colors.grey : theme.colors.white,
                }),
              );
            }),
      (0, _core.jsx)(Input, {
        'aria-label': ariaLabel,
        autoComplete: 'off',
        disabled: isDisabled,
        id: id || ''.concat(name, '-multiselect'),
        single: single,
        onBlur: handleInputBlur,
        onChange: handleInputChange,
        onFocus: handleInputFocus,
        onKeyDown: handleInputKeyDown,
        value: searchString,
      }),
    ),
    showOptions &&
      (0, _core.jsx)(
        _react['default'].Fragment,
        null,
        (0, _core.jsx)(
          OptionsWrapper,
          {
            focused: focusState,
          },
          (0, _core.jsx)(Gap, null),
          (0, _core.jsx)(
            OptionsContainer,
            null,
            (0, _core.jsx)(
              OptionList,
              null,
              allowNew &&
                !(0, _isEmpty['default'])(items) &&
                (0, _core.jsx)(SectionTitle, null, 'SUGGESTIONS'),
              items,
            ),
          ),
          allowNew &&
            !(0, _isEmpty['default'])(searchString) &&
            (0, _core.jsx)(
              _Option['default'],
              {
                'data-value': searchString,
                css: /*#__PURE__*/ (0, _css2['default'])(
                  'border-top:',
                  (0, _isEmpty['default'])(items) ? 'none' : '1px solid ' + theme.colors.grey_2,
                  ';;label:Uikit-MultiSelect;' +
                    (process.env.NODE_ENV === 'production'
                      ? ''
                      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
                ),
                onMouseDown: handleNewItemClick,
              },
              searchString,
              (0, _core.jsx)(
                'span',
                {
                  css: /*#__PURE__*/ (0, _css2['default'])(
                    'font-size:11px;color:',
                    theme.colors.grey,
                    ';margin-left:0.5em;;label:Uikit-MultiSelect;' +
                      (process.env.NODE_ENV === 'production'
                        ? ''
                        : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
                  ),
                },
                '(NEW VALUE)',
              ),
            ),
        ),
      ),
    (0, _core.jsx)(
      'input',
      (0, _extends2['default'])(
        {
          value: value,
          name: name,
          type: 'hidden',
          disabled: isDisabled,
        },
        inputProps,
      ),
    ),
  );
};

var _default = MultiSelect;
exports['default'] = _default;
