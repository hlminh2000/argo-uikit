'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports['default'] = void 0;

var _core = require('@emotion/core');

var _extends2 = _interopRequireDefault(require('@babel/runtime/helpers/extends'));

var _css2 = _interopRequireDefault(require('@emotion/css'));

var _styledBase = _interopRequireDefault(require('@emotion/styled-base'));

var _react = _interopRequireDefault(require('react'));

var _propTypes = _interopRequireDefault(require('prop-types'));

var _Icon = _interopRequireDefault(require('../Icon'));

var _icgc_logo = _interopRequireDefault(require('../assets/icgc_logo.svg'));

var _reactGridSystem = require('react-grid-system');

var _Link = _interopRequireDefault(require('../Link'));

var __jsx = _react['default'].createElement;

function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}

/*
 * Copyright (c) 2020 The Ontario Institute for Cancer Research. All rights reserved
 *
 * This program and the accompanying materials are made available under the terms of
 * the GNU Affero General Public License v3.0. You should have received a copy of the
 * GNU Affero General Public License along with this program.
 *  If not, see <http://www.gnu.org/licenses/>.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

var Container = /*#__PURE__*/ (0, _styledBase['default'])('footer', {
  target: 'eeucdap0',
  label: 'Uikit-Container',
})(function (_ref5) {
  var theme = _ref5.theme;
  return /*#__PURE__*/ (0,
  _css2[
    'default'
  ])(theme.typography.paragraph, ';label:Uikit-Container;' + (process.env.NODE_ENV === 'production' ? '' : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQ21CIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbic7XG5pbXBvcnQgaWNnY0xvZ28gZnJvbSAnLi4vYXNzZXRzL2ljZ2NfbG9nby5zdmcnO1xuaW1wb3J0IGNzcyBmcm9tICdAZW1vdGlvbi9jc3MnO1xuaW1wb3J0IHsgUm93LCBDb2wgfSBmcm9tICdyZWFjdC1ncmlkLXN5c3RlbSc7XG5pbXBvcnQgQSBmcm9tICcuLi9MaW5rJztcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZCgnZm9vdGVyJykgYFxuICAkeyh7IHRoZW1lIH0pID0+IGNzcyh0aGVtZS50eXBvZ3JhcGh5LnBhcmFncmFwaCl9O1xuICBmb250LXNpemU6IDExcHg7XG4gIG1pbi1oZWlnaHQ6IDU4cHg7XG5cbiAgJiBhICsgc3ZnIHtcbiAgICBtYXJnaW46IDBweCA4cHg7XG4gIH1cbmA7XG5jb25zdCBGb290ZXIgPSAoX2EpID0+IHtcbiAgICB2YXIgeyB2ZXJzaW9uID0gJ1t2ZXJzaW9uXScsIGFwaVZlcnNpb24gPSBudWxsLCBsaW5rcyA9IFtdLCBjbGFzc05hbWUgPSAnJyB9ID0gX2EsIG90aGVyUHJvcHMgPSBfX3Jlc3QoX2EsIFtcInZlcnNpb25cIiwgXCJhcGlWZXJzaW9uXCIsIFwibGlua3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuICAgIHJldHVybiAoPENvbnRhaW5lciBjbGFzc05hbWU9e2Bmb290ZXIgJHtjbGFzc05hbWV9YH0gey4uLm90aGVyUHJvcHN9PlxuICAgIDxSb3cgY3NzPXtjc3MgYFxuICAgICAgICBtaW4taGVpZ2h0OiA1OHB4O1xuICAgICAgYH0ganVzdGlmeT1cImJldHdlZW5cIiBub2d1dHRlcj5cbiAgICAgIDxDb2wgbWQ9ezV9IGNzcz17Y3NzIGBcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGB9PlxuICAgICAgICDCqSB7bmV3IERhdGUoKS5nZXRGdWxsWWVhcigpfSBJQ0dDIEFSR08uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gICAgICAgIDxiciAvPlxuICAgICAgICBJQ0dDIEFSR08gRGF0YSBQbGF0Zm9ybSB7dmVyc2lvbn0ge2FwaVZlcnNpb24gJiYgYC0gQVBJICR7YXBpVmVyc2lvbn1gfVxuICAgICAgPC9Db2w+XG4gICAgICA8Q29sIG1kPXs3fSBjc3M9e2NzcyBgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMjJweDtcbiAgICAgICAgYH0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAge2xpbmtzLm1hcCgoeyBkaXNwbGF5TmFtZSwgaHJlZiwgdGFyZ2V0IH0sIGlkeCkgPT4ge1xuICAgICAgICBpZiAoaWR4ICE9PSBsaW5rcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gKDxSZWFjdC5GcmFnbWVudCBrZXk9e2Rpc3BsYXlOYW1lfT5cbiAgICAgICAgICAgICAgICAgIDxBIHRhcmdldD17dGFyZ2V0fSBocmVmPXtocmVmfT5cbiAgICAgICAgICAgICAgICAgICAge2Rpc3BsYXlOYW1lfVxuICAgICAgICAgICAgICAgICAgPC9BPlxuICAgICAgICAgICAgICAgICAgPEljb24gd2lkdGg9XCIxMnB4XCIgaGVpZ2h0PVwiMTJweFwiIG5hbWU9XCJzbGFzaFwiIGZpbGw9XCJncmV5XzFcIi8+XG4gICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICg8QSBrZXk9e2Rpc3BsYXlOYW1lfSBocmVmPXtocmVmfSB0YXJnZXQ9e3RhcmdldH0+XG4gICAgICAgICAgICAgICAgICB7ZGlzcGxheU5hbWV9XG4gICAgICAgICAgICAgICAgPC9BPik7XG4gICAgICAgIH1cbiAgICB9KX1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZTtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAwO1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDE2cHg7XG4gICAgICAgICAgYH0+XG4gICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm9pY3Iub24uY2EvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAgICA8aW1nIGFsdD1cIk9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2hcIiBzcmM9e2ljZ2NMb2dvfSBzdHlsZT17eyBoZWlnaHQ6ICc0MnB4JyB9fS8+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvQ29sPlxuICAgIDwvUm93PlxuICA8L0NvbnRhaW5lcj4pO1xufTtcbkZvb3Rlci5wcm9wVHlwZXMgPSB7XG4gICAgdmVyc2lvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhcGlWZXJzaW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxpbmtzOiBQcm9wVHlwZXMuYXJyYXksXG59O1xuZXhwb3J0IGRlZmF1bHQgRm9vdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanN4Lm1hcCJdfQ== */'));
}, ';font-size:11px;min-height:58px;& a + svg{margin:0px 8px;}' +
  (process.env.NODE_ENV === 'production'
    ? ''
    : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxQ21DIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbic7XG5pbXBvcnQgaWNnY0xvZ28gZnJvbSAnLi4vYXNzZXRzL2ljZ2NfbG9nby5zdmcnO1xuaW1wb3J0IGNzcyBmcm9tICdAZW1vdGlvbi9jc3MnO1xuaW1wb3J0IHsgUm93LCBDb2wgfSBmcm9tICdyZWFjdC1ncmlkLXN5c3RlbSc7XG5pbXBvcnQgQSBmcm9tICcuLi9MaW5rJztcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZCgnZm9vdGVyJykgYFxuICAkeyh7IHRoZW1lIH0pID0+IGNzcyh0aGVtZS50eXBvZ3JhcGh5LnBhcmFncmFwaCl9O1xuICBmb250LXNpemU6IDExcHg7XG4gIG1pbi1oZWlnaHQ6IDU4cHg7XG5cbiAgJiBhICsgc3ZnIHtcbiAgICBtYXJnaW46IDBweCA4cHg7XG4gIH1cbmA7XG5jb25zdCBGb290ZXIgPSAoX2EpID0+IHtcbiAgICB2YXIgeyB2ZXJzaW9uID0gJ1t2ZXJzaW9uXScsIGFwaVZlcnNpb24gPSBudWxsLCBsaW5rcyA9IFtdLCBjbGFzc05hbWUgPSAnJyB9ID0gX2EsIG90aGVyUHJvcHMgPSBfX3Jlc3QoX2EsIFtcInZlcnNpb25cIiwgXCJhcGlWZXJzaW9uXCIsIFwibGlua3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuICAgIHJldHVybiAoPENvbnRhaW5lciBjbGFzc05hbWU9e2Bmb290ZXIgJHtjbGFzc05hbWV9YH0gey4uLm90aGVyUHJvcHN9PlxuICAgIDxSb3cgY3NzPXtjc3MgYFxuICAgICAgICBtaW4taGVpZ2h0OiA1OHB4O1xuICAgICAgYH0ganVzdGlmeT1cImJldHdlZW5cIiBub2d1dHRlcj5cbiAgICAgIDxDb2wgbWQ9ezV9IGNzcz17Y3NzIGBcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGB9PlxuICAgICAgICDCqSB7bmV3IERhdGUoKS5nZXRGdWxsWWVhcigpfSBJQ0dDIEFSR08uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gICAgICAgIDxiciAvPlxuICAgICAgICBJQ0dDIEFSR08gRGF0YSBQbGF0Zm9ybSB7dmVyc2lvbn0ge2FwaVZlcnNpb24gJiYgYC0gQVBJICR7YXBpVmVyc2lvbn1gfVxuICAgICAgPC9Db2w+XG4gICAgICA8Q29sIG1kPXs3fSBjc3M9e2NzcyBgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMjJweDtcbiAgICAgICAgYH0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAge2xpbmtzLm1hcCgoeyBkaXNwbGF5TmFtZSwgaHJlZiwgdGFyZ2V0IH0sIGlkeCkgPT4ge1xuICAgICAgICBpZiAoaWR4ICE9PSBsaW5rcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gKDxSZWFjdC5GcmFnbWVudCBrZXk9e2Rpc3BsYXlOYW1lfT5cbiAgICAgICAgICAgICAgICAgIDxBIHRhcmdldD17dGFyZ2V0fSBocmVmPXtocmVmfT5cbiAgICAgICAgICAgICAgICAgICAge2Rpc3BsYXlOYW1lfVxuICAgICAgICAgICAgICAgICAgPC9BPlxuICAgICAgICAgICAgICAgICAgPEljb24gd2lkdGg9XCIxMnB4XCIgaGVpZ2h0PVwiMTJweFwiIG5hbWU9XCJzbGFzaFwiIGZpbGw9XCJncmV5XzFcIi8+XG4gICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICg8QSBrZXk9e2Rpc3BsYXlOYW1lfSBocmVmPXtocmVmfSB0YXJnZXQ9e3RhcmdldH0+XG4gICAgICAgICAgICAgICAgICB7ZGlzcGxheU5hbWV9XG4gICAgICAgICAgICAgICAgPC9BPik7XG4gICAgICAgIH1cbiAgICB9KX1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZTtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAwO1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDE2cHg7XG4gICAgICAgICAgYH0+XG4gICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm9pY3Iub24uY2EvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAgICA8aW1nIGFsdD1cIk9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2hcIiBzcmM9e2ljZ2NMb2dvfSBzdHlsZT17eyBoZWlnaHQ6ICc0MnB4JyB9fS8+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvQ29sPlxuICAgIDwvUm93PlxuICA8L0NvbnRhaW5lcj4pO1xufTtcbkZvb3Rlci5wcm9wVHlwZXMgPSB7XG4gICAgdmVyc2lvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhcGlWZXJzaW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxpbmtzOiBQcm9wVHlwZXMuYXJyYXksXG59O1xuZXhwb3J0IGRlZmF1bHQgRm9vdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanN4Lm1hcCJdfQ== */'));

var _ref =
  process.env.NODE_ENV === 'production'
    ? {
        name: '1i3stw2-Uikit-Footer',
        styles:
          'display:flex;align-items:center;flex-direction:row-reverse;line-height:0;margin-left:16px;;label:Uikit-Footer;',
      }
    : {
        name: '1i3stw2-Uikit-Footer',
        styles:
          'display:flex;align-items:center;flex-direction:row-reverse;line-height:0;margin-left:16px;;label:Uikit-Footer;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxRnNCIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbic7XG5pbXBvcnQgaWNnY0xvZ28gZnJvbSAnLi4vYXNzZXRzL2ljZ2NfbG9nby5zdmcnO1xuaW1wb3J0IGNzcyBmcm9tICdAZW1vdGlvbi9jc3MnO1xuaW1wb3J0IHsgUm93LCBDb2wgfSBmcm9tICdyZWFjdC1ncmlkLXN5c3RlbSc7XG5pbXBvcnQgQSBmcm9tICcuLi9MaW5rJztcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZCgnZm9vdGVyJykgYFxuICAkeyh7IHRoZW1lIH0pID0+IGNzcyh0aGVtZS50eXBvZ3JhcGh5LnBhcmFncmFwaCl9O1xuICBmb250LXNpemU6IDExcHg7XG4gIG1pbi1oZWlnaHQ6IDU4cHg7XG5cbiAgJiBhICsgc3ZnIHtcbiAgICBtYXJnaW46IDBweCA4cHg7XG4gIH1cbmA7XG5jb25zdCBGb290ZXIgPSAoX2EpID0+IHtcbiAgICB2YXIgeyB2ZXJzaW9uID0gJ1t2ZXJzaW9uXScsIGFwaVZlcnNpb24gPSBudWxsLCBsaW5rcyA9IFtdLCBjbGFzc05hbWUgPSAnJyB9ID0gX2EsIG90aGVyUHJvcHMgPSBfX3Jlc3QoX2EsIFtcInZlcnNpb25cIiwgXCJhcGlWZXJzaW9uXCIsIFwibGlua3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuICAgIHJldHVybiAoPENvbnRhaW5lciBjbGFzc05hbWU9e2Bmb290ZXIgJHtjbGFzc05hbWV9YH0gey4uLm90aGVyUHJvcHN9PlxuICAgIDxSb3cgY3NzPXtjc3MgYFxuICAgICAgICBtaW4taGVpZ2h0OiA1OHB4O1xuICAgICAgYH0ganVzdGlmeT1cImJldHdlZW5cIiBub2d1dHRlcj5cbiAgICAgIDxDb2wgbWQ9ezV9IGNzcz17Y3NzIGBcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGB9PlxuICAgICAgICDCqSB7bmV3IERhdGUoKS5nZXRGdWxsWWVhcigpfSBJQ0dDIEFSR08uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gICAgICAgIDxiciAvPlxuICAgICAgICBJQ0dDIEFSR08gRGF0YSBQbGF0Zm9ybSB7dmVyc2lvbn0ge2FwaVZlcnNpb24gJiYgYC0gQVBJICR7YXBpVmVyc2lvbn1gfVxuICAgICAgPC9Db2w+XG4gICAgICA8Q29sIG1kPXs3fSBjc3M9e2NzcyBgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMjJweDtcbiAgICAgICAgYH0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAge2xpbmtzLm1hcCgoeyBkaXNwbGF5TmFtZSwgaHJlZiwgdGFyZ2V0IH0sIGlkeCkgPT4ge1xuICAgICAgICBpZiAoaWR4ICE9PSBsaW5rcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gKDxSZWFjdC5GcmFnbWVudCBrZXk9e2Rpc3BsYXlOYW1lfT5cbiAgICAgICAgICAgICAgICAgIDxBIHRhcmdldD17dGFyZ2V0fSBocmVmPXtocmVmfT5cbiAgICAgICAgICAgICAgICAgICAge2Rpc3BsYXlOYW1lfVxuICAgICAgICAgICAgICAgICAgPC9BPlxuICAgICAgICAgICAgICAgICAgPEljb24gd2lkdGg9XCIxMnB4XCIgaGVpZ2h0PVwiMTJweFwiIG5hbWU9XCJzbGFzaFwiIGZpbGw9XCJncmV5XzFcIi8+XG4gICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICg8QSBrZXk9e2Rpc3BsYXlOYW1lfSBocmVmPXtocmVmfSB0YXJnZXQ9e3RhcmdldH0+XG4gICAgICAgICAgICAgICAgICB7ZGlzcGxheU5hbWV9XG4gICAgICAgICAgICAgICAgPC9BPik7XG4gICAgICAgIH1cbiAgICB9KX1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZTtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAwO1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDE2cHg7XG4gICAgICAgICAgYH0+XG4gICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm9pY3Iub24uY2EvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAgICA8aW1nIGFsdD1cIk9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2hcIiBzcmM9e2ljZ2NMb2dvfSBzdHlsZT17eyBoZWlnaHQ6ICc0MnB4JyB9fS8+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvQ29sPlxuICAgIDwvUm93PlxuICA8L0NvbnRhaW5lcj4pO1xufTtcbkZvb3Rlci5wcm9wVHlwZXMgPSB7XG4gICAgdmVyc2lvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhcGlWZXJzaW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxpbmtzOiBQcm9wVHlwZXMuYXJyYXksXG59O1xuZXhwb3J0IGRlZmF1bHQgRm9vdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanN4Lm1hcCJdfQ== */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref2 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '1d9skn6-Uikit-Footer',
        styles:
          'display:flex;align-items:center;font-size:12px;justify-content:flex-end;padding-left:22px;;label:Uikit-Footer;',
      }
    : {
        name: '1d9skn6-Uikit-Footer',
        styles:
          'display:flex;align-items:center;font-size:12px;justify-content:flex-end;padding-left:22px;;label:Uikit-Footer;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0RDJCIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbic7XG5pbXBvcnQgaWNnY0xvZ28gZnJvbSAnLi4vYXNzZXRzL2ljZ2NfbG9nby5zdmcnO1xuaW1wb3J0IGNzcyBmcm9tICdAZW1vdGlvbi9jc3MnO1xuaW1wb3J0IHsgUm93LCBDb2wgfSBmcm9tICdyZWFjdC1ncmlkLXN5c3RlbSc7XG5pbXBvcnQgQSBmcm9tICcuLi9MaW5rJztcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZCgnZm9vdGVyJykgYFxuICAkeyh7IHRoZW1lIH0pID0+IGNzcyh0aGVtZS50eXBvZ3JhcGh5LnBhcmFncmFwaCl9O1xuICBmb250LXNpemU6IDExcHg7XG4gIG1pbi1oZWlnaHQ6IDU4cHg7XG5cbiAgJiBhICsgc3ZnIHtcbiAgICBtYXJnaW46IDBweCA4cHg7XG4gIH1cbmA7XG5jb25zdCBGb290ZXIgPSAoX2EpID0+IHtcbiAgICB2YXIgeyB2ZXJzaW9uID0gJ1t2ZXJzaW9uXScsIGFwaVZlcnNpb24gPSBudWxsLCBsaW5rcyA9IFtdLCBjbGFzc05hbWUgPSAnJyB9ID0gX2EsIG90aGVyUHJvcHMgPSBfX3Jlc3QoX2EsIFtcInZlcnNpb25cIiwgXCJhcGlWZXJzaW9uXCIsIFwibGlua3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuICAgIHJldHVybiAoPENvbnRhaW5lciBjbGFzc05hbWU9e2Bmb290ZXIgJHtjbGFzc05hbWV9YH0gey4uLm90aGVyUHJvcHN9PlxuICAgIDxSb3cgY3NzPXtjc3MgYFxuICAgICAgICBtaW4taGVpZ2h0OiA1OHB4O1xuICAgICAgYH0ganVzdGlmeT1cImJldHdlZW5cIiBub2d1dHRlcj5cbiAgICAgIDxDb2wgbWQ9ezV9IGNzcz17Y3NzIGBcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGB9PlxuICAgICAgICDCqSB7bmV3IERhdGUoKS5nZXRGdWxsWWVhcigpfSBJQ0dDIEFSR08uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gICAgICAgIDxiciAvPlxuICAgICAgICBJQ0dDIEFSR08gRGF0YSBQbGF0Zm9ybSB7dmVyc2lvbn0ge2FwaVZlcnNpb24gJiYgYC0gQVBJICR7YXBpVmVyc2lvbn1gfVxuICAgICAgPC9Db2w+XG4gICAgICA8Q29sIG1kPXs3fSBjc3M9e2NzcyBgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMjJweDtcbiAgICAgICAgYH0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAge2xpbmtzLm1hcCgoeyBkaXNwbGF5TmFtZSwgaHJlZiwgdGFyZ2V0IH0sIGlkeCkgPT4ge1xuICAgICAgICBpZiAoaWR4ICE9PSBsaW5rcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gKDxSZWFjdC5GcmFnbWVudCBrZXk9e2Rpc3BsYXlOYW1lfT5cbiAgICAgICAgICAgICAgICAgIDxBIHRhcmdldD17dGFyZ2V0fSBocmVmPXtocmVmfT5cbiAgICAgICAgICAgICAgICAgICAge2Rpc3BsYXlOYW1lfVxuICAgICAgICAgICAgICAgICAgPC9BPlxuICAgICAgICAgICAgICAgICAgPEljb24gd2lkdGg9XCIxMnB4XCIgaGVpZ2h0PVwiMTJweFwiIG5hbWU9XCJzbGFzaFwiIGZpbGw9XCJncmV5XzFcIi8+XG4gICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICg8QSBrZXk9e2Rpc3BsYXlOYW1lfSBocmVmPXtocmVmfSB0YXJnZXQ9e3RhcmdldH0+XG4gICAgICAgICAgICAgICAgICB7ZGlzcGxheU5hbWV9XG4gICAgICAgICAgICAgICAgPC9BPik7XG4gICAgICAgIH1cbiAgICB9KX1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZTtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAwO1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDE2cHg7XG4gICAgICAgICAgYH0+XG4gICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm9pY3Iub24uY2EvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAgICA8aW1nIGFsdD1cIk9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2hcIiBzcmM9e2ljZ2NMb2dvfSBzdHlsZT17eyBoZWlnaHQ6ICc0MnB4JyB9fS8+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvQ29sPlxuICAgIDwvUm93PlxuICA8L0NvbnRhaW5lcj4pO1xufTtcbkZvb3Rlci5wcm9wVHlwZXMgPSB7XG4gICAgdmVyc2lvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhcGlWZXJzaW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxpbmtzOiBQcm9wVHlwZXMuYXJyYXksXG59O1xuZXhwb3J0IGRlZmF1bHQgRm9vdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanN4Lm1hcCJdfQ== */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref3 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '1hmcqyu-Uikit-Footer',
        styles: 'display:flex;align-items:center;;label:Uikit-Footer;',
      }
    : {
        name: '1hmcqyu-Uikit-Footer',
        styles: 'display:flex;align-items:center;;label:Uikit-Footer;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvRDJCIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbic7XG5pbXBvcnQgaWNnY0xvZ28gZnJvbSAnLi4vYXNzZXRzL2ljZ2NfbG9nby5zdmcnO1xuaW1wb3J0IGNzcyBmcm9tICdAZW1vdGlvbi9jc3MnO1xuaW1wb3J0IHsgUm93LCBDb2wgfSBmcm9tICdyZWFjdC1ncmlkLXN5c3RlbSc7XG5pbXBvcnQgQSBmcm9tICcuLi9MaW5rJztcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZCgnZm9vdGVyJykgYFxuICAkeyh7IHRoZW1lIH0pID0+IGNzcyh0aGVtZS50eXBvZ3JhcGh5LnBhcmFncmFwaCl9O1xuICBmb250LXNpemU6IDExcHg7XG4gIG1pbi1oZWlnaHQ6IDU4cHg7XG5cbiAgJiBhICsgc3ZnIHtcbiAgICBtYXJnaW46IDBweCA4cHg7XG4gIH1cbmA7XG5jb25zdCBGb290ZXIgPSAoX2EpID0+IHtcbiAgICB2YXIgeyB2ZXJzaW9uID0gJ1t2ZXJzaW9uXScsIGFwaVZlcnNpb24gPSBudWxsLCBsaW5rcyA9IFtdLCBjbGFzc05hbWUgPSAnJyB9ID0gX2EsIG90aGVyUHJvcHMgPSBfX3Jlc3QoX2EsIFtcInZlcnNpb25cIiwgXCJhcGlWZXJzaW9uXCIsIFwibGlua3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuICAgIHJldHVybiAoPENvbnRhaW5lciBjbGFzc05hbWU9e2Bmb290ZXIgJHtjbGFzc05hbWV9YH0gey4uLm90aGVyUHJvcHN9PlxuICAgIDxSb3cgY3NzPXtjc3MgYFxuICAgICAgICBtaW4taGVpZ2h0OiA1OHB4O1xuICAgICAgYH0ganVzdGlmeT1cImJldHdlZW5cIiBub2d1dHRlcj5cbiAgICAgIDxDb2wgbWQ9ezV9IGNzcz17Y3NzIGBcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGB9PlxuICAgICAgICDCqSB7bmV3IERhdGUoKS5nZXRGdWxsWWVhcigpfSBJQ0dDIEFSR08uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gICAgICAgIDxiciAvPlxuICAgICAgICBJQ0dDIEFSR08gRGF0YSBQbGF0Zm9ybSB7dmVyc2lvbn0ge2FwaVZlcnNpb24gJiYgYC0gQVBJICR7YXBpVmVyc2lvbn1gfVxuICAgICAgPC9Db2w+XG4gICAgICA8Q29sIG1kPXs3fSBjc3M9e2NzcyBgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMjJweDtcbiAgICAgICAgYH0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAge2xpbmtzLm1hcCgoeyBkaXNwbGF5TmFtZSwgaHJlZiwgdGFyZ2V0IH0sIGlkeCkgPT4ge1xuICAgICAgICBpZiAoaWR4ICE9PSBsaW5rcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gKDxSZWFjdC5GcmFnbWVudCBrZXk9e2Rpc3BsYXlOYW1lfT5cbiAgICAgICAgICAgICAgICAgIDxBIHRhcmdldD17dGFyZ2V0fSBocmVmPXtocmVmfT5cbiAgICAgICAgICAgICAgICAgICAge2Rpc3BsYXlOYW1lfVxuICAgICAgICAgICAgICAgICAgPC9BPlxuICAgICAgICAgICAgICAgICAgPEljb24gd2lkdGg9XCIxMnB4XCIgaGVpZ2h0PVwiMTJweFwiIG5hbWU9XCJzbGFzaFwiIGZpbGw9XCJncmV5XzFcIi8+XG4gICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICg8QSBrZXk9e2Rpc3BsYXlOYW1lfSBocmVmPXtocmVmfSB0YXJnZXQ9e3RhcmdldH0+XG4gICAgICAgICAgICAgICAgICB7ZGlzcGxheU5hbWV9XG4gICAgICAgICAgICAgICAgPC9BPik7XG4gICAgICAgIH1cbiAgICB9KX1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZTtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAwO1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDE2cHg7XG4gICAgICAgICAgYH0+XG4gICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm9pY3Iub24uY2EvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAgICA8aW1nIGFsdD1cIk9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2hcIiBzcmM9e2ljZ2NMb2dvfSBzdHlsZT17eyBoZWlnaHQ6ICc0MnB4JyB9fS8+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvQ29sPlxuICAgIDwvUm93PlxuICA8L0NvbnRhaW5lcj4pO1xufTtcbkZvb3Rlci5wcm9wVHlwZXMgPSB7XG4gICAgdmVyc2lvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhcGlWZXJzaW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxpbmtzOiBQcm9wVHlwZXMuYXJyYXksXG59O1xuZXhwb3J0IGRlZmF1bHQgRm9vdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanN4Lm1hcCJdfQ== */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref4 =
  process.env.NODE_ENV === 'production'
    ? {
        name: 'eck2f5-Uikit-Footer',
        styles: 'min-height:58px;;label:Uikit-Footer;',
      }
    : {
        name: 'eck2f5-Uikit-Footer',
        styles: 'min-height:58px;;label:Uikit-Footer;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpRGtCIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbic7XG5pbXBvcnQgaWNnY0xvZ28gZnJvbSAnLi4vYXNzZXRzL2ljZ2NfbG9nby5zdmcnO1xuaW1wb3J0IGNzcyBmcm9tICdAZW1vdGlvbi9jc3MnO1xuaW1wb3J0IHsgUm93LCBDb2wgfSBmcm9tICdyZWFjdC1ncmlkLXN5c3RlbSc7XG5pbXBvcnQgQSBmcm9tICcuLi9MaW5rJztcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZCgnZm9vdGVyJykgYFxuICAkeyh7IHRoZW1lIH0pID0+IGNzcyh0aGVtZS50eXBvZ3JhcGh5LnBhcmFncmFwaCl9O1xuICBmb250LXNpemU6IDExcHg7XG4gIG1pbi1oZWlnaHQ6IDU4cHg7XG5cbiAgJiBhICsgc3ZnIHtcbiAgICBtYXJnaW46IDBweCA4cHg7XG4gIH1cbmA7XG5jb25zdCBGb290ZXIgPSAoX2EpID0+IHtcbiAgICB2YXIgeyB2ZXJzaW9uID0gJ1t2ZXJzaW9uXScsIGFwaVZlcnNpb24gPSBudWxsLCBsaW5rcyA9IFtdLCBjbGFzc05hbWUgPSAnJyB9ID0gX2EsIG90aGVyUHJvcHMgPSBfX3Jlc3QoX2EsIFtcInZlcnNpb25cIiwgXCJhcGlWZXJzaW9uXCIsIFwibGlua3NcIiwgXCJjbGFzc05hbWVcIl0pO1xuICAgIHJldHVybiAoPENvbnRhaW5lciBjbGFzc05hbWU9e2Bmb290ZXIgJHtjbGFzc05hbWV9YH0gey4uLm90aGVyUHJvcHN9PlxuICAgIDxSb3cgY3NzPXtjc3MgYFxuICAgICAgICBtaW4taGVpZ2h0OiA1OHB4O1xuICAgICAgYH0ganVzdGlmeT1cImJldHdlZW5cIiBub2d1dHRlcj5cbiAgICAgIDxDb2wgbWQ9ezV9IGNzcz17Y3NzIGBcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGB9PlxuICAgICAgICDCqSB7bmV3IERhdGUoKS5nZXRGdWxsWWVhcigpfSBJQ0dDIEFSR08uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gICAgICAgIDxiciAvPlxuICAgICAgICBJQ0dDIEFSR08gRGF0YSBQbGF0Zm9ybSB7dmVyc2lvbn0ge2FwaVZlcnNpb24gJiYgYC0gQVBJICR7YXBpVmVyc2lvbn1gfVxuICAgICAgPC9Db2w+XG4gICAgICA8Q29sIG1kPXs3fSBjc3M9e2NzcyBgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMjJweDtcbiAgICAgICAgYH0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAge2xpbmtzLm1hcCgoeyBkaXNwbGF5TmFtZSwgaHJlZiwgdGFyZ2V0IH0sIGlkeCkgPT4ge1xuICAgICAgICBpZiAoaWR4ICE9PSBsaW5rcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gKDxSZWFjdC5GcmFnbWVudCBrZXk9e2Rpc3BsYXlOYW1lfT5cbiAgICAgICAgICAgICAgICAgIDxBIHRhcmdldD17dGFyZ2V0fSBocmVmPXtocmVmfT5cbiAgICAgICAgICAgICAgICAgICAge2Rpc3BsYXlOYW1lfVxuICAgICAgICAgICAgICAgICAgPC9BPlxuICAgICAgICAgICAgICAgICAgPEljb24gd2lkdGg9XCIxMnB4XCIgaGVpZ2h0PVwiMTJweFwiIG5hbWU9XCJzbGFzaFwiIGZpbGw9XCJncmV5XzFcIi8+XG4gICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICg8QSBrZXk9e2Rpc3BsYXlOYW1lfSBocmVmPXtocmVmfSB0YXJnZXQ9e3RhcmdldH0+XG4gICAgICAgICAgICAgICAgICB7ZGlzcGxheU5hbWV9XG4gICAgICAgICAgICAgICAgPC9BPik7XG4gICAgICAgIH1cbiAgICB9KX1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZTtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAwO1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDE2cHg7XG4gICAgICAgICAgYH0+XG4gICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm9pY3Iub24uY2EvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAgICA8aW1nIGFsdD1cIk9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2hcIiBzcmM9e2ljZ2NMb2dvfSBzdHlsZT17eyBoZWlnaHQ6ICc0MnB4JyB9fS8+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvQ29sPlxuICAgIDwvUm93PlxuICA8L0NvbnRhaW5lcj4pO1xufTtcbkZvb3Rlci5wcm9wVHlwZXMgPSB7XG4gICAgdmVyc2lvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhcGlWZXJzaW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxpbmtzOiBQcm9wVHlwZXMuYXJyYXksXG59O1xuZXhwb3J0IGRlZmF1bHQgRm9vdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanN4Lm1hcCJdfQ== */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var Footer = function Footer(_a) {
  var _a$version = _a.version,
    version = _a$version === void 0 ? '[version]' : _a$version,
    _a$apiVersion = _a.apiVersion,
    apiVersion = _a$apiVersion === void 0 ? null : _a$apiVersion,
    _a$links = _a.links,
    links = _a$links === void 0 ? [] : _a$links,
    _a$className = _a.className,
    className = _a$className === void 0 ? '' : _a$className,
    otherProps = __rest(_a, ['version', 'apiVersion', 'links', 'className']);

  return (0, _core.jsx)(
    Container,
    (0, _extends2['default'])(
      {
        className: 'footer '.concat(className),
      },
      otherProps,
    ),
    (0, _core.jsx)(
      _reactGridSystem.Row,
      {
        css: _ref4,
        justify: 'between',
        nogutter: true,
      },
      (0, _core.jsx)(
        _reactGridSystem.Col,
        {
          md: 5,
          css: _ref3,
        },
        '\xA9 ',
        new Date().getFullYear(),
        ' ICGC ARGO. All rights reserved.',
        (0, _core.jsx)('br', null),
        'ICGC ARGO Data Platform ',
        version,
        ' ',
        apiVersion && '- API '.concat(apiVersion),
      ),
      (0, _core.jsx)(
        _reactGridSystem.Col,
        {
          md: 7,
          css: _ref2,
        },
        (0, _core.jsx)(
          'div',
          null,
          links.map(function (_ref6, idx) {
            var displayName = _ref6.displayName,
              href = _ref6.href,
              target = _ref6.target;

            if (idx !== links.length - 1) {
              return (0, _core.jsx)(
                _react['default'].Fragment,
                {
                  key: displayName,
                },
                (0, _core.jsx)(
                  _Link['default'],
                  {
                    target: target,
                    href: href,
                  },
                  displayName,
                ),
                (0, _core.jsx)(_Icon['default'], {
                  width: '12px',
                  height: '12px',
                  name: 'slash',
                  fill: 'grey_1',
                }),
              );
            } else {
              return (0, _core.jsx)(
                _Link['default'],
                {
                  key: displayName,
                  href: href,
                  target: target,
                },
                displayName,
              );
            }
          }),
        ),
        (0, _core.jsx)(
          'div',
          {
            css: _ref,
          },
          (0, _core.jsx)(
            'a',
            {
              href: 'https://www.oicr.on.ca/',
              target: '_blank',
            },
            (0, _core.jsx)('img', {
              alt: 'Ontario Institute for Cancer Research',
              src: _icgc_logo['default'],
              style: {
                height: '42px',
              },
            }),
          ),
        ),
      ),
    ),
  );
};

Footer.propTypes = {
  version: _propTypes['default'].string,
  apiVersion: _propTypes['default'].string,
  links: _propTypes['default'].array,
};
var _default = Footer;
exports['default'] = _default;
