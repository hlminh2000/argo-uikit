'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports['default'] = void 0;

var _core = require('@emotion/core');

var _slicedToArray2 = _interopRequireDefault(require('@babel/runtime/helpers/slicedToArray'));

var _react = _interopRequireDefault(require('react'));

var _Checkbox = _interopRequireDefault(require('../form/Checkbox'));

var _Tag = _interopRequireDefault(require('../Tag'));

var _Typography = _interopRequireDefault(require('../Typography'));

var _useTheme = _interopRequireDefault(require('../utils/useTheme'));

var _orderBy = _interopRequireDefault(require('lodash/orderBy'));

var _concat = _interopRequireDefault(require('lodash/concat'));

var _ViewAmountController = _interopRequireDefault(require('../OptionsList/ViewAmountController'));

var _Tooltip = _interopRequireDefault(require('../Tooltip'));

var __jsx = _react['default'].createElement;

function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}

var _ref =
  process.env.NODE_ENV === 'production'
    ? {
        name: '37cgrf-Uikit-StyledOption',
        styles: 'display:flex;align-items:center;flex:1;min-width:0;;label:Uikit-StyledOption;',
      }
    : {
        name: '37cgrf-Uikit-StyledOption',
        styles: 'display:flex;align-items:center;flex:1;min-width:0;;label:Uikit-StyledOption;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2RHNCIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAndWlraXQvZm9ybS9DaGVja2JveCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBUYWcgZnJvbSAndWlraXQvVGFnJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ3Vpa2l0L1R5cG9ncmFwaHknO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJ3Vpa2l0L3V0aWxzL3VzZVRoZW1lJztcbmltcG9ydCBvcmRlckJ5IGZyb20gJ2xvZGFzaC9vcmRlckJ5JztcbmltcG9ydCBjb25jYXQgZnJvbSAnbG9kYXNoL2NvbmNhdCc7XG5pbXBvcnQgVmlld0Ftb3VudENvbnRyb2xsZXIgZnJvbSAnLi4vT3B0aW9uc0xpc3QvVmlld0Ftb3VudENvbnRyb2xsZXInO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAndWlraXQvVG9vbHRpcCc7XG5jb25zdCBPcHRpb25zTGlzdCA9ICh7IG9wdGlvbnMsIHNlYXJjaFF1ZXJ5ID0gJycsIGRlZmF1bHRSZW5kZXJMaW1pdCA9IDUsIGNvdW50VW5pdCwgb25PcHRpb25Ub2dnbGUsIG9uU2VsZWN0QWxsT3B0aW9ucywgcGFyc2VEaXNwbGF5VmFsdWUgPSAodmFsdWUpID0+IHZhbHVlLCBzZWxlY3RBbGxWaXNpYmxlID0gdHJ1ZSwgY2xhc3NOYW1lLCBzb3J0T3B0aW9ucyA9IHRydWUsIH0pID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3QgW2FsbE9wdGlvbnNWaXNpYmxlLCBzZXRBbGxPcHRpb25zVmlzaWJsZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgcXVlcmllZE9wdGlvbktleXMgPSBSZWFjdC51c2VNZW1vKCgpID0+IG9wdGlvbnNcbiAgICAgICAgLmZpbHRlcigoeyBrZXkgfSkgPT4gIXNlYXJjaFF1ZXJ5Lmxlbmd0aCB8fCBrZXkuc2VhcmNoKG5ldyBSZWdFeHAoc2VhcmNoUXVlcnksICdpJykpID4gLTEpXG4gICAgICAgIC5tYXAoKG9wdGlvbikgPT4gb3B0aW9uLmtleSksIFtzZWFyY2hRdWVyeV0pO1xuICAgIGNvbnN0IFN0eWxlZE9wdGlvbiA9ICh7IG9wdGlvbiB9KSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdGlvblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgICAgICAgY29uc3QgW2Rpc2FibGVUb29sdGlwLCBzZXREaXNhYmxlVG9vbHRpcF0gPSBSZWFjdC51c2VTdGF0ZSh0cnVlKTtcbiAgICAgICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGlmIChvcHRpb25SZWYuY3VycmVudCAmJiBvcHRpb25SZWYuY3VycmVudC5zY3JvbGxXaWR0aCA+IG9wdGlvblJlZi5jdXJyZW50LmNsaWVudFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgc2V0RGlzYWJsZVRvb2x0aXAoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0RGlzYWJsZVRvb2x0aXAodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIFtdKTtcbiAgICAgICAgcmV0dXJuICg8ZGl2IGNsYXNzTmFtZT17J1N0eWxlZE9wdGlvbid9IGNzcz17Y3NzIGBcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke29wdGlvbi5pc0NoZWNrZWQgPyB0aGVtZS5jb2xvcnMuc2Vjb25kYXJ5XzQgOiAnJ307XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICBtaW4taGVpZ2h0OiAyNXB4O1xuICAgICAgICAgIHBhZGRpbmc6IDJweCAxMnB4O1xuICAgICAgICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAoMiAqIDEycHgpKTtcbiAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7b3B0aW9uLmlzQ2hlY2tlZCA/IHRoZW1lLmNvbG9ycy5zZWNvbmRhcnlfMyA6IHRoZW1lLmNvbG9ycy5ncmV5XzN9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIGB9IGtleT17b3B0aW9uLmtleX0gb25DbGljaz17KGUpID0+IHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBvbk9wdGlvblRvZ2dsZShvcHRpb24ua2V5KTtcbiAgICAgICAgfX0+XG4gICAgICAgIDxkaXYgY3NzPXtjc3MgYFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgbWluLXdpZHRoOiAwO1xuICAgICAgICAgIGB9PlxuICAgICAgICAgIDxDaGVja2JveCBjaGVja2VkPXtvcHRpb24uaXNDaGVja2VkfSB2YWx1ZT17b3B0aW9uLmtleX0gb25DaGFuZ2U9eyhlKSA9PiBudWxsfSBhcmlhLWxhYmVsPXtgJHtvcHRpb24ua2V5fS1mYWNldGB9IHNpemU9XCJzbVwiLz5cbiAgICAgICAgICA8VG9vbHRpcCBodG1sPXtwYXJzZURpc3BsYXlWYWx1ZShvcHRpb24ua2V5KX0gZGlzYWJsZWQ9e2Rpc2FibGVUb29sdGlwfSBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgIG1pbi13aWR0aDogMDtcbiAgICAgICAgICAgIGB9PlxuICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImRhdGFcIiBhcz1cImxpXCIgY3NzPXtjc3MgYFxuICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4IDBweCAwcHggN3B4O1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDA7XG4gICAgICAgICAgICAgICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICAgICAgICAgICAgICBgfT5cbiAgICAgICAgICAgICAgPGRpdiByZWY9e29wdGlvblJlZn0gY3NzPXtjc3MgYFxuICAgICAgICAgICAgICAgICAgd29yZC1icmVhazogYnJlYWstd29yZDtcbiAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBub3JtYWw7XG4gICAgICAgICAgICAgICAgYH0+XG4gICAgICAgICAgICAgICAge3BhcnNlRGlzcGxheVZhbHVlKG9wdGlvbi5rZXkpfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxUYWcgdmFyaWFudD17b3B0aW9uLmlzQ2hlY2tlZCA/ICdISUdITElHSFQnIDogJ05FVVRSQUwnfSBjc3M9e2NzcyBgXG4gICAgICAgICAgICBoZWlnaHQ6IDE4cHg7XG4gICAgICAgICAgICBmb250LXNpemU6IDEwcHg7XG4gICAgICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgICAgICAgICBgfT5cbiAgICAgICAgICB7b3B0aW9uLmRvY19jb3VudC50b0xvY2FsZVN0cmluZygpfVxuICAgICAgICA8L1RhZz5cbiAgICAgIDwvZGl2Pik7XG4gICAgfTtcbiAgICAvKiAlJSUlJSUlJSUlJSUlJSUlJSUgfiBPcHRpb24gUmVuZGVyaW5nIExvZ2ljIH4gJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSAqL1xuICAgIGNvbnN0IHNvcnRlZE9wdGlvbnMgPSBSZWFjdC51c2VNZW1vKCgpID0+IG9yZGVyQnkob3B0aW9ucywgWydpc0NoZWNrZWQnXSwgWydkZXNjJ10pLCBbb3B0aW9uc10pO1xuICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9ucyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gb3B0aW9ucy5maWx0ZXIoKG9wdGlvbikgPT4gb3B0aW9uLmlzQ2hlY2tlZCksIFtcbiAgICAgICAgb3B0aW9ucyxcbiAgICBdKTtcbiAgICBjb25zdCBxdWVyaWVkT3B0aW9ucyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gc29ydGVkT3B0aW9ucy5maWx0ZXIoKG9wdGlvbikgPT4gcXVlcmllZE9wdGlvbktleXMuaW5jbHVkZXMob3B0aW9uLmtleSkgJiYgIXNlbGVjdGVkT3B0aW9ucy5pbmNsdWRlcyhvcHRpb24pKSwgW3NlYXJjaFF1ZXJ5LCBzb3J0ZWRPcHRpb25zXSk7XG4gICAgY29uc3QgYWxsT3B0aW9uc1NlbGVjdGVkID0gKHNlYXJjaFF1ZXJ5ID8gcXVlcmllZE9wdGlvbnMgOiBvcHRpb25zKS5ldmVyeSgob3B0KSA9PiBvcHQuaXNDaGVja2VkKTtcbiAgICBjb25zdCBkZWZhdWx0Tm9uU2VsZWN0ZWRPcHRpb25zID0gUmVhY3QudXNlTWVtbygoKSA9PiBzb3J0ZWRPcHRpb25zLnNsaWNlKDAsIGRlZmF1bHRSZW5kZXJMaW1pdCkuZmlsdGVyKChvcHRpb24pID0+ICFvcHRpb24uaXNDaGVja2VkKSwgW3NvcnRlZE9wdGlvbnNdKTtcbiAgICBjb25zdCBvcHRpb25zVG9TaG93ID0gISFzZWFyY2hRdWVyeVxuICAgICAgICA/IGNvbmNhdChzZWxlY3RlZE9wdGlvbnMsIHF1ZXJpZWRPcHRpb25zKVxuICAgICAgICA6IGFsbE9wdGlvbnNWaXNpYmxlXG4gICAgICAgICAgICA/IHNvcnRlZE9wdGlvbnNcbiAgICAgICAgICAgIDogc29ydE9wdGlvbnNcbiAgICAgICAgICAgICAgICA/IGNvbmNhdChzZWxlY3RlZE9wdGlvbnMsIGRlZmF1bHROb25TZWxlY3RlZE9wdGlvbnMpXG4gICAgICAgICAgICAgICAgOiBvcHRpb25zO1xuICAgIC8qICUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSAqL1xuICAgIGNvbnN0IG9uU2VsZWN0QWxsID0gKCkgPT4ge1xuICAgICAgICBpZiAoc2VhcmNoUXVlcnkpIHtcbiAgICAgICAgICAgIG9uT3B0aW9uVG9nZ2xlKHF1ZXJpZWRPcHRpb25LZXlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9uU2VsZWN0QWxsT3B0aW9ucyhhbGxPcHRpb25zU2VsZWN0ZWQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBudW1iZXJPZk1vcmVPcHRpb25zID0gb3B0aW9ucy5sZW5ndGggLSBvcHRpb25zVG9TaG93Lmxlbmd0aDtcbiAgICByZXR1cm4gKDw+XG4gICAgICB7PGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQ7XG4gICAgICAgICAgICBib3JkZXItY29sb3I6ICR7dGhlbWUuY29sb3JzLmdyZXlfMn07XG4gICAgICAgICAgYH0gY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgICAgIHtjb3VudFVuaXQgJiYgKDxkaXYgY3NzPXtjc3MgYFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggMTJweCAwcHggMTJweDtcbiAgICAgICAgICAgICAgYH0+XG4gICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9eydjYXB0aW9uJ30gY29sb3I9e3RoZW1lLmNvbG9ycy5ncmV5fT5cbiAgICAgICAgICAgICAgICAjIHtjb3VudFVuaXR9XG4gICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgIDwvZGl2Pil9XG4gICAgICAgICAge29wdGlvbnNUb1Nob3cubWFwKChvcHRpb24pID0+ICg8U3R5bGVkT3B0aW9uIGtleT17b3B0aW9uLmtleX0gb3B0aW9uPXtvcHRpb259Lz4pKX1cbiAgICAgICAgPC9kaXY+fVxuICAgICAgeyEhb3B0aW9ucy5sZW5ndGggJiYgKDxWaWV3QW1vdW50Q29udHJvbGxlciBzZWxlY3RBbGxIYW5kZXI9e29uU2VsZWN0QWxsfSBtb3JlVG9nZ2xlSGFuZGxlcj17KCkgPT4ge1xuICAgICAgICBzZXRBbGxPcHRpb25zVmlzaWJsZSghYWxsT3B0aW9uc1Zpc2libGUpO1xuICAgIH19IHNlbGVjdEFsbFN0YXRlPXthbGxPcHRpb25zU2VsZWN0ZWR9IHRvZ2dsZVZpc2libGl0eUNzcz17c2VhcmNoUXVlcnlcbiAgICAgICAgPyAnaGlkZGVuJ1xuICAgICAgICA6IG51bWJlck9mTW9yZU9wdGlvbnMgPT09IDBcbiAgICAgICAgICAgID8gYWxsT3B0aW9uc1Zpc2libGVcbiAgICAgICAgICAgICAgICA/ICd2aXNpYmxlJ1xuICAgICAgICAgICAgICAgIDogJ2hpZGRlbidcbiAgICAgICAgICAgIDogJ3Zpc2libGUnfSB0b2dnbGVUZXh0PXthbGxPcHRpb25zVmlzaWJsZSA/IGBMZXNzYCA6IGAke251bWJlck9mTW9yZU9wdGlvbnN9IE1vcmVgfSBtb3JlT3B0aW9uc0F2YWlsYWJsZT17IWFsbE9wdGlvbnNWaXNpYmxlfSBzZWxlY3RBbGxWaXNpYmxlPXtzZWxlY3RBbGxWaXNpYmxlfS8+KX1cbiAgICA8Lz4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IE9wdGlvbnNMaXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanN4Lm1hcCJdfQ== */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref2 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '1c4wki8-Uikit-StyledOption',
        styles: 'display:flex;flex:1;min-width:0;;label:Uikit-StyledOption;',
      }
    : {
        name: '1c4wki8-Uikit-StyledOption',
        styles: 'display:flex;flex:1;min-width:0;;label:Uikit-StyledOption;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref3 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '12tztfo-Uikit-StyledOption',
        styles:
          'margin:0px 0px 0px 7px;line-height:20px;display:flex;flex:1;min-width:0;list-style-type:none;;label:Uikit-StyledOption;',
      }
    : {
        name: '12tztfo-Uikit-StyledOption',
        styles:
          'margin:0px 0px 0px 7px;line-height:20px;display:flex;flex:1;min-width:0;list-style-type:none;;label:Uikit-StyledOption;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref4 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '460vhq-Uikit-StyledOption',
        styles: 'word-break:break-word;line-height:normal;;label:Uikit-StyledOption;',
      }
    : {
        name: '460vhq-Uikit-StyledOption',
        styles: 'word-break:break-word;line-height:normal;;label:Uikit-StyledOption;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref5 =
  process.env.NODE_ENV === 'production'
    ? {
        name: 'ag2zvl-Uikit-StyledOption',
        styles:
          'height:18px;font-size:10px;align-self:center;white-space:nowrap;margin-left:5px;;label:Uikit-StyledOption;',
      }
    : {
        name: 'ag2zvl-Uikit-StyledOption',
        styles:
          'height:18px;font-size:10px;align-self:center;white-space:nowrap;margin-left:5px;;label:Uikit-StyledOption;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref6 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '1xabf34-Uikit-OptionsList',
        styles:
          'display:flex;justify-content:flex-end;padding:4px 12px 0px 12px;;label:Uikit-OptionsList;',
      }
    : {
        name: '1xabf34-Uikit-OptionsList',
        styles:
          'display:flex;justify-content:flex-end;padding:4px 12px 0px 12px;;label:Uikit-OptionsList;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var OptionsList = function OptionsList(_ref7) {
  var options = _ref7.options,
    _ref7$searchQuery = _ref7.searchQuery,
    searchQuery = _ref7$searchQuery === void 0 ? '' : _ref7$searchQuery,
    _ref7$defaultRenderLi = _ref7.defaultRenderLimit,
    defaultRenderLimit = _ref7$defaultRenderLi === void 0 ? 5 : _ref7$defaultRenderLi,
    countUnit = _ref7.countUnit,
    onOptionToggle = _ref7.onOptionToggle,
    onSelectAllOptions = _ref7.onSelectAllOptions,
    _ref7$parseDisplayVal = _ref7.parseDisplayValue,
    parseDisplayValue =
      _ref7$parseDisplayVal === void 0
        ? function (value) {
            return value;
          }
        : _ref7$parseDisplayVal,
    _ref7$selectAllVisibl = _ref7.selectAllVisible,
    selectAllVisible = _ref7$selectAllVisibl === void 0 ? true : _ref7$selectAllVisibl,
    className = _ref7.className,
    _ref7$sortOptions = _ref7.sortOptions,
    sortOptions = _ref7$sortOptions === void 0 ? true : _ref7$sortOptions;
  var theme = (0, _useTheme['default'])();

  var _React$useState = _react['default'].useState(false),
    _React$useState2 = (0, _slicedToArray2['default'])(_React$useState, 2),
    allOptionsVisible = _React$useState2[0],
    setAllOptionsVisible = _React$useState2[1];

  var queriedOptionKeys = _react['default'].useMemo(
    function () {
      return options
        .filter(function (_ref8) {
          var key = _ref8.key;
          return !searchQuery.length || key.search(new RegExp(searchQuery, 'i')) > -1;
        })
        .map(function (option) {
          return option.key;
        });
    },
    [searchQuery],
  );

  var StyledOption = function StyledOption(_ref9) {
    var option = _ref9.option;

    var optionRef = _react['default'].useRef(null);

    var _React$useState3 = _react['default'].useState(true),
      _React$useState4 = (0, _slicedToArray2['default'])(_React$useState3, 2),
      disableTooltip = _React$useState4[0],
      setDisableTooltip = _React$useState4[1];

    _react['default'].useEffect(function () {
      if (optionRef.current && optionRef.current.scrollWidth > optionRef.current.clientWidth) {
        setDisableTooltip(false);
      } else {
        setDisableTooltip(true);
      }
    }, []);

    return (0, _core.jsx)(
      'div',
      {
        className: 'StyledOption',
        css: /*#__PURE__*/ (0, _core.css)(
          'background-color:',
          option.isChecked ? theme.colors.secondary_4 : '',
          ';display:flex;align-items:center;justify-content:space-between;min-height:25px;padding:2px 12px;width:calc(100% - (2 * 12px));&:hover{background:',
          option.isChecked ? theme.colors.secondary_3 : theme.colors.grey_3,
          ';}cursor:pointer;;label:Uikit-StyledOption;' +
            (process.env.NODE_ENV === 'production'
              ? ''
              : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
        ),
        key: option.key,
        onClick: function onClick(e) {
          e.stopPropagation();
          onOptionToggle(option.key);
        },
      },
      (0, _core.jsx)(
        'div',
        {
          css: _ref,
        },
        (0, _core.jsx)(_Checkbox['default'], {
          checked: option.isChecked,
          value: option.key,
          onChange: function onChange(e) {
            return null;
          },
          'aria-label': ''.concat(option.key, '-facet'),
          size: 'sm',
        }),
        (0, _core.jsx)(
          _Tooltip['default'],
          {
            html: parseDisplayValue(option.key),
            disabled: disableTooltip,
            css: _ref2,
          },
          (0, _core.jsx)(
            _Typography['default'],
            {
              variant: 'data',
              as: 'li',
              css: _ref3,
            },
            (0, _core.jsx)(
              'div',
              {
                ref: optionRef,
                css: _ref4,
              },
              parseDisplayValue(option.key),
            ),
          ),
        ),
      ),
      (0, _core.jsx)(
        _Tag['default'],
        {
          variant: option.isChecked ? 'HIGHLIGHT' : 'NEUTRAL',
          css: _ref5,
        },
        option.doc_count.toLocaleString(),
      ),
    );
  };
  /* %%%%%%%%%%%%%%%%%% ~ Option Rendering Logic ~ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

  var sortedOptions = _react['default'].useMemo(
    function () {
      return (0, _orderBy['default'])(options, ['isChecked'], ['desc']);
    },
    [options],
  );

  var selectedOptions = _react['default'].useMemo(
    function () {
      return options.filter(function (option) {
        return option.isChecked;
      });
    },
    [options],
  );

  var queriedOptions = _react['default'].useMemo(
    function () {
      return sortedOptions.filter(function (option) {
        return queriedOptionKeys.includes(option.key) && !selectedOptions.includes(option);
      });
    },
    [searchQuery, sortedOptions],
  );

  var allOptionsSelected = (searchQuery ? queriedOptions : options).every(function (opt) {
    return opt.isChecked;
  });

  var defaultNonSelectedOptions = _react['default'].useMemo(
    function () {
      return sortedOptions.slice(0, defaultRenderLimit).filter(function (option) {
        return !option.isChecked;
      });
    },
    [sortedOptions],
  );

  var optionsToShow = !!searchQuery
    ? (0, _concat['default'])(selectedOptions, queriedOptions)
    : allOptionsVisible
    ? sortedOptions
    : sortOptions
    ? (0, _concat['default'])(selectedOptions, defaultNonSelectedOptions)
    : options;
  /* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

  var onSelectAll = function onSelectAll() {
    if (searchQuery) {
      onOptionToggle(queriedOptionKeys);
    } else {
      onSelectAllOptions(allOptionsSelected);
    }
  };

  var numberOfMoreOptions = options.length - optionsToShow.length;
  return (0, _core.jsx)(
    _react['default'].Fragment,
    null,
    (0, _core.jsx)(
      'div',
      {
        css: /*#__PURE__*/ (0, _core.css)(
          'border-top:1px solid;border-color:',
          theme.colors.grey_2,
          ';;label:Uikit-OptionsList;' +
            (process.env.NODE_ENV === 'production'
              ? ''
              : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
        ),
        className: className,
      },
      countUnit &&
        (0, _core.jsx)(
          'div',
          {
            css: _ref6,
          },
          (0, _core.jsx)(
            _Typography['default'],
            {
              variant: 'caption',
              color: theme.colors.grey,
            },
            '# ',
            countUnit,
          ),
        ),
      optionsToShow.map(function (option) {
        return (0, _core.jsx)(StyledOption, {
          key: option.key,
          option: option,
        });
      }),
    ),
    !!options.length &&
      (0, _core.jsx)(_ViewAmountController['default'], {
        selectAllHander: onSelectAll,
        moreToggleHandler: function moreToggleHandler() {
          setAllOptionsVisible(!allOptionsVisible);
        },
        selectAllState: allOptionsSelected,
        toggleVisiblityCss: searchQuery
          ? 'hidden'
          : numberOfMoreOptions === 0
          ? allOptionsVisible
            ? 'visible'
            : 'hidden'
          : 'visible',
        toggleText: allOptionsVisible ? 'Less' : ''.concat(numberOfMoreOptions, ' More'),
        moreOptionsAvailable: !allOptionsVisible,
        selectAllVisible: selectAllVisible,
      }),
  );
};

var _default = OptionsList;
exports['default'] = _default;
