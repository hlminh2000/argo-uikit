'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports['default'] = exports.TableActionBar = void 0;

var _core = require('@emotion/core');

var _extends2 = _interopRequireDefault(require('@babel/runtime/helpers/extends'));

var _styledBase = _interopRequireDefault(require('@emotion/styled-base'));

var _css2 = _interopRequireDefault(require('@emotion/css'));

var _react = _interopRequireDefault(require('react'));

var _propTypes = _interopRequireDefault(require('prop-types'));

var _floor = _interopRequireDefault(require('lodash/floor'));

var _ceil = _interopRequireDefault(require('lodash/ceil'));

var _range = _interopRequireDefault(require('lodash/range'));

var _Typography = _interopRequireDefault(require('../../Typography'));

var _useTheme = _interopRequireDefault(require('../../utils/useTheme'));

var _Select = _interopRequireDefault(require('../../form/Select'));

var _styledComponents = require('../../form/Select/styledComponents');

var _Icon = _interopRequireDefault(require('../../Icon'));

var __jsx = _react['default'].createElement;

function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}

var _ref6 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '1p5kgxw-Uikit-TableActionBar',
        styles:
          'min-height:32px;display:flex;justify-content:space-between;align-items:center;background:white;padding-top:8px;padding-bottom:8px;padding-left:8px;;label:Uikit-TableActionBar;',
      }
    : {
        name: '1p5kgxw-Uikit-TableActionBar',
        styles:
          'min-height:32px;display:flex;justify-content:space-between;align-items:center;background:white;padding-top:8px;padding-bottom:8px;padding-left:8px;;label:Uikit-TableActionBar;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var TableActionBar = function TableActionBar(props) {
  var _props$variant = props.variant,
    variant = _props$variant === void 0 ? 'label' : _props$variant,
    _props$color = props.color,
    color = _props$color === void 0 ? 'grey' : _props$color,
    _props$component = props.component,
    component = _props$component === void 0 ? 'div' : _props$component;
  return (0, _core.jsx)(
    _Typography['default'],
    (0, _extends2['default'])({}, props, {
      variant: variant,
      color: color,
      component: component,
      css: _ref6,
    }),
  );
};

exports.TableActionBar = TableActionBar;

var Arrow = function Arrow(_ref7) {
  var transform = _ref7.transform,
    className = _ref7.className;
  return (0, _core.jsx)(_Icon['default'], {
    className: className,
    width: '6px',
    height: '6px',
    name: 'chevron_right',
    fill: 'grey',
    transform: transform,
  });
};

var _ref5 =
  process.env.NODE_ENV === 'production'
    ? {
        name: 'a3jtjf-Uikit-DoubleArrow',
        styles: 'position:relative;left:-3px;;label:Uikit-DoubleArrow;',
      }
    : {
        name: 'a3jtjf-Uikit-DoubleArrow',
        styles: 'position:relative;left:-3px;;label:Uikit-DoubleArrow;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var DoubleArrow = function DoubleArrow(_ref8) {
  var transform = _ref8.transform;
  return (0, _core.jsx)(
    _react['default'].Fragment,
    null,
    (0, _core.jsx)(Arrow, {
      transform: transform,
    }),
    (0, _core.jsx)(Arrow, {
      css: _ref5,
      transform: transform,
    }),
  );
};

var A = /*#__PURE__*/ (0, _styledBase['default'])('a', {
  target: 'e11qld770',
  label: 'Uikit-A',
})(
  function (_ref9) {
    var theme = _ref9.theme;
    return /*#__PURE__*/ (0, _css2['default'])(
      theme.typography.data,
      process.env.NODE_ENV === 'production'
        ? ''
        : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
    );
  },
  ';background-color:#fff;border-radius:50%;cursor:pointer;display:inline-block;height:24px;line-height:24px;text-align:center;width:24px;margin-right:2px;&:hover{background-color:',
  function (_ref10) {
    var theme = _ref10.theme;
    return theme.colors.primary_4;
  },
  ';}' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtRHNCIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGZsb29yIGZyb20gJ2xvZGFzaC9mbG9vcic7XG5pbXBvcnQgY2VpbCBmcm9tICdsb2Rhc2gvY2VpbCc7XG5pbXBvcnQgcmFuZ2UgZnJvbSAnbG9kYXNoL3JhbmdlJztcbmltcG9ydCBjc3MgZnJvbSAnQGVtb3Rpb24vY3NzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uLy4uL1R5cG9ncmFwaHknO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uLy4uL3V0aWxzL3VzZVRoZW1lJztcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi4vLi4vZm9ybS9TZWxlY3QnO1xuaW1wb3J0IHsgUE9QVVBfUE9TSVRJT05TIH0gZnJvbSAnLi4vLi4vZm9ybS9TZWxlY3Qvc3R5bGVkQ29tcG9uZW50cyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi8uLi9JY29uJztcbmV4cG9ydCBjb25zdCBUYWJsZUFjdGlvbkJhciA9IHByb3BzID0+IHtcbiAgICBjb25zdCB7IHZhcmlhbnQgPSAnbGFiZWwnLCBjb2xvciA9ICdncmV5JywgY29tcG9uZW50ID0gJ2RpdicgfSA9IHByb3BzO1xuICAgIHJldHVybiAoPFR5cG9ncmFwaHkgey4uLnByb3BzfSB2YXJpYW50PXt2YXJpYW50fSBjb2xvcj17Y29sb3J9IGNvbXBvbmVudD17Y29tcG9uZW50fSBjc3M9e2NzcyBgXG4gICAgICAgIG1pbi1oZWlnaHQ6IDMycHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgICAgIHBhZGRpbmctdG9wOiA4cHg7XG4gICAgICAgIHBhZGRpbmctYm90dG9tOiA4cHg7XG4gICAgICAgIHBhZGRpbmctbGVmdDogOHB4O1xuICAgICAgYH0vPik7XG59O1xuY29uc3QgQXJyb3cgPSAoeyB0cmFuc2Zvcm0sIGNsYXNzTmFtZSwgfSkgPT4gKDxJY29uIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSB3aWR0aD1cIjZweFwiIGhlaWdodD1cIjZweFwiIG5hbWU9XCJjaGV2cm9uX3JpZ2h0XCIgZmlsbD1cImdyZXlcIiB0cmFuc2Zvcm09e3RyYW5zZm9ybX0vPik7XG5jb25zdCBEb3VibGVBcnJvdyA9ICh7IHRyYW5zZm9ybSB9KSA9PiAoPD5cbiAgICA8QXJyb3cgdHJhbnNmb3JtPXt0cmFuc2Zvcm19Lz5cbiAgICA8QXJyb3cgY3NzPXtjc3MgYFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGxlZnQ6IC0zcHg7XG4gICAgICBgfSB0cmFuc2Zvcm09e3RyYW5zZm9ybX0vPlxuICA8Lz4pO1xuY29uc3QgQSA9IHN0eWxlZCgnYScpIGBcbiAgJHsoeyB0aGVtZSB9KSA9PiBjc3ModGhlbWUudHlwb2dyYXBoeS5kYXRhKX07XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGhlaWdodDogMjRweDtcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd2lkdGg6IDI0cHg7XG4gIG1hcmdpbi1yaWdodDogMnB4O1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLnByaW1hcnlfNH07XG4gIH1cbmA7XG5jb25zdCBQYWdlQ29udHJvbCA9IHN0eWxlZCgnZGl2JykgYFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAmIGEge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IDI0cHg7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG5gO1xuLy8gZ2l2ZW4gMSA1IDUgb3IgMiA1IDUsIHJldHVybiBbMCwxLDIsMyw0XVxuZnVuY3Rpb24gZ2V0UGFnZXNBcm91bmQocCwgbnVtLCBwYWdlcykge1xuICAgIGNvbnN0IGwgPSBwIC0gZmxvb3IobnVtIC8gMik7XG4gICAgY29uc3QgciA9IHAgKyBjZWlsKG51bSAvIDIpO1xuICAgIGlmIChyID4gcGFnZXMpIHtcbiAgICAgICAgcmV0dXJuIHJhbmdlKHBhZ2VzIC0gbnVtLCBwYWdlcyk7XG4gICAgfVxuICAgIGlmIChsIDwgMCkge1xuICAgICAgICByZXR1cm4gcmFuZ2UoMCwgbnVtKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlKGwsIHIpO1xufVxuZnVuY3Rpb24gVGFibGVQYWdpbmF0aW9uKHByb3BzKSB7XG4gICAgLy8gcGFnZSBpcyB6ZXJvIGluZGV4ZWQhXG4gICAgY29uc3QgeyBwYWdlcywgcGFnZSwgc2hvd1BhZ2VTaXplT3B0aW9ucywgcGFnZVNpemVPcHRpb25zLCBwYWdlU2l6ZSwgb25QYWdlU2l6ZUNoYW5nZSB9ID0gcHJvcHM7XG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICAgIHJldHVybiAoPFRhYmxlQWN0aW9uQmFyIGNzcz17Y3NzIGBcbiAgICAgICAgJiBzdmcge1xuICAgICAgICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94ICFpbXBvcnRhbnQ7XG4gICAgICAgIH1cbiAgICAgICAgJiBhID4gc3ZnIHtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIH1cbiAgICAgIGB9PlxuICAgICAge3Nob3dQYWdlU2l6ZU9wdGlvbnMgPyAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBgfT5cbiAgICAgICAgICBTaG93XG4gICAgICAgICAgPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC44KTtcbiAgICAgICAgICAgIGB9PlxuICAgICAgICAgICAgPFNlbGVjdCBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgJiBbcm9sZT0nYnV0dG9uJ10ge1xuICAgICAgICAgICAgICAgICAgbWluLXdpZHRoOiA3MHB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYH0gYXJpYS1sYWJlbD1cIlNlbGVjdCBwYWdlIHNpemVcIiBvcHRpb25zPXtwYWdlU2l6ZU9wdGlvbnMubWFwKHYgPT4gKHsgY29udGVudDogdi50b1N0cmluZygpLCB2YWx1ZTogdiB9KSl9IG9uQ2hhbmdlPXtvblBhZ2VTaXplQ2hhbmdlfSB2YWx1ZT17cGFnZVNpemV9IHBvcHVwUG9zaXRpb249e1BPUFVQX1BPU0lUSU9OUy5VUH0vPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIHJvd3NcbiAgICAgICAgPC9kaXY+KSA6ICg8ZGl2IC8+KX1cblxuICAgICAgPFBhZ2VDb250cm9sPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxBIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgaWYgKHBhZ2UgPT09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHByb3BzLm9uUGFnZUNoYW5nZSgwKTtcbiAgICB9fT5cbiAgICAgICAgICAgIDxEb3VibGVBcnJvdyB0cmFuc2Zvcm09XCJyb3RhdGUoMTgwKVwiLz5cbiAgICAgICAgICA8L0E+XG4gICAgICAgICAgPEEgb25DbGljaz17KCkgPT4ge1xuICAgICAgICBpZiAocGFnZSA9PT0gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcHJvcHMub25QYWdlQ2hhbmdlKHBhZ2UgLSAxKTtcbiAgICB9fT5cbiAgICAgICAgICAgIDxBcnJvdyB0cmFuc2Zvcm09XCJyb3RhdGUoMTgwKVwiLz5cbiAgICAgICAgICA8L0E+XG4gICAgICAgICAge2dldFBhZ2VzQXJvdW5kKHBhZ2UsIDUsIHBhZ2VzKS5tYXAocCA9PiBwID4gLTEgJiZcbiAgICAgICAgcCA8IHBhZ2VzICYmICg8QSBrZXk9e3B9IG9uQ2xpY2s9eygpID0+IHByb3BzLm9uUGFnZUNoYW5nZShwKX0gY3NzPXtjc3MgYFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3BhZ2UgPT09IHAgPyB0aGVtZS5jb2xvcnMuc2Vjb25kYXJ5XzQgOiAnJ307XG4gICAgICAgICAgICAgICAgICBgfT5cbiAgICAgICAgICAgICAgICAgIHtwICsgMX1cbiAgICAgICAgICAgICAgICA8L0E+KSl9XG4gICAgICAgICAgPEEgb25DbGljaz17KCkgPT4ge1xuICAgICAgICBpZiAocGFnZSA9PT0gcGFnZXMgLSAxKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBwcm9wcy5vblBhZ2VDaGFuZ2UocGFnZSArIDEpO1xuICAgIH19PlxuICAgICAgICAgICAgPEFycm93IC8+XG4gICAgICAgICAgPC9BPlxuICAgICAgICAgIDxBIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgaWYgKHBhZ2UgPT09IHBhZ2VzIC0gMSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcHJvcHMub25QYWdlQ2hhbmdlKHBhZ2VzIC0gMSk7XG4gICAgfX0+XG4gICAgICAgICAgICA8RG91YmxlQXJyb3cgLz5cbiAgICAgICAgICA8L0E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9QYWdlQ29udHJvbD5cbiAgICA8L1RhYmxlQWN0aW9uQmFyPik7XG59XG5UYWJsZVBhZ2luYXRpb24ucHJvcFR5cGVzID0ge1xuICAgIC8qXG4gICAgICogY2hlY2sgaHR0cHM6Ly9naXRodWIuY29tL3Rhbm5lcmxpbnNsZXkvcmVhY3QtdGFibGUvYmxvYi92Ni9zcmMvcGFnaW5hdGlvbi5qc1xuICAgICAqL1xuICAgIHBhZ2VzOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgcGFnZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIHNob3dQYWdlU2l6ZU9wdGlvbnM6IFByb3BUeXBlcy5ib29sLFxuICAgIHBhZ2VTaXplT3B0aW9uczogUHJvcFR5cGVzLmFycmF5LFxuICAgIG9uUGFnZVNpemVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uUGFnZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG59O1xuZXhwb3J0IGRlZmF1bHQgVGFibGVQYWdpbmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanN4Lm1hcCJdfQ== */'),
);
var PageControl = /*#__PURE__*/ (0, _styledBase['default'])('div', {
  target: 'e11qld771',
  label: 'Uikit-PageControl',
})(
  process.env.NODE_ENV === 'production'
    ? {
        name: 'b3mktf',
        styles:
          'display:flex;align-items:center;& a{cursor:pointer;display:inline-block;width:24px;text-align:center;}',
      }
    : {
        name: 'b3mktf',
        styles:
          'display:flex;align-items:center;& a{cursor:pointer;display:inline-block;width:24px;text-align:center;}',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
); // given 1 5 5 or 2 5 5, return [0,1,2,3,4]

function getPagesAround(p, num, pages) {
  var l = p - (0, _floor['default'])(num / 2);
  var r = p + (0, _ceil['default'])(num / 2);

  if (r > pages) {
    return (0, _range['default'])(pages - num, pages);
  }

  if (l < 0) {
    return (0, _range['default'])(0, num);
  }

  return (0, _range['default'])(l, r);
}

var _ref =
  process.env.NODE_ENV === 'production'
    ? {
        name: '1juve6j-Uikit-TablePagination',
        styles: "& [role='button']{min-width:70px;};label:Uikit-TablePagination;",
      }
    : {
        name: '1juve6j-Uikit-TablePagination',
        styles: "& [role='button']{min-width:70px;};label:Uikit-TablePagination;",
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref2 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '97ikd4-Uikit-TablePagination',
        styles: 'transform:scale(0.8);;label:Uikit-TablePagination;',
      }
    : {
        name: '97ikd4-Uikit-TablePagination',
        styles: 'transform:scale(0.8);;label:Uikit-TablePagination;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref3 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '121m752-Uikit-TablePagination',
        styles: 'display:flex;align-items:center;;label:Uikit-TablePagination;',
      }
    : {
        name: '121m752-Uikit-TablePagination',
        styles: 'display:flex;align-items:center;;label:Uikit-TablePagination;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxRzRDIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGZsb29yIGZyb20gJ2xvZGFzaC9mbG9vcic7XG5pbXBvcnQgY2VpbCBmcm9tICdsb2Rhc2gvY2VpbCc7XG5pbXBvcnQgcmFuZ2UgZnJvbSAnbG9kYXNoL3JhbmdlJztcbmltcG9ydCBjc3MgZnJvbSAnQGVtb3Rpb24vY3NzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uLy4uL1R5cG9ncmFwaHknO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uLy4uL3V0aWxzL3VzZVRoZW1lJztcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi4vLi4vZm9ybS9TZWxlY3QnO1xuaW1wb3J0IHsgUE9QVVBfUE9TSVRJT05TIH0gZnJvbSAnLi4vLi4vZm9ybS9TZWxlY3Qvc3R5bGVkQ29tcG9uZW50cyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi8uLi9JY29uJztcbmV4cG9ydCBjb25zdCBUYWJsZUFjdGlvbkJhciA9IHByb3BzID0+IHtcbiAgICBjb25zdCB7IHZhcmlhbnQgPSAnbGFiZWwnLCBjb2xvciA9ICdncmV5JywgY29tcG9uZW50ID0gJ2RpdicgfSA9IHByb3BzO1xuICAgIHJldHVybiAoPFR5cG9ncmFwaHkgey4uLnByb3BzfSB2YXJpYW50PXt2YXJpYW50fSBjb2xvcj17Y29sb3J9IGNvbXBvbmVudD17Y29tcG9uZW50fSBjc3M9e2NzcyBgXG4gICAgICAgIG1pbi1oZWlnaHQ6IDMycHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgICAgIHBhZGRpbmctdG9wOiA4cHg7XG4gICAgICAgIHBhZGRpbmctYm90dG9tOiA4cHg7XG4gICAgICAgIHBhZGRpbmctbGVmdDogOHB4O1xuICAgICAgYH0vPik7XG59O1xuY29uc3QgQXJyb3cgPSAoeyB0cmFuc2Zvcm0sIGNsYXNzTmFtZSwgfSkgPT4gKDxJY29uIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSB3aWR0aD1cIjZweFwiIGhlaWdodD1cIjZweFwiIG5hbWU9XCJjaGV2cm9uX3JpZ2h0XCIgZmlsbD1cImdyZXlcIiB0cmFuc2Zvcm09e3RyYW5zZm9ybX0vPik7XG5jb25zdCBEb3VibGVBcnJvdyA9ICh7IHRyYW5zZm9ybSB9KSA9PiAoPD5cbiAgICA8QXJyb3cgdHJhbnNmb3JtPXt0cmFuc2Zvcm19Lz5cbiAgICA8QXJyb3cgY3NzPXtjc3MgYFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGxlZnQ6IC0zcHg7XG4gICAgICBgfSB0cmFuc2Zvcm09e3RyYW5zZm9ybX0vPlxuICA8Lz4pO1xuY29uc3QgQSA9IHN0eWxlZCgnYScpIGBcbiAgJHsoeyB0aGVtZSB9KSA9PiBjc3ModGhlbWUudHlwb2dyYXBoeS5kYXRhKX07XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGhlaWdodDogMjRweDtcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd2lkdGg6IDI0cHg7XG4gIG1hcmdpbi1yaWdodDogMnB4O1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLnByaW1hcnlfNH07XG4gIH1cbmA7XG5jb25zdCBQYWdlQ29udHJvbCA9IHN0eWxlZCgnZGl2JykgYFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAmIGEge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IDI0cHg7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG5gO1xuLy8gZ2l2ZW4gMSA1IDUgb3IgMiA1IDUsIHJldHVybiBbMCwxLDIsMyw0XVxuZnVuY3Rpb24gZ2V0UGFnZXNBcm91bmQocCwgbnVtLCBwYWdlcykge1xuICAgIGNvbnN0IGwgPSBwIC0gZmxvb3IobnVtIC8gMik7XG4gICAgY29uc3QgciA9IHAgKyBjZWlsKG51bSAvIDIpO1xuICAgIGlmIChyID4gcGFnZXMpIHtcbiAgICAgICAgcmV0dXJuIHJhbmdlKHBhZ2VzIC0gbnVtLCBwYWdlcyk7XG4gICAgfVxuICAgIGlmIChsIDwgMCkge1xuICAgICAgICByZXR1cm4gcmFuZ2UoMCwgbnVtKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlKGwsIHIpO1xufVxuZnVuY3Rpb24gVGFibGVQYWdpbmF0aW9uKHByb3BzKSB7XG4gICAgLy8gcGFnZSBpcyB6ZXJvIGluZGV4ZWQhXG4gICAgY29uc3QgeyBwYWdlcywgcGFnZSwgc2hvd1BhZ2VTaXplT3B0aW9ucywgcGFnZVNpemVPcHRpb25zLCBwYWdlU2l6ZSwgb25QYWdlU2l6ZUNoYW5nZSB9ID0gcHJvcHM7XG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICAgIHJldHVybiAoPFRhYmxlQWN0aW9uQmFyIGNzcz17Y3NzIGBcbiAgICAgICAgJiBzdmcge1xuICAgICAgICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94ICFpbXBvcnRhbnQ7XG4gICAgICAgIH1cbiAgICAgICAgJiBhID4gc3ZnIHtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIH1cbiAgICAgIGB9PlxuICAgICAge3Nob3dQYWdlU2l6ZU9wdGlvbnMgPyAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBgfT5cbiAgICAgICAgICBTaG93XG4gICAgICAgICAgPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC44KTtcbiAgICAgICAgICAgIGB9PlxuICAgICAgICAgICAgPFNlbGVjdCBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgICAgJiBbcm9sZT0nYnV0dG9uJ10ge1xuICAgICAgICAgICAgICAgICAgbWluLXdpZHRoOiA3MHB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYH0gYXJpYS1sYWJlbD1cIlNlbGVjdCBwYWdlIHNpemVcIiBvcHRpb25zPXtwYWdlU2l6ZU9wdGlvbnMubWFwKHYgPT4gKHsgY29udGVudDogdi50b1N0cmluZygpLCB2YWx1ZTogdiB9KSl9IG9uQ2hhbmdlPXtvblBhZ2VTaXplQ2hhbmdlfSB2YWx1ZT17cGFnZVNpemV9IHBvcHVwUG9zaXRpb249e1BPUFVQX1BPU0lUSU9OUy5VUH0vPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIHJvd3NcbiAgICAgICAgPC9kaXY+KSA6ICg8ZGl2IC8+KX1cblxuICAgICAgPFBhZ2VDb250cm9sPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxBIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgaWYgKHBhZ2UgPT09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHByb3BzLm9uUGFnZUNoYW5nZSgwKTtcbiAgICB9fT5cbiAgICAgICAgICAgIDxEb3VibGVBcnJvdyB0cmFuc2Zvcm09XCJyb3RhdGUoMTgwKVwiLz5cbiAgICAgICAgICA8L0E+XG4gICAgICAgICAgPEEgb25DbGljaz17KCkgPT4ge1xuICAgICAgICBpZiAocGFnZSA9PT0gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcHJvcHMub25QYWdlQ2hhbmdlKHBhZ2UgLSAxKTtcbiAgICB9fT5cbiAgICAgICAgICAgIDxBcnJvdyB0cmFuc2Zvcm09XCJyb3RhdGUoMTgwKVwiLz5cbiAgICAgICAgICA8L0E+XG4gICAgICAgICAge2dldFBhZ2VzQXJvdW5kKHBhZ2UsIDUsIHBhZ2VzKS5tYXAocCA9PiBwID4gLTEgJiZcbiAgICAgICAgcCA8IHBhZ2VzICYmICg8QSBrZXk9e3B9IG9uQ2xpY2s9eygpID0+IHByb3BzLm9uUGFnZUNoYW5nZShwKX0gY3NzPXtjc3MgYFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3BhZ2UgPT09IHAgPyB0aGVtZS5jb2xvcnMuc2Vjb25kYXJ5XzQgOiAnJ307XG4gICAgICAgICAgICAgICAgICBgfT5cbiAgICAgICAgICAgICAgICAgIHtwICsgMX1cbiAgICAgICAgICAgICAgICA8L0E+KSl9XG4gICAgICAgICAgPEEgb25DbGljaz17KCkgPT4ge1xuICAgICAgICBpZiAocGFnZSA9PT0gcGFnZXMgLSAxKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBwcm9wcy5vblBhZ2VDaGFuZ2UocGFnZSArIDEpO1xuICAgIH19PlxuICAgICAgICAgICAgPEFycm93IC8+XG4gICAgICAgICAgPC9BPlxuICAgICAgICAgIDxBIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgaWYgKHBhZ2UgPT09IHBhZ2VzIC0gMSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcHJvcHMub25QYWdlQ2hhbmdlKHBhZ2VzIC0gMSk7XG4gICAgfX0+XG4gICAgICAgICAgICA8RG91YmxlQXJyb3cgLz5cbiAgICAgICAgICA8L0E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9QYWdlQ29udHJvbD5cbiAgICA8L1RhYmxlQWN0aW9uQmFyPik7XG59XG5UYWJsZVBhZ2luYXRpb24ucHJvcFR5cGVzID0ge1xuICAgIC8qXG4gICAgICogY2hlY2sgaHR0cHM6Ly9naXRodWIuY29tL3Rhbm5lcmxpbnNsZXkvcmVhY3QtdGFibGUvYmxvYi92Ni9zcmMvcGFnaW5hdGlvbi5qc1xuICAgICAqL1xuICAgIHBhZ2VzOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgcGFnZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIHNob3dQYWdlU2l6ZU9wdGlvbnM6IFByb3BUeXBlcy5ib29sLFxuICAgIHBhZ2VTaXplT3B0aW9uczogUHJvcFR5cGVzLmFycmF5LFxuICAgIG9uUGFnZVNpemVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uUGFnZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG59O1xuZXhwb3J0IGRlZmF1bHQgVGFibGVQYWdpbmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanN4Lm1hcCJdfQ== */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref4 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '1qd15fq-Uikit-TablePagination',
        styles:
          '& svg{box-sizing:content-box !important;}& a > svg{position:relative;};label:Uikit-TablePagination;',
      }
    : {
        name: '1qd15fq-Uikit-TablePagination',
        styles:
          '& svg{box-sizing:content-box !important;}& a > svg{position:relative;};label:Uikit-TablePagination;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

function TablePagination(props) {
  // page is zero indexed!
  var pages = props.pages,
    page = props.page,
    showPageSizeOptions = props.showPageSizeOptions,
    pageSizeOptions = props.pageSizeOptions,
    pageSize = props.pageSize,
    onPageSizeChange = props.onPageSizeChange;
  var theme = (0, _useTheme['default'])();
  return (0, _core.jsx)(
    TableActionBar,
    {
      css: _ref4,
    },
    showPageSizeOptions
      ? (0, _core.jsx)(
          'div',
          {
            css: _ref3,
          },
          'Show',
          (0, _core.jsx)(
            'div',
            {
              css: _ref2,
            },
            (0, _core.jsx)(_Select['default'], {
              css: _ref,
              'aria-label': 'Select page size',
              options: pageSizeOptions.map(function (v) {
                return {
                  content: v.toString(),
                  value: v,
                };
              }),
              onChange: onPageSizeChange,
              value: pageSize,
              popupPosition: _styledComponents.POPUP_POSITIONS.UP,
            }),
          ),
          'rows',
        )
      : (0, _core.jsx)('div', null),
    (0, _core.jsx)(
      PageControl,
      null,
      (0, _core.jsx)(
        'div',
        null,
        (0, _core.jsx)(
          A,
          {
            onClick: function onClick() {
              if (page === 0) return;
              props.onPageChange(0);
            },
          },
          (0, _core.jsx)(DoubleArrow, {
            transform: 'rotate(180)',
          }),
        ),
        (0, _core.jsx)(
          A,
          {
            onClick: function onClick() {
              if (page === 0) return;
              props.onPageChange(page - 1);
            },
          },
          (0, _core.jsx)(Arrow, {
            transform: 'rotate(180)',
          }),
        ),
        getPagesAround(page, 5, pages).map(function (p) {
          return (
            p > -1 &&
            p < pages &&
            (0, _core.jsx)(
              A,
              {
                key: p,
                onClick: function onClick() {
                  return props.onPageChange(p);
                },
                css: /*#__PURE__*/ (0, _css2['default'])(
                  'background-color:',
                  page === p ? theme.colors.secondary_4 : '',
                  ';' +
                    (process.env.NODE_ENV === 'production'
                      ? ''
                      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
                ),
              },
              p + 1,
            )
          );
        }),
        (0, _core.jsx)(
          A,
          {
            onClick: function onClick() {
              if (page === pages - 1) return;
              props.onPageChange(page + 1);
            },
          },
          (0, _core.jsx)(Arrow, null),
        ),
        (0, _core.jsx)(
          A,
          {
            onClick: function onClick() {
              if (page === pages - 1) return;
              props.onPageChange(pages - 1);
            },
          },
          (0, _core.jsx)(DoubleArrow, null),
        ),
      ),
    ),
  );
}

TablePagination.propTypes = {
  /*
   * check https://github.com/tannerlinsley/react-table/blob/v6/src/pagination.js
   */
  pages: _propTypes['default'].number.isRequired,
  page: _propTypes['default'].number.isRequired,
  showPageSizeOptions: _propTypes['default'].bool,
  pageSizeOptions: _propTypes['default'].array,
  onPageSizeChange: _propTypes['default'].func,
  onPageChange: _propTypes['default'].func,
};
var _default = TablePagination;
exports['default'] = _default;
