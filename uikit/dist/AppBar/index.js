'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

Object.defineProperty(exports, '__esModule', {
  value: true,
});
Object.defineProperty(exports, 'DropdownMenu', {
  enumerable: true,
  get: function get() {
    return _DropdownMenu.DropdownMenu;
  },
});
Object.defineProperty(exports, 'DropdownMenuItem', {
  enumerable: true,
  get: function get() {
    return _DropdownMenu.DropdownMenuItem;
  },
});
exports['default'] =
  exports.UserBadge =
  exports.Section =
  exports.NavBarElement =
  exports.MenuItem =
  exports.MenuGroup =
  exports.Logo =
    void 0;

var _core = require('@emotion/core');

var _extends2 = _interopRequireDefault(require('@babel/runtime/helpers/extends'));

var _slicedToArray2 = _interopRequireDefault(require('@babel/runtime/helpers/slicedToArray'));

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

var _logo_white = _interopRequireDefault(require('../assets/logo_white.svg'));

var _Typography = _interopRequireDefault(require('../Typography'));

var _useTheme = _interopRequireDefault(require('../utils/useTheme'));

var _useClickAway = _interopRequireDefault(require('../utils/useClickAway'));

var _styledComponents = require('./styledComponents');

var _DropdownMenu = require('./DropdownMenu');

var __jsx = _react['default'].createElement;

function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}

/*
 * Copyright (c) 2020 The Ontario Institute for Cancer Research. All rights reserved
 *
 * This program and the accompanying materials are made available under the terms of
 * the GNU Affero General Public License v3.0. You should have received a copy of the
 * GNU Affero General Public License along with this program.
 *  If not, see <http://www.gnu.org/licenses/>.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

var _ref =
  process.env.NODE_ENV === 'production'
    ? {
        name: '1collps-Uikit-UserBadge',
        styles: 'font-size:12px;font-weight:normal;;label:Uikit-UserBadge;',
      }
    : {
        name: '1collps-Uikit-UserBadge',
        styles: 'font-size:12px;font-weight:normal;;label:Uikit-UserBadge;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5RGlDIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbG9nbyBmcm9tICcuLi9hc3NldHMvbG9nb193aGl0ZS5zdmcnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXRpbHMvdXNlVGhlbWUnO1xuaW1wb3J0IHVzZUNsaWNrQXdheSBmcm9tICcuLi91dGlscy91c2VDbGlja0F3YXknO1xuaW1wb3J0IHsgQXBwQmFyQ29udGFpbmVyLCBMb2dvQ29udGFpbmVyLCBMb2dvSW1hZ2UsIE1lbnVHcm91cERpc3BsYXksIE1lbnVJdGVtQ29udGFpbmVyLCBNZW51SXRlbUNvbnRlbnQsIFNlY3Rpb25EaXNwbGF5LCBVc2VyQmFkZ2VDb250YWluZXIsIH0gZnJvbSAnLi9zdHlsZWRDb21wb25lbnRzJztcbmltcG9ydCB7IERyb3Bkb3duTWVudUl0ZW0gfSBmcm9tICcuL0Ryb3Bkb3duTWVudSc7XG5leHBvcnQgY29uc3QgVXNlckJhZGdlID0gKF9hKSA9PiB7XG4gICAgdmFyIHsgZmlyc3ROYW1lID0gJycsIGxhc3ROYW1lID0gJycsIHRpdGxlID0gbnVsbCwgc2hvd0dyZWV0aW5nID0gdHJ1ZSB9ID0gX2EsIG90aGVyUHJvcHMgPSBfX3Jlc3QoX2EsIFtcImZpcnN0TmFtZVwiLCBcImxhc3ROYW1lXCIsIFwidGl0bGVcIiwgXCJzaG93R3JlZXRpbmdcIl0pO1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgICBjb25zdCBVc2VyTmFtZUljb24gPSAoKSA9PiAoPFR5cG9ncmFwaHkgdmFyaWFudD1cInN1YnRpdGxlMlwiIGNvbG9yPVwicHJpbWFyeVwiIGNvbXBvbmVudD1cImRpdlwiIGNzcz17Y3NzIGBcbiAgICAgICAgd2lkdGg6IDQwcHg7XG4gICAgICAgIGhlaWdodDogNDBweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6ICR7c2hvd0dyZWV0aW5nID8gJzIwcHgnIDogJyd9O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAxMDAwcHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBiYWNrZ3JvdW5kOiAke3RoZW1lLmNvbG9ycy5hY2NlbnQxXzN9O1xuICAgICAgYH0+XG4gICAgICB7KGZpcnN0TmFtZVswXSB8fCAnJykudG9VcHBlckNhc2UoKX1cbiAgICAgIHsobGFzdE5hbWVbMF0gfHwgJycpLnRvVXBwZXJDYXNlKCl9XG4gICAgPC9UeXBvZ3JhcGh5Pik7XG4gICAgcmV0dXJuIHNob3dHcmVldGluZyA/ICg8VXNlckJhZGdlQ29udGFpbmVyIHsuLi5vdGhlclByb3BzfT5cbiAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJuYXZpZ2F0aW9uXCIgY29tcG9uZW50PVwiZGl2XCIgYm9sZD5cbiAgICAgICAgSGVsbG8sIHtmaXJzdE5hbWV9XG4gICAgICAgIHt0aXRsZSAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgICAgIGB9PlxuICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgIDwvZGl2Pil9XG4gICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICA8VXNlck5hbWVJY29uIC8+XG4gICAgPC9Vc2VyQmFkZ2VDb250YWluZXI+KSA6ICg8VXNlck5hbWVJY29uIC8+KTtcbn07XG5Vc2VyQmFkZ2UucHJvcFR5cGVzID0ge1xuICAgIGZpcnN0TmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGxhc3ROYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgdGl0bGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCwgUHJvcFR5cGVzLm9uZU9mKFtudWxsXSkuaXNSZXF1aXJlZF0pXG4gICAgICAgIC5pc1JlcXVpcmVkLFxufTtcbmV4cG9ydCBjb25zdCBMb2dvID0gKHsgRG9tQ29tcG9uZW50ID0gKHByb3BzKSA9PiA8c3BhbiB7Li4ucHJvcHN9Lz4gfSkgPT4ge1xuICAgIGNvbnN0IENvbnRhaW5lckNvbXBvbmVudCA9IExvZ29Db250YWluZXIud2l0aENvbXBvbmVudChEb21Db21wb25lbnQpO1xuICAgIHJldHVybiAoPENvbnRhaW5lckNvbXBvbmVudD5cbiAgICAgIDxMb2dvSW1hZ2Ugc3JjPXtsb2dvfSBhbHQ9XCJBcmdvIExvZ29cIi8+XG4gICAgPC9Db250YWluZXJDb21wb25lbnQ+KTtcbn07XG5Mb2dvLnByb3BUeXBlcyA9IHtcbiAgICBEb21Db21wb25lbnQ6IFByb3BUeXBlcy5mdW5jLFxufTtcbmV4cG9ydCBjb25zdCBTZWN0aW9uID0gKHByb3BzKSA9PiA8U2VjdGlvbkRpc3BsYXkgey4uLnByb3BzfS8+O1xuZXhwb3J0IGNvbnN0IE1lbnVHcm91cCA9IChwcm9wcykgPT4gPE1lbnVHcm91cERpc3BsYXkgey4uLnByb3BzfS8+O1xuZXhwb3J0IGNvbnN0IE1lbnVJdGVtID0gUmVhY3QuZm9yd2FyZFJlZigoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBpZCwgYWN0aXZlID0gZmFsc2UsIERvbUNvbXBvbmVudCA9IChfYSkgPT4ge1xuICAgIHZhciB7IGFjdGl2ZSB9ID0gX2EsIG90aGVycyA9IF9fcmVzdChfYSwgW1wiYWN0aXZlXCJdKTtcbiAgICByZXR1cm4gPGEgey4uLm90aGVyc30vPjtcbn0sIGRyb3Bkb3duTWVudSwgfSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gICAgY29uc3QgcmVmID0gKGZvcndhcmRlZFJlZiB8fCBSZWFjdC5jcmVhdGVSZWYoKSk7XG4gICAgY29uc3QgW2lzRHJvcGRvd25PcGVuLCBzZXREcm9wZG93bk9wZW5dID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIHVzZUNsaWNrQXdheSh7XG4gICAgICAgIGRvbUVsZW1lbnRSZWY6IHJlZixcbiAgICAgICAgb25DbGlja0F3YXk6ICgpID0+IHNldERyb3Bkb3duT3BlbihmYWxzZSksXG4gICAgICAgIG9uRWxlbWVudENsaWNrOiAoKSA9PiBzZXREcm9wZG93bk9wZW4oIWlzRHJvcGRvd25PcGVuKSxcbiAgICB9KTtcbiAgICByZXR1cm4gKDxNZW51SXRlbUNvbnRhaW5lciBjbGFzc05hbWU9e2NsYXNzTmFtZX0gaWQ9e2lkfSByZWY9e3JlZn0gYWN0aXZlPXthY3RpdmV9PlxuICAgICAgICA8TWVudUl0ZW1Db250ZW50IGJvbGQ+e2NoaWxkcmVufTwvTWVudUl0ZW1Db250ZW50PlxuICAgICAgICB7aXNEcm9wZG93bk9wZW4gJiYgZHJvcGRvd25NZW51fVxuICAgICAgPC9NZW51SXRlbUNvbnRhaW5lcj4pO1xufSk7XG5jb25zdCBBcHBCYXIgPSBBcHBCYXJDb250YWluZXI7XG5BcHBCYXIucHJvcFR5cGVzID0ge307XG5leHBvcnQgZGVmYXVsdCBBcHBCYXI7XG5leHBvcnQgeyBEcm9wZG93bk1lbnUsIERyb3Bkb3duTWVudUl0ZW0gfSBmcm9tICcuL0Ryb3Bkb3duTWVudSc7XG5leHBvcnQgY29uc3QgTmF2QmFyRWxlbWVudCA9IChfYSkgPT4ge1xuICAgIHZhciB7IGlzTGluayA9IHRydWUsIHNob3VsZFJlbmRlciA9IHRydWUsIG5hbWUsIG9uQ2xpY2sgPSAoKSA9PiBudWxsLCBhY3RpdmUsIGlzRHJvcGRvd24gPSBmYWxzZSwgTGlua0NvbXAgfSA9IF9hLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wiaXNMaW5rXCIsIFwic2hvdWxkUmVuZGVyXCIsIFwibmFtZVwiLCBcIm9uQ2xpY2tcIiwgXCJhY3RpdmVcIiwgXCJpc0Ryb3Bkb3duXCIsIFwiTGlua0NvbXBcIl0pO1xuICAgIGNvbnN0IG5hdkl0ZW0gPSBpc0Ryb3Bkb3duID8gKDxEcm9wZG93bk1lbnVJdGVtIHJlZj17UmVhY3QuY3JlYXRlUmVmKCl9IGFjdGl2ZT17YWN0aXZlfT5cbiAgICAgIHtuYW1lfVxuICAgIDwvRHJvcGRvd25NZW51SXRlbT4pIDogKDxNZW51SXRlbSByZWY9e1JlYWN0LmNyZWF0ZVJlZigpfSBhY3RpdmU9e2FjdGl2ZX0+XG4gICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PXsnZGVmYXVsdCd9PntuYW1lfTwvVHlwb2dyYXBoeT5cbiAgICA8L01lbnVJdGVtPik7XG4gICAgcmV0dXJuIHNob3VsZFJlbmRlciA/IChpc0xpbmsgPyAoPExpbmtDb21wIHsuLi5wcm9wc30gY3NzPXtjc3MgYFxuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgYH0+XG4gICAgICAgIDxhIGNzcz17Y3NzIGBcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBgfT5cbiAgICAgICAgICB7bmF2SXRlbX1cbiAgICAgICAgPC9hPlxuICAgICAgPC9MaW5rQ29tcD4pIDogKDxkaXYgb25DbGljaz17b25DbGlja30+IHtuYXZJdGVtfSA8L2Rpdj4pKSA6IG51bGw7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanN4Lm1hcCJdfQ== */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var UserBadge = function UserBadge(_a) {
  var _a$firstName = _a.firstName,
    firstName = _a$firstName === void 0 ? '' : _a$firstName,
    _a$lastName = _a.lastName,
    lastName = _a$lastName === void 0 ? '' : _a$lastName,
    _a$title = _a.title,
    title = _a$title === void 0 ? null : _a$title,
    _a$showGreeting = _a.showGreeting,
    showGreeting = _a$showGreeting === void 0 ? true : _a$showGreeting,
    otherProps = __rest(_a, ['firstName', 'lastName', 'title', 'showGreeting']);

  var theme = (0, _useTheme['default'])();

  var UserNameIcon = function UserNameIcon() {
    return (0, _core.jsx)(
      _Typography['default'],
      {
        variant: 'subtitle2',
        color: 'primary',
        component: 'div',
        css: /*#__PURE__*/ (0, _core.css)(
          'width:40px;height:40px;margin-left:',
          showGreeting ? '20px' : '',
          ';border-radius:1000px;display:flex;justify-content:center;align-items:center;background:',
          theme.colors.accent1_3,
          ';;label:Uikit-UserNameIcon;' +
            (process.env.NODE_ENV === 'production'
              ? ''
              : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5Q3lHIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbG9nbyBmcm9tICcuLi9hc3NldHMvbG9nb193aGl0ZS5zdmcnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXRpbHMvdXNlVGhlbWUnO1xuaW1wb3J0IHVzZUNsaWNrQXdheSBmcm9tICcuLi91dGlscy91c2VDbGlja0F3YXknO1xuaW1wb3J0IHsgQXBwQmFyQ29udGFpbmVyLCBMb2dvQ29udGFpbmVyLCBMb2dvSW1hZ2UsIE1lbnVHcm91cERpc3BsYXksIE1lbnVJdGVtQ29udGFpbmVyLCBNZW51SXRlbUNvbnRlbnQsIFNlY3Rpb25EaXNwbGF5LCBVc2VyQmFkZ2VDb250YWluZXIsIH0gZnJvbSAnLi9zdHlsZWRDb21wb25lbnRzJztcbmltcG9ydCB7IERyb3Bkb3duTWVudUl0ZW0gfSBmcm9tICcuL0Ryb3Bkb3duTWVudSc7XG5leHBvcnQgY29uc3QgVXNlckJhZGdlID0gKF9hKSA9PiB7XG4gICAgdmFyIHsgZmlyc3ROYW1lID0gJycsIGxhc3ROYW1lID0gJycsIHRpdGxlID0gbnVsbCwgc2hvd0dyZWV0aW5nID0gdHJ1ZSB9ID0gX2EsIG90aGVyUHJvcHMgPSBfX3Jlc3QoX2EsIFtcImZpcnN0TmFtZVwiLCBcImxhc3ROYW1lXCIsIFwidGl0bGVcIiwgXCJzaG93R3JlZXRpbmdcIl0pO1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgICBjb25zdCBVc2VyTmFtZUljb24gPSAoKSA9PiAoPFR5cG9ncmFwaHkgdmFyaWFudD1cInN1YnRpdGxlMlwiIGNvbG9yPVwicHJpbWFyeVwiIGNvbXBvbmVudD1cImRpdlwiIGNzcz17Y3NzIGBcbiAgICAgICAgd2lkdGg6IDQwcHg7XG4gICAgICAgIGhlaWdodDogNDBweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6ICR7c2hvd0dyZWV0aW5nID8gJzIwcHgnIDogJyd9O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAxMDAwcHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBiYWNrZ3JvdW5kOiAke3RoZW1lLmNvbG9ycy5hY2NlbnQxXzN9O1xuICAgICAgYH0+XG4gICAgICB7KGZpcnN0TmFtZVswXSB8fCAnJykudG9VcHBlckNhc2UoKX1cbiAgICAgIHsobGFzdE5hbWVbMF0gfHwgJycpLnRvVXBwZXJDYXNlKCl9XG4gICAgPC9UeXBvZ3JhcGh5Pik7XG4gICAgcmV0dXJuIHNob3dHcmVldGluZyA/ICg8VXNlckJhZGdlQ29udGFpbmVyIHsuLi5vdGhlclByb3BzfT5cbiAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJuYXZpZ2F0aW9uXCIgY29tcG9uZW50PVwiZGl2XCIgYm9sZD5cbiAgICAgICAgSGVsbG8sIHtmaXJzdE5hbWV9XG4gICAgICAgIHt0aXRsZSAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgICAgIGB9PlxuICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgIDwvZGl2Pil9XG4gICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICA8VXNlck5hbWVJY29uIC8+XG4gICAgPC9Vc2VyQmFkZ2VDb250YWluZXI+KSA6ICg8VXNlck5hbWVJY29uIC8+KTtcbn07XG5Vc2VyQmFkZ2UucHJvcFR5cGVzID0ge1xuICAgIGZpcnN0TmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGxhc3ROYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgdGl0bGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCwgUHJvcFR5cGVzLm9uZU9mKFtudWxsXSkuaXNSZXF1aXJlZF0pXG4gICAgICAgIC5pc1JlcXVpcmVkLFxufTtcbmV4cG9ydCBjb25zdCBMb2dvID0gKHsgRG9tQ29tcG9uZW50ID0gKHByb3BzKSA9PiA8c3BhbiB7Li4ucHJvcHN9Lz4gfSkgPT4ge1xuICAgIGNvbnN0IENvbnRhaW5lckNvbXBvbmVudCA9IExvZ29Db250YWluZXIud2l0aENvbXBvbmVudChEb21Db21wb25lbnQpO1xuICAgIHJldHVybiAoPENvbnRhaW5lckNvbXBvbmVudD5cbiAgICAgIDxMb2dvSW1hZ2Ugc3JjPXtsb2dvfSBhbHQ9XCJBcmdvIExvZ29cIi8+XG4gICAgPC9Db250YWluZXJDb21wb25lbnQ+KTtcbn07XG5Mb2dvLnByb3BUeXBlcyA9IHtcbiAgICBEb21Db21wb25lbnQ6IFByb3BUeXBlcy5mdW5jLFxufTtcbmV4cG9ydCBjb25zdCBTZWN0aW9uID0gKHByb3BzKSA9PiA8U2VjdGlvbkRpc3BsYXkgey4uLnByb3BzfS8+O1xuZXhwb3J0IGNvbnN0IE1lbnVHcm91cCA9IChwcm9wcykgPT4gPE1lbnVHcm91cERpc3BsYXkgey4uLnByb3BzfS8+O1xuZXhwb3J0IGNvbnN0IE1lbnVJdGVtID0gUmVhY3QuZm9yd2FyZFJlZigoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBpZCwgYWN0aXZlID0gZmFsc2UsIERvbUNvbXBvbmVudCA9IChfYSkgPT4ge1xuICAgIHZhciB7IGFjdGl2ZSB9ID0gX2EsIG90aGVycyA9IF9fcmVzdChfYSwgW1wiYWN0aXZlXCJdKTtcbiAgICByZXR1cm4gPGEgey4uLm90aGVyc30vPjtcbn0sIGRyb3Bkb3duTWVudSwgfSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gICAgY29uc3QgcmVmID0gKGZvcndhcmRlZFJlZiB8fCBSZWFjdC5jcmVhdGVSZWYoKSk7XG4gICAgY29uc3QgW2lzRHJvcGRvd25PcGVuLCBzZXREcm9wZG93bk9wZW5dID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIHVzZUNsaWNrQXdheSh7XG4gICAgICAgIGRvbUVsZW1lbnRSZWY6IHJlZixcbiAgICAgICAgb25DbGlja0F3YXk6ICgpID0+IHNldERyb3Bkb3duT3BlbihmYWxzZSksXG4gICAgICAgIG9uRWxlbWVudENsaWNrOiAoKSA9PiBzZXREcm9wZG93bk9wZW4oIWlzRHJvcGRvd25PcGVuKSxcbiAgICB9KTtcbiAgICByZXR1cm4gKDxNZW51SXRlbUNvbnRhaW5lciBjbGFzc05hbWU9e2NsYXNzTmFtZX0gaWQ9e2lkfSByZWY9e3JlZn0gYWN0aXZlPXthY3RpdmV9PlxuICAgICAgICA8TWVudUl0ZW1Db250ZW50IGJvbGQ+e2NoaWxkcmVufTwvTWVudUl0ZW1Db250ZW50PlxuICAgICAgICB7aXNEcm9wZG93bk9wZW4gJiYgZHJvcGRvd25NZW51fVxuICAgICAgPC9NZW51SXRlbUNvbnRhaW5lcj4pO1xufSk7XG5jb25zdCBBcHBCYXIgPSBBcHBCYXJDb250YWluZXI7XG5BcHBCYXIucHJvcFR5cGVzID0ge307XG5leHBvcnQgZGVmYXVsdCBBcHBCYXI7XG5leHBvcnQgeyBEcm9wZG93bk1lbnUsIERyb3Bkb3duTWVudUl0ZW0gfSBmcm9tICcuL0Ryb3Bkb3duTWVudSc7XG5leHBvcnQgY29uc3QgTmF2QmFyRWxlbWVudCA9IChfYSkgPT4ge1xuICAgIHZhciB7IGlzTGluayA9IHRydWUsIHNob3VsZFJlbmRlciA9IHRydWUsIG5hbWUsIG9uQ2xpY2sgPSAoKSA9PiBudWxsLCBhY3RpdmUsIGlzRHJvcGRvd24gPSBmYWxzZSwgTGlua0NvbXAgfSA9IF9hLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wiaXNMaW5rXCIsIFwic2hvdWxkUmVuZGVyXCIsIFwibmFtZVwiLCBcIm9uQ2xpY2tcIiwgXCJhY3RpdmVcIiwgXCJpc0Ryb3Bkb3duXCIsIFwiTGlua0NvbXBcIl0pO1xuICAgIGNvbnN0IG5hdkl0ZW0gPSBpc0Ryb3Bkb3duID8gKDxEcm9wZG93bk1lbnVJdGVtIHJlZj17UmVhY3QuY3JlYXRlUmVmKCl9IGFjdGl2ZT17YWN0aXZlfT5cbiAgICAgIHtuYW1lfVxuICAgIDwvRHJvcGRvd25NZW51SXRlbT4pIDogKDxNZW51SXRlbSByZWY9e1JlYWN0LmNyZWF0ZVJlZigpfSBhY3RpdmU9e2FjdGl2ZX0+XG4gICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PXsnZGVmYXVsdCd9PntuYW1lfTwvVHlwb2dyYXBoeT5cbiAgICA8L01lbnVJdGVtPik7XG4gICAgcmV0dXJuIHNob3VsZFJlbmRlciA/IChpc0xpbmsgPyAoPExpbmtDb21wIHsuLi5wcm9wc30gY3NzPXtjc3MgYFxuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgYH0+XG4gICAgICAgIDxhIGNzcz17Y3NzIGBcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBgfT5cbiAgICAgICAgICB7bmF2SXRlbX1cbiAgICAgICAgPC9hPlxuICAgICAgPC9MaW5rQ29tcD4pIDogKDxkaXYgb25DbGljaz17b25DbGlja30+IHtuYXZJdGVtfSA8L2Rpdj4pKSA6IG51bGw7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanN4Lm1hcCJdfQ== */'),
        ),
      },
      (firstName[0] || '').toUpperCase(),
      (lastName[0] || '').toUpperCase(),
    );
  };

  return showGreeting
    ? (0, _core.jsx)(
        _styledComponents.UserBadgeContainer,
        otherProps,
        (0, _core.jsx)(
          _Typography['default'],
          {
            variant: 'navigation',
            component: 'div',
            bold: true,
          },
          'Hello, ',
          firstName,
          title &&
            (0, _core.jsx)(
              'div',
              {
                css: _ref,
              },
              title,
            ),
        ),
        (0, _core.jsx)(UserNameIcon, null),
      )
    : (0, _core.jsx)(UserNameIcon, null);
};

exports.UserBadge = UserBadge;
UserBadge.propTypes = {
  firstName: _propTypes['default'].string.isRequired,
  lastName: _propTypes['default'].string.isRequired,
  title: _propTypes['default'].oneOfType([
    _propTypes['default'].string.isRequired,
    _propTypes['default'].oneOf([null]).isRequired,
  ]).isRequired,
};

var Logo = function Logo(_ref4) {
  var _ref4$DomComponent = _ref4.DomComponent,
    DomComponent =
      _ref4$DomComponent === void 0
        ? function (props) {
            return (0, _core.jsx)('span', props);
          }
        : _ref4$DomComponent;

  var ContainerComponent = _styledComponents.LogoContainer.withComponent(DomComponent, {
    target: 'e5xk8vb0',
    label: 'Uikit-ContainerComponent',
  });

  return (0, _core.jsx)(
    ContainerComponent,
    null,
    (0, _core.jsx)(_styledComponents.LogoImage, {
      src: _logo_white['default'],
      alt: 'Argo Logo',
    }),
  );
};

exports.Logo = Logo;
Logo.propTypes = {
  DomComponent: _propTypes['default'].func,
};

var Section = function Section(props) {
  return (0, _core.jsx)(_styledComponents.SectionDisplay, props);
};

exports.Section = Section;

var MenuGroup = function MenuGroup(props) {
  return (0, _core.jsx)(_styledComponents.MenuGroupDisplay, props);
};

exports.MenuGroup = MenuGroup;

var MenuItem = /*#__PURE__*/ _react['default'].forwardRef(function (_ref5, forwardedRef) {
  var children = _ref5.children,
    className = _ref5.className,
    id = _ref5.id,
    _ref5$active = _ref5.active,
    active = _ref5$active === void 0 ? false : _ref5$active,
    _ref5$DomComponent = _ref5.DomComponent,
    DomComponent =
      _ref5$DomComponent === void 0
        ? function (_a) {
            var active = _a.active,
              others = __rest(_a, ['active']);

            return (0, _core.jsx)('a', others);
          }
        : _ref5$DomComponent,
    dropdownMenu = _ref5.dropdownMenu;

  var ref = forwardedRef || /*#__PURE__*/ _react['default'].createRef();

  var _React$useState = _react['default'].useState(false),
    _React$useState2 = (0, _slicedToArray2['default'])(_React$useState, 2),
    isDropdownOpen = _React$useState2[0],
    setDropdownOpen = _React$useState2[1];

  (0, _useClickAway['default'])({
    domElementRef: ref,
    onClickAway: function onClickAway() {
      return setDropdownOpen(false);
    },
    onElementClick: function onElementClick() {
      return setDropdownOpen(!isDropdownOpen);
    },
  });
  return (0, _core.jsx)(
    _styledComponents.MenuItemContainer,
    {
      className: className,
      id: id,
      ref: ref,
      active: active,
    },
    (0, _core.jsx)(
      _styledComponents.MenuItemContent,
      {
        bold: true,
      },
      children,
    ),
    isDropdownOpen && dropdownMenu,
  );
});

exports.MenuItem = MenuItem;
var AppBar = _styledComponents.AppBarContainer;
AppBar.propTypes = {};
var _default = AppBar;
exports['default'] = _default;

var _ref2 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '1c0ef9t-Uikit-NavBarElement',
        styles: 'cursor:pointer;;label:Uikit-NavBarElement;',
      }
    : {
        name: '1c0ef9t-Uikit-NavBarElement',
        styles: 'cursor:pointer;;label:Uikit-NavBarElement;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErR21FIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbG9nbyBmcm9tICcuLi9hc3NldHMvbG9nb193aGl0ZS5zdmcnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXRpbHMvdXNlVGhlbWUnO1xuaW1wb3J0IHVzZUNsaWNrQXdheSBmcm9tICcuLi91dGlscy91c2VDbGlja0F3YXknO1xuaW1wb3J0IHsgQXBwQmFyQ29udGFpbmVyLCBMb2dvQ29udGFpbmVyLCBMb2dvSW1hZ2UsIE1lbnVHcm91cERpc3BsYXksIE1lbnVJdGVtQ29udGFpbmVyLCBNZW51SXRlbUNvbnRlbnQsIFNlY3Rpb25EaXNwbGF5LCBVc2VyQmFkZ2VDb250YWluZXIsIH0gZnJvbSAnLi9zdHlsZWRDb21wb25lbnRzJztcbmltcG9ydCB7IERyb3Bkb3duTWVudUl0ZW0gfSBmcm9tICcuL0Ryb3Bkb3duTWVudSc7XG5leHBvcnQgY29uc3QgVXNlckJhZGdlID0gKF9hKSA9PiB7XG4gICAgdmFyIHsgZmlyc3ROYW1lID0gJycsIGxhc3ROYW1lID0gJycsIHRpdGxlID0gbnVsbCwgc2hvd0dyZWV0aW5nID0gdHJ1ZSB9ID0gX2EsIG90aGVyUHJvcHMgPSBfX3Jlc3QoX2EsIFtcImZpcnN0TmFtZVwiLCBcImxhc3ROYW1lXCIsIFwidGl0bGVcIiwgXCJzaG93R3JlZXRpbmdcIl0pO1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgICBjb25zdCBVc2VyTmFtZUljb24gPSAoKSA9PiAoPFR5cG9ncmFwaHkgdmFyaWFudD1cInN1YnRpdGxlMlwiIGNvbG9yPVwicHJpbWFyeVwiIGNvbXBvbmVudD1cImRpdlwiIGNzcz17Y3NzIGBcbiAgICAgICAgd2lkdGg6IDQwcHg7XG4gICAgICAgIGhlaWdodDogNDBweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6ICR7c2hvd0dyZWV0aW5nID8gJzIwcHgnIDogJyd9O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAxMDAwcHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBiYWNrZ3JvdW5kOiAke3RoZW1lLmNvbG9ycy5hY2NlbnQxXzN9O1xuICAgICAgYH0+XG4gICAgICB7KGZpcnN0TmFtZVswXSB8fCAnJykudG9VcHBlckNhc2UoKX1cbiAgICAgIHsobGFzdE5hbWVbMF0gfHwgJycpLnRvVXBwZXJDYXNlKCl9XG4gICAgPC9UeXBvZ3JhcGh5Pik7XG4gICAgcmV0dXJuIHNob3dHcmVldGluZyA/ICg8VXNlckJhZGdlQ29udGFpbmVyIHsuLi5vdGhlclByb3BzfT5cbiAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJuYXZpZ2F0aW9uXCIgY29tcG9uZW50PVwiZGl2XCIgYm9sZD5cbiAgICAgICAgSGVsbG8sIHtmaXJzdE5hbWV9XG4gICAgICAgIHt0aXRsZSAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgICAgIGB9PlxuICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgIDwvZGl2Pil9XG4gICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICA8VXNlck5hbWVJY29uIC8+XG4gICAgPC9Vc2VyQmFkZ2VDb250YWluZXI+KSA6ICg8VXNlck5hbWVJY29uIC8+KTtcbn07XG5Vc2VyQmFkZ2UucHJvcFR5cGVzID0ge1xuICAgIGZpcnN0TmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGxhc3ROYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgdGl0bGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCwgUHJvcFR5cGVzLm9uZU9mKFtudWxsXSkuaXNSZXF1aXJlZF0pXG4gICAgICAgIC5pc1JlcXVpcmVkLFxufTtcbmV4cG9ydCBjb25zdCBMb2dvID0gKHsgRG9tQ29tcG9uZW50ID0gKHByb3BzKSA9PiA8c3BhbiB7Li4ucHJvcHN9Lz4gfSkgPT4ge1xuICAgIGNvbnN0IENvbnRhaW5lckNvbXBvbmVudCA9IExvZ29Db250YWluZXIud2l0aENvbXBvbmVudChEb21Db21wb25lbnQpO1xuICAgIHJldHVybiAoPENvbnRhaW5lckNvbXBvbmVudD5cbiAgICAgIDxMb2dvSW1hZ2Ugc3JjPXtsb2dvfSBhbHQ9XCJBcmdvIExvZ29cIi8+XG4gICAgPC9Db250YWluZXJDb21wb25lbnQ+KTtcbn07XG5Mb2dvLnByb3BUeXBlcyA9IHtcbiAgICBEb21Db21wb25lbnQ6IFByb3BUeXBlcy5mdW5jLFxufTtcbmV4cG9ydCBjb25zdCBTZWN0aW9uID0gKHByb3BzKSA9PiA8U2VjdGlvbkRpc3BsYXkgey4uLnByb3BzfS8+O1xuZXhwb3J0IGNvbnN0IE1lbnVHcm91cCA9IChwcm9wcykgPT4gPE1lbnVHcm91cERpc3BsYXkgey4uLnByb3BzfS8+O1xuZXhwb3J0IGNvbnN0IE1lbnVJdGVtID0gUmVhY3QuZm9yd2FyZFJlZigoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBpZCwgYWN0aXZlID0gZmFsc2UsIERvbUNvbXBvbmVudCA9IChfYSkgPT4ge1xuICAgIHZhciB7IGFjdGl2ZSB9ID0gX2EsIG90aGVycyA9IF9fcmVzdChfYSwgW1wiYWN0aXZlXCJdKTtcbiAgICByZXR1cm4gPGEgey4uLm90aGVyc30vPjtcbn0sIGRyb3Bkb3duTWVudSwgfSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gICAgY29uc3QgcmVmID0gKGZvcndhcmRlZFJlZiB8fCBSZWFjdC5jcmVhdGVSZWYoKSk7XG4gICAgY29uc3QgW2lzRHJvcGRvd25PcGVuLCBzZXREcm9wZG93bk9wZW5dID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIHVzZUNsaWNrQXdheSh7XG4gICAgICAgIGRvbUVsZW1lbnRSZWY6IHJlZixcbiAgICAgICAgb25DbGlja0F3YXk6ICgpID0+IHNldERyb3Bkb3duT3BlbihmYWxzZSksXG4gICAgICAgIG9uRWxlbWVudENsaWNrOiAoKSA9PiBzZXREcm9wZG93bk9wZW4oIWlzRHJvcGRvd25PcGVuKSxcbiAgICB9KTtcbiAgICByZXR1cm4gKDxNZW51SXRlbUNvbnRhaW5lciBjbGFzc05hbWU9e2NsYXNzTmFtZX0gaWQ9e2lkfSByZWY9e3JlZn0gYWN0aXZlPXthY3RpdmV9PlxuICAgICAgICA8TWVudUl0ZW1Db250ZW50IGJvbGQ+e2NoaWxkcmVufTwvTWVudUl0ZW1Db250ZW50PlxuICAgICAgICB7aXNEcm9wZG93bk9wZW4gJiYgZHJvcGRvd25NZW51fVxuICAgICAgPC9NZW51SXRlbUNvbnRhaW5lcj4pO1xufSk7XG5jb25zdCBBcHBCYXIgPSBBcHBCYXJDb250YWluZXI7XG5BcHBCYXIucHJvcFR5cGVzID0ge307XG5leHBvcnQgZGVmYXVsdCBBcHBCYXI7XG5leHBvcnQgeyBEcm9wZG93bk1lbnUsIERyb3Bkb3duTWVudUl0ZW0gfSBmcm9tICcuL0Ryb3Bkb3duTWVudSc7XG5leHBvcnQgY29uc3QgTmF2QmFyRWxlbWVudCA9IChfYSkgPT4ge1xuICAgIHZhciB7IGlzTGluayA9IHRydWUsIHNob3VsZFJlbmRlciA9IHRydWUsIG5hbWUsIG9uQ2xpY2sgPSAoKSA9PiBudWxsLCBhY3RpdmUsIGlzRHJvcGRvd24gPSBmYWxzZSwgTGlua0NvbXAgfSA9IF9hLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wiaXNMaW5rXCIsIFwic2hvdWxkUmVuZGVyXCIsIFwibmFtZVwiLCBcIm9uQ2xpY2tcIiwgXCJhY3RpdmVcIiwgXCJpc0Ryb3Bkb3duXCIsIFwiTGlua0NvbXBcIl0pO1xuICAgIGNvbnN0IG5hdkl0ZW0gPSBpc0Ryb3Bkb3duID8gKDxEcm9wZG93bk1lbnVJdGVtIHJlZj17UmVhY3QuY3JlYXRlUmVmKCl9IGFjdGl2ZT17YWN0aXZlfT5cbiAgICAgIHtuYW1lfVxuICAgIDwvRHJvcGRvd25NZW51SXRlbT4pIDogKDxNZW51SXRlbSByZWY9e1JlYWN0LmNyZWF0ZVJlZigpfSBhY3RpdmU9e2FjdGl2ZX0+XG4gICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PXsnZGVmYXVsdCd9PntuYW1lfTwvVHlwb2dyYXBoeT5cbiAgICA8L01lbnVJdGVtPik7XG4gICAgcmV0dXJuIHNob3VsZFJlbmRlciA/IChpc0xpbmsgPyAoPExpbmtDb21wIHsuLi5wcm9wc30gY3NzPXtjc3MgYFxuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgYH0+XG4gICAgICAgIDxhIGNzcz17Y3NzIGBcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBgfT5cbiAgICAgICAgICB7bmF2SXRlbX1cbiAgICAgICAgPC9hPlxuICAgICAgPC9MaW5rQ29tcD4pIDogKDxkaXYgb25DbGljaz17b25DbGlja30+IHtuYXZJdGVtfSA8L2Rpdj4pKSA6IG51bGw7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanN4Lm1hcCJdfQ== */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var _ref3 =
  process.env.NODE_ENV === 'production'
    ? {
        name: '175jwm5-Uikit-NavBarElement',
        styles: 'height:100%;;label:Uikit-NavBarElement;',
      }
    : {
        name: '175jwm5-Uikit-NavBarElement',
        styles: 'height:100%;;label:Uikit-NavBarElement;',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrSG9CIiwiZmlsZSI6ImluZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjMuMC4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqIE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbG9nbyBmcm9tICcuLi9hc3NldHMvbG9nb193aGl0ZS5zdmcnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXRpbHMvdXNlVGhlbWUnO1xuaW1wb3J0IHVzZUNsaWNrQXdheSBmcm9tICcuLi91dGlscy91c2VDbGlja0F3YXknO1xuaW1wb3J0IHsgQXBwQmFyQ29udGFpbmVyLCBMb2dvQ29udGFpbmVyLCBMb2dvSW1hZ2UsIE1lbnVHcm91cERpc3BsYXksIE1lbnVJdGVtQ29udGFpbmVyLCBNZW51SXRlbUNvbnRlbnQsIFNlY3Rpb25EaXNwbGF5LCBVc2VyQmFkZ2VDb250YWluZXIsIH0gZnJvbSAnLi9zdHlsZWRDb21wb25lbnRzJztcbmltcG9ydCB7IERyb3Bkb3duTWVudUl0ZW0gfSBmcm9tICcuL0Ryb3Bkb3duTWVudSc7XG5leHBvcnQgY29uc3QgVXNlckJhZGdlID0gKF9hKSA9PiB7XG4gICAgdmFyIHsgZmlyc3ROYW1lID0gJycsIGxhc3ROYW1lID0gJycsIHRpdGxlID0gbnVsbCwgc2hvd0dyZWV0aW5nID0gdHJ1ZSB9ID0gX2EsIG90aGVyUHJvcHMgPSBfX3Jlc3QoX2EsIFtcImZpcnN0TmFtZVwiLCBcImxhc3ROYW1lXCIsIFwidGl0bGVcIiwgXCJzaG93R3JlZXRpbmdcIl0pO1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgICBjb25zdCBVc2VyTmFtZUljb24gPSAoKSA9PiAoPFR5cG9ncmFwaHkgdmFyaWFudD1cInN1YnRpdGxlMlwiIGNvbG9yPVwicHJpbWFyeVwiIGNvbXBvbmVudD1cImRpdlwiIGNzcz17Y3NzIGBcbiAgICAgICAgd2lkdGg6IDQwcHg7XG4gICAgICAgIGhlaWdodDogNDBweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6ICR7c2hvd0dyZWV0aW5nID8gJzIwcHgnIDogJyd9O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAxMDAwcHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBiYWNrZ3JvdW5kOiAke3RoZW1lLmNvbG9ycy5hY2NlbnQxXzN9O1xuICAgICAgYH0+XG4gICAgICB7KGZpcnN0TmFtZVswXSB8fCAnJykudG9VcHBlckNhc2UoKX1cbiAgICAgIHsobGFzdE5hbWVbMF0gfHwgJycpLnRvVXBwZXJDYXNlKCl9XG4gICAgPC9UeXBvZ3JhcGh5Pik7XG4gICAgcmV0dXJuIHNob3dHcmVldGluZyA/ICg8VXNlckJhZGdlQ29udGFpbmVyIHsuLi5vdGhlclByb3BzfT5cbiAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJuYXZpZ2F0aW9uXCIgY29tcG9uZW50PVwiZGl2XCIgYm9sZD5cbiAgICAgICAgSGVsbG8sIHtmaXJzdE5hbWV9XG4gICAgICAgIHt0aXRsZSAmJiAoPGRpdiBjc3M9e2NzcyBgXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgICAgIGB9PlxuICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgIDwvZGl2Pil9XG4gICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICA8VXNlck5hbWVJY29uIC8+XG4gICAgPC9Vc2VyQmFkZ2VDb250YWluZXI+KSA6ICg8VXNlck5hbWVJY29uIC8+KTtcbn07XG5Vc2VyQmFkZ2UucHJvcFR5cGVzID0ge1xuICAgIGZpcnN0TmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGxhc3ROYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgdGl0bGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCwgUHJvcFR5cGVzLm9uZU9mKFtudWxsXSkuaXNSZXF1aXJlZF0pXG4gICAgICAgIC5pc1JlcXVpcmVkLFxufTtcbmV4cG9ydCBjb25zdCBMb2dvID0gKHsgRG9tQ29tcG9uZW50ID0gKHByb3BzKSA9PiA8c3BhbiB7Li4ucHJvcHN9Lz4gfSkgPT4ge1xuICAgIGNvbnN0IENvbnRhaW5lckNvbXBvbmVudCA9IExvZ29Db250YWluZXIud2l0aENvbXBvbmVudChEb21Db21wb25lbnQpO1xuICAgIHJldHVybiAoPENvbnRhaW5lckNvbXBvbmVudD5cbiAgICAgIDxMb2dvSW1hZ2Ugc3JjPXtsb2dvfSBhbHQ9XCJBcmdvIExvZ29cIi8+XG4gICAgPC9Db250YWluZXJDb21wb25lbnQ+KTtcbn07XG5Mb2dvLnByb3BUeXBlcyA9IHtcbiAgICBEb21Db21wb25lbnQ6IFByb3BUeXBlcy5mdW5jLFxufTtcbmV4cG9ydCBjb25zdCBTZWN0aW9uID0gKHByb3BzKSA9PiA8U2VjdGlvbkRpc3BsYXkgey4uLnByb3BzfS8+O1xuZXhwb3J0IGNvbnN0IE1lbnVHcm91cCA9IChwcm9wcykgPT4gPE1lbnVHcm91cERpc3BsYXkgey4uLnByb3BzfS8+O1xuZXhwb3J0IGNvbnN0IE1lbnVJdGVtID0gUmVhY3QuZm9yd2FyZFJlZigoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBpZCwgYWN0aXZlID0gZmFsc2UsIERvbUNvbXBvbmVudCA9IChfYSkgPT4ge1xuICAgIHZhciB7IGFjdGl2ZSB9ID0gX2EsIG90aGVycyA9IF9fcmVzdChfYSwgW1wiYWN0aXZlXCJdKTtcbiAgICByZXR1cm4gPGEgey4uLm90aGVyc30vPjtcbn0sIGRyb3Bkb3duTWVudSwgfSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gICAgY29uc3QgcmVmID0gKGZvcndhcmRlZFJlZiB8fCBSZWFjdC5jcmVhdGVSZWYoKSk7XG4gICAgY29uc3QgW2lzRHJvcGRvd25PcGVuLCBzZXREcm9wZG93bk9wZW5dID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIHVzZUNsaWNrQXdheSh7XG4gICAgICAgIGRvbUVsZW1lbnRSZWY6IHJlZixcbiAgICAgICAgb25DbGlja0F3YXk6ICgpID0+IHNldERyb3Bkb3duT3BlbihmYWxzZSksXG4gICAgICAgIG9uRWxlbWVudENsaWNrOiAoKSA9PiBzZXREcm9wZG93bk9wZW4oIWlzRHJvcGRvd25PcGVuKSxcbiAgICB9KTtcbiAgICByZXR1cm4gKDxNZW51SXRlbUNvbnRhaW5lciBjbGFzc05hbWU9e2NsYXNzTmFtZX0gaWQ9e2lkfSByZWY9e3JlZn0gYWN0aXZlPXthY3RpdmV9PlxuICAgICAgICA8TWVudUl0ZW1Db250ZW50IGJvbGQ+e2NoaWxkcmVufTwvTWVudUl0ZW1Db250ZW50PlxuICAgICAgICB7aXNEcm9wZG93bk9wZW4gJiYgZHJvcGRvd25NZW51fVxuICAgICAgPC9NZW51SXRlbUNvbnRhaW5lcj4pO1xufSk7XG5jb25zdCBBcHBCYXIgPSBBcHBCYXJDb250YWluZXI7XG5BcHBCYXIucHJvcFR5cGVzID0ge307XG5leHBvcnQgZGVmYXVsdCBBcHBCYXI7XG5leHBvcnQgeyBEcm9wZG93bk1lbnUsIERyb3Bkb3duTWVudUl0ZW0gfSBmcm9tICcuL0Ryb3Bkb3duTWVudSc7XG5leHBvcnQgY29uc3QgTmF2QmFyRWxlbWVudCA9IChfYSkgPT4ge1xuICAgIHZhciB7IGlzTGluayA9IHRydWUsIHNob3VsZFJlbmRlciA9IHRydWUsIG5hbWUsIG9uQ2xpY2sgPSAoKSA9PiBudWxsLCBhY3RpdmUsIGlzRHJvcGRvd24gPSBmYWxzZSwgTGlua0NvbXAgfSA9IF9hLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wiaXNMaW5rXCIsIFwic2hvdWxkUmVuZGVyXCIsIFwibmFtZVwiLCBcIm9uQ2xpY2tcIiwgXCJhY3RpdmVcIiwgXCJpc0Ryb3Bkb3duXCIsIFwiTGlua0NvbXBcIl0pO1xuICAgIGNvbnN0IG5hdkl0ZW0gPSBpc0Ryb3Bkb3duID8gKDxEcm9wZG93bk1lbnVJdGVtIHJlZj17UmVhY3QuY3JlYXRlUmVmKCl9IGFjdGl2ZT17YWN0aXZlfT5cbiAgICAgIHtuYW1lfVxuICAgIDwvRHJvcGRvd25NZW51SXRlbT4pIDogKDxNZW51SXRlbSByZWY9e1JlYWN0LmNyZWF0ZVJlZigpfSBhY3RpdmU9e2FjdGl2ZX0+XG4gICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PXsnZGVmYXVsdCd9PntuYW1lfTwvVHlwb2dyYXBoeT5cbiAgICA8L01lbnVJdGVtPik7XG4gICAgcmV0dXJuIHNob3VsZFJlbmRlciA/IChpc0xpbmsgPyAoPExpbmtDb21wIHsuLi5wcm9wc30gY3NzPXtjc3MgYFxuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgYH0+XG4gICAgICAgIDxhIGNzcz17Y3NzIGBcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBgfT5cbiAgICAgICAgICB7bmF2SXRlbX1cbiAgICAgICAgPC9hPlxuICAgICAgPC9MaW5rQ29tcD4pIDogKDxkaXYgb25DbGljaz17b25DbGlja30+IHtuYXZJdGVtfSA8L2Rpdj4pKSA6IG51bGw7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanN4Lm1hcCJdfQ== */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      };

var NavBarElement = function NavBarElement(_a) {
  var _a$isLink = _a.isLink,
    isLink = _a$isLink === void 0 ? true : _a$isLink,
    _a$shouldRender = _a.shouldRender,
    shouldRender = _a$shouldRender === void 0 ? true : _a$shouldRender,
    name = _a.name,
    _a$onClick = _a.onClick,
    onClick =
      _a$onClick === void 0
        ? function () {
            return null;
          }
        : _a$onClick,
    active = _a.active,
    _a$isDropdown = _a.isDropdown,
    isDropdown = _a$isDropdown === void 0 ? false : _a$isDropdown,
    LinkComp = _a.LinkComp,
    props = __rest(_a, [
      'isLink',
      'shouldRender',
      'name',
      'onClick',
      'active',
      'isDropdown',
      'LinkComp',
    ]);

  var navItem = isDropdown
    ? (0, _core.jsx)(
        _DropdownMenu.DropdownMenuItem,
        {
          ref: /*#__PURE__*/ _react['default'].createRef(),
          active: active,
        },
        name,
      )
    : (0, _core.jsx)(
        MenuItem,
        {
          ref: /*#__PURE__*/ _react['default'].createRef(),
          active: active,
        },
        (0, _core.jsx)(
          _Typography['default'],
          {
            variant: 'default',
          },
          name,
        ),
      );
  return shouldRender
    ? isLink
      ? (0, _core.jsx)(
          LinkComp,
          (0, _extends2['default'])({}, props, {
            css: _ref2,
          }),
          (0, _core.jsx)(
            'a',
            {
              css: _ref3,
            },
            navItem,
          ),
        )
      : (0, _core.jsx)(
          'div',
          {
            onClick: onClick,
          },
          ' ',
          navItem,
          ' ',
        )
    : null;
};

exports.NavBarElement = NavBarElement;
